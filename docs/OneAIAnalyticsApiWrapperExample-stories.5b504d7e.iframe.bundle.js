"use strict";(self.webpackChunkoneai_analytics=self.webpackChunkoneai_analytics||[]).push([[487],{"./stories/OneAIAnalyticsApiWrapperExample.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{OneAIAnalyticsApiWrapperStory:()=>OneAIAnalyticsApiWrapperStory,__namedExportsOrder:()=>__namedExportsOrder,default:()=>OneAIAnalyticsApiWrapperExample_stories});var react=__webpack_require__("./node_modules/react/index.js"),format=__webpack_require__("./node_modules/date-fns/esm/format/index.js"),commonConfigurations=__webpack_require__("./src/common/configurations/commonConfigurations.ts"),modalsUtils=__webpack_require__("./src/common/utils/modalsUtils.ts"),utils=__webpack_require__("./src/common/utils/utils.ts"),OneAiAnalytics=__webpack_require__("./src/components/OneAiAnalytics.tsx"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const cache=new Map,nodeToPageCache=new Map,OneAIAnalyticsApiWrapper=({domain="https://api.oneai.com",apiKey="",collection="",collectionName=collection,refreshToken="",...rest})=>{const[loading,setLoading]=(0,react.useState)(!0),[error,setError]=(0,react.useState)(null),[currentNodes,setCurrentNodes]=(0,react.useState)({totalItems:0,nodes:[]}),[clickedNodes,setClickedNodes]=(0,react.useState)([]),[currentPage,setCurrentPage]=(0,react.useState)(0),[totalPages,setTotalPages]=(0,react.useState)(0),[dateRange,setDateRange]=(0,react.useState)([null,null]),[labelsFilters,setLabelsFilters]=(0,react.useState)([]),[localRefreshToken,setLocalRefreshToken]=(0,react.useState)(refreshToken),[trendPeriods,setTrendPeriods]=(0,react.useState)(0),[propertiesFilters,setPropertiesFilters]=(0,react.useState)({hide:"true"}),[metaOptions,setMetaOptions]=(0,react.useState)([]),[currentMetaGroup,setCurrentMetaGroup]=(0,react.useState)("text"),[metaGroupClicked,setMetaGroupClicked]=(0,react.useState)(null),previousValues=(0,react.useRef)({domain:null,apiKey:null,collection:null,refreshToken:null,localRefreshToken:null,clickedNodes:null,currentPage:null,lastMetaGroup:"text"});(0,react.useEffect)((()=>{previousValues.current.domain===domain&&previousValues.current.apiKey===apiKey&&previousValues.current.collection===collection&&previousValues.current.refreshToken===refreshToken&&previousValues.current.localRefreshToken===localRefreshToken&&previousValues.current.lastMetaGroup===currentMetaGroup||(setCurrentNodes({totalItems:0,nodes:[]}),setClickedNodes([]),setCurrentPage(0),cache.clear(),previousValues.current={domain,apiKey,collection,refreshToken,localRefreshToken,clickedNodes:null,currentPage:null,lastMetaGroup:currentMetaGroup})}),[domain,apiKey,collection,refreshToken,localRefreshToken,currentMetaGroup]),(0,react.useEffect)((()=>{const fetchData=async controller=>{setLoading(!0);const currentClicked=clickedNodes.at(-1);if("text"===currentMetaGroup||currentClicked)if(currentClicked){if("Cluster"===currentClicked.type){const clusterId=currentClicked.data.cluster_id.toString(),cached=getNodesFromCache(currentClicked.type,clusterId,currentPage);if(cached)setTotalPages(cached.totalPages),setCurrentNodes({totalItems:cached.totalItems,nodes:cached.nodes});else{const phrases=await async function fetchPhrases(controller,domain,collection,clusterId,apiKey,page,from,to,labelsFilters,trendPeriods,propertiesFilters){return await fetchApi(controller,`${domain}/clustering/v1/collections/${collection}/clusters/${clusterId}/phrases`,apiKey,"phrases",page,from,to,labelsFilters,trendPeriods,propertiesFilters)}(controller,domain,collection,clusterId,apiKey,currentPage,dateRange[0],dateRange[1],[...labelsFilters,...metaGroupClicked?[metaGroupClicked]:[]],trendPeriods,propertiesFilters);if(phrases.error){if(phrases.error.includes("AbortError"))return;return setError(phrases.error),setLoading(!1)}setError(null);const newNodes=phrases.data.map((p=>({type:"Phrase",data:p})));clickedNodes.at(-1)==currentClicked&&(setCurrentNodes({totalItems:phrases.totalItems,nodes:newNodes}),setTotalPages(phrases.totalPages)),setNodesDataInCache(currentClicked.type,clusterId,currentPage,newNodes,phrases.totalPages,phrases.totalItems)}}else if("Phrase"===currentClicked.type){const phraseId=currentClicked.data.phrase_id.toString(),cached=getNodesFromCache(currentClicked.type,phraseId,currentPage);if(cached)setTotalPages(cached.totalPages),setCurrentNodes({totalItems:cached.totalItems,nodes:cached.nodes});else{const items=await async function fetchItems(controller,domain,collection,phraseId,apiKey,page,from,to,labelsFilters,trendPeriods,propertiesFilters){return await fetchApi(controller,`${domain}/clustering/v1/collections/${collection}/phrases/${phraseId}/items`,apiKey,"items",page,from,to,labelsFilters,trendPeriods,propertiesFilters)}(controller,domain,collection,phraseId,apiKey,currentPage,dateRange[0],dateRange[1],[...labelsFilters,...metaGroupClicked?[metaGroupClicked]:[]],trendPeriods,propertiesFilters);if(items.error){if(items.error.includes("AbortError"))return;return setError(items.error),setLoading(!1)}setError(null);const newNodes=items.data.map((i=>({type:"Item",data:i})));clickedNodes.at(-1)==currentClicked&&(setCurrentNodes({totalItems:items.totalItems,nodes:newNodes}),setTotalPages(items.totalPages)),setNodesDataInCache(currentClicked.type,phraseId,currentPage,newNodes,items.totalPages,items.totalItems)}}}else{const cached=getNodesFromCache(modalsUtils.Ii,collection,currentPage);if(cached)setTotalPages(cached.totalPages),setCurrentNodes({totalItems:cached.totalItems,nodes:cached.nodes});else{const clusters=await async function fetchClusters(controller,domain,collection,apiKey,page,from,to,labelsFilters,trendPeriods,propertiesFilters){return await fetchApi(controller,`${domain}/clustering/v1/collections/${collection}/clusters`,apiKey,"clusters",page,from,to,labelsFilters,trendPeriods,propertiesFilters)}(controller,domain,collection,apiKey,currentPage,dateRange[0],dateRange[1],[...labelsFilters,...metaGroupClicked?[metaGroupClicked]:[]],trendPeriods,propertiesFilters);if(clusters.error){if(clusters.error.includes("AbortError"))return;return setError(clusters.error),setLoading(!1)}setError(null);const newNodes=clusters.data.map((c=>({type:"Cluster",data:c})));clickedNodes.at(-1)==currentClicked&&(setCurrentNodes({totalItems:clusters.totalItems,nodes:newNodes}),setTotalPages(clusters.totalPages)),setNodesDataInCache("Collection",collection,currentPage,newNodes,clusters.totalPages,clusters.totalItems)}}else{const cached=getNodesFromCache(modalsUtils.Ii,collection+"_meta",currentPage);if(cached)setCurrentNodes({totalItems:cached.totalItems,nodes:cached.nodes}),setTotalPages(cached.totalPages);else{const metaClusters=await fetchMetaClustersApi(controller,domain,collection,apiKey,0,dateRange[0],dateRange[1],labelsFilters,trendPeriods,propertiesFilters,currentMetaGroup);if(metaClusters.error){if(metaClusters.error.includes("AbortError"))return;return setError(metaClusters.error),setLoading(!1)}setError(null);const newNodes=metaClusters.data.sort(((m1,m2)=>m2.items_count-m1.items_count)).map((c=>({type:"Meta",data:c}))),totalPages=Math.ceil(metaClusters.data.length/commonConfigurations.IV),totalItems=metaClusters.data.reduce(((prev,current)=>prev+current.items_count),0),slicedNodes=newNodes.slice(currentPage*commonConfigurations.IV,(currentPage+1)*commonConfigurations.IV);clickedNodes.at(-1)==currentClicked&&(setCurrentNodes({totalItems,nodes:slicedNodes}),setTotalPages(totalPages)),setNodesDataInCache("Collection",collection+"_meta",currentPage,slicedNodes,totalPages,totalItems)}}setLoading(!1)},controller=new AbortController;return previousValues.current.domain===domain&&previousValues.current.apiKey===apiKey&&previousValues.current.collection===collection&&previousValues.current.clickedNodes==clickedNodes&&previousValues.current.currentPage===currentPage&&previousValues.current.lastMetaGroup===currentMetaGroup||((async controller=>{const metaClusters=await fetchMetaClustersApi(controller,domain,collection,apiKey,0,dateRange[0],dateRange[1],labelsFilters,trendPeriods,propertiesFilters),newNodes=metaClusters?.data?.map((c=>({type:"Meta",data:c}))),mappedNodes=newNodes?.map((n=>n.data.meta_key))??[];setMetaOptions(mappedNodes)})(controller).catch((e=>{console.error(e)})),fetchData(controller).catch((e=>{console.error(e),setLoading(!1)})),previousValues.current={domain,apiKey,collection,clickedNodes,currentPage,refreshToken,localRefreshToken,lastMetaGroup:currentMetaGroup}),()=>{controller.abort()}}),[domain,collection,apiKey,clickedNodes,currentPage,currentMetaGroup]);return currentNodes?(0,jsx_runtime.jsx)(OneAiAnalytics.k,{dataNodes:currentNodes??{totalItems:0,nodes:[]},currentNode:clickedNodes.at(-1),nodeClicked:node=>{const currentNodeDetails=(0,modalsUtils.k8)(clickedNodes.at(-1),collection);if("text"!==currentMetaGroup)return setLocalRefreshToken((current=>{const[key,value]=node.id.split("$$");return setMetaGroupClicked({key,value}),setCurrentMetaGroup("text"),current.length>2?"1":current+"1"}));!function setNodePageNumberInCache(nodeType,nodeId,page){nodeToPageCache.set(assembleCacheId(nodeType,nodeId),page)}(currentNodeDetails.type,currentNodeDetails.id,currentPage);let clickedNode=null;if("Cluster"===node.type?clickedNode=currentNodes.nodes.find((n=>n.data.cluster_id.toString()===node.id))??null:"Phrase"===node.type&&(clickedNode=currentNodes.nodes.find((n=>n.data.phrase_id.toString()===node.id))??null),clickedNode){const nodeCachedPage=getNodePageNumberFromCache(clickedNode.type,(0,modalsUtils.lH)(clickedNode));setCurrentPage(nodeCachedPage),setClickedNodes((currentClickedCluster=>[...currentClickedCluster,clickedNode]))}},goBackClicked:(skip=1)=>{0!==skip?setClickedNodes((clickedClusters=>{const originalClickedAmount=clickedClusters.length;for(let i=0;i<skip;i++)clickedClusters.pop();const currentNodeDetails=(0,modalsUtils.k8)(clickedClusters.at(-1),collection),nodeCachedPage=getNodePageNumberFromCache(currentNodeDetails.type,currentNodeDetails.id);setCurrentPage(nodeCachedPage);const extraBackNodes=originalClickedAmount-skip;return extraBackNodes<0&&setLocalRefreshToken((current=>(-1===extraBackNodes?(setCurrentMetaGroup(metaGroupClicked?.key??"text"),setMetaGroupClicked(null)):(setMetaGroupClicked(null),setCurrentMetaGroup("text")),current.length>2?"1":current+"1"))),[...clickedClusters]})):"text"!==currentMetaGroup&&(setMetaGroupClicked(null),setCurrentMetaGroup("text"))},currentPage,totalPagesAmount:totalPages,nextPageClicked:()=>setCurrentPage((page=>page+1)),prevPageClicked:()=>setCurrentPage((page=>page-1)),loading,error,nodesPath:[{text:collectionName},...metaGroupClicked?[{text:metaGroupClicked.key},{text:metaGroupClicked.value??""}]:[],...clickedNodes.map((node=>{const{originalText,translatedText}=(0,modalsUtils.m9)(node);return{text:originalText??(0,modalsUtils.qg)(node),translated:translatedText}}))],dateRangeChanged:(from,to)=>setLocalRefreshToken((current=>(setDateRange([from,to]),current+"1"))),labelsFilters,labelClicked:(key,value)=>{labelsFilters.some((keyValue=>keyValue.key.toLowerCase()===key.toLowerCase()&&keyValue.value?.toLowerCase()===value.toLowerCase()))||setLocalRefreshToken((current=>(setLabelsFilters((labels=>[...labels,{key,value}])),current.length>2?"1":current+"1")))},labelFilterDeleted:i=>setLocalRefreshToken((current=>(setLabelsFilters((filters=>(filters.splice(i,1),[...filters]))),current.length>2?"1":current+"1"))),trendPeriods,trendPeriodsChanged:newTrendPeriod=>setLocalRefreshToken((current=>(setTrendPeriods(newTrendPeriod),current+"1"))),searchSimilarClusters:(text,controller)=>async function searchSimilarClusters(controller,domain,collection,apiKey,text){try{const res=await fetch(`${domain}/clustering/v1/collections/${collection}/clusters/find?text=${text}&translate=true`,{method:"GET",headers:{"Content-Type":"application/json","api-key":apiKey},signal:controller.signal});if(200!==res.status||!res.ok)return[];const clusters=await res.json();return clusters&&0!==clusters.length?clusters.sort(((c1,c2)=>c2.similarity-c1.similarity)).map((c=>({id:c.cluster_id,text:c.cluster_text,translation:c.item_translated_text}))):[]}catch(e){return console.error("error occurred ->",e),[]}}(controller,domain,collection,apiKey,text),splitPhrase:(phraseId,controller)=>async function splitPhrase(controller,domain,collection,apiKey,phraseId,setLocalRefreshToken){try{const res=await fetch(`${domain}/clustering/v1/collections/${collection}/phrases/${phraseId}/split`,{method:"POST",headers:{"Content-Type":"application/json","api-key":apiKey},signal:controller.signal});if(200!==res.status||!res.ok)return{status:"error",message:"unknown"};const json=await res.json();return json.message||setLocalRefreshToken((current=>current.length>5?"":current+"1")),json}catch(e){return console.error("error occurred ->",e),{status:"error",message:String(e)}}}(controller,domain,collection,apiKey,phraseId,setLocalRefreshToken),mergeClusters:(source,destination,controller)=>async function mergeClusters(controller,domain,collection,apiKey,source,destination,setLocalRefreshToken){try{const res=await fetch(`${domain}/clustering/v1/collections/${collection}/merge`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","api-key":apiKey},body:JSON.stringify({source_clusters:source,destination_cluster:destination}),signal:controller.signal});if(200!==res.status||!res.ok)return{status:"error",message:"unknown"};const json=await res.json();return json.message||setLocalRefreshToken((current=>current.length>5?"":current+"1")),json}catch(e){return console.error("error occurred ->",e),{status:"error",message:String(e)}}}(controller,domain,collection,apiKey,source,destination,setLocalRefreshToken),toggleHide:(node,hide)=>async function toggleHide(domain,collection,apiKey,node,hide,currentClickedNode,setLocalRefreshToken){if(!node)return;try{const clusterId="Cluster"===node.type?node.id:(0,modalsUtils.lH)(currentClickedNode),res=await fetch(`${domain}/clustering/v1/collections/${collection}/clusters/${clusterId}${"Phrase"===node.type?`/phrases/${node.id}`:""}/settings`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","api-key":apiKey},body:JSON.stringify({properties:{hide}})});if(200!==res.status||!res.ok)return;setLocalRefreshToken((current=>current.length>5?"":current+"1"))}catch(e){console.error("error occurred ->",e)}}(domain,collection,apiKey,node,hide,clickedNodes.at(-1),setLocalRefreshToken),propertiesFilters,setPropertiesFilters:properties=>setLocalRefreshToken((current=>(setPropertiesFilters(properties),current.length>2?"1":current+"1"))),metaOptions:["text",...(0,utils.mN)(metaOptions,(m=>m.toLowerCase()))],currentMetaOption:currentMetaGroup,metaOptionsChanged:metaOptions=>setCurrentMetaGroup(metaOptions),refresh:()=>setLocalRefreshToken((current=>current.length>2?"1":current+"1")),...rest}):null};async function fetchMetaClustersApi(controller,domain,collection,apiKey,page,from,to,labelsFilters,trendPeriods,propertiesFilters,metaGroup){return await fetchApi(controller,`${domain}/clustering/v1/collections/${collection}/metadata${metaGroup?`/${metaGroup}`:""}`,apiKey,"content",page,from,to,labelsFilters,trendPeriods,propertiesFilters,"&group-by-meta-value=true"+(metaGroup?"&include-metadata=true":""),1e3)}async function fetchApi(controller,url,apiKey,accessor,page,from,to,labelsFilters,trendPeriods,propertiesFilters,extraParams,limit){const labelsFiltersString=labelsFilters.map((metadataKeyValue=>metadataKeyValue.key&&metadataKeyValue.value?`${metadataKeyValue.key} eq '${metadataKeyValue.value}'`:"")).filter((str=>""!==str)),propertiesFiltersString=Object.keys(propertiesFilters).map((key=>{const value=propertiesFilters[key];return value?`${key} neq '${value}'`:""}));try{const res=await fetch(encodeURI(`${url}?page=${page}&limit=${void 0!==limit?limit:commonConfigurations.IV}&translate=true`+(from?`&from-date=${(0,format.Z)(from,"yyyy-MM-dd")}`:"")+(to?`&to-date=${(0,format.Z)(to,"yyyy-MM-dd")}`:"")+(labelsFiltersString.length>0?`&item-metadata=${labelsFiltersString.join(" and ")}`:"")+(trendPeriods>1?`&include-trends=true&trend-periods-limit=${trendPeriods}`:"")+(propertiesFiltersString.length>0?`&properties-query=${propertiesFiltersString.join(" and ")}`:"")+(extraParams||"")),{method:"GET",headers:{"Content-Type":"application/json","api-key":apiKey},signal:controller.signal});if(200!==res.status||!res.ok)return{totalPages:0,totalItems:0,data:[],error:"Error fetching data, status: "+res.status+": "+await res.text()};const json=await res.json();return{totalPages:json.total_pages,totalItems:json.total_items,data:json[accessor],error:null}}catch(e){const error=String(e);return console.error("error occurred ->",error),{totalPages:0,totalItems:0,data:[],error:`Error fetching data, ${error}`}}}function getNodesFromCache(parentType,parentId,page){const cached=cache.get(assembleCacheId(parentType,parentId,page));return cached&&(0,utils.zd)(cached.time,new Date)<90?cached:null}function setNodesDataInCache(parentType,parentId,page,nodes,totalPages,totalItems){cache.set(assembleCacheId(parentType,parentId,page),{nodes,totalPages,time:new Date,totalItems})}function getNodePageNumberFromCache(nodeType,nodeId){const cached=nodeToPageCache.get(assembleCacheId(nodeType,nodeId));return cached||0}function assembleCacheId(type,id,page=0){return`${type}-${id}-${page}`}try{OneAIAnalyticsApiWrapper.displayName="OneAIAnalyticsApiWrapper",OneAIAnalyticsApiWrapper.__docgenInfo={description:"One AI Analytics api wrapper component",displayName:"OneAIAnalyticsApiWrapper",props:{domain:{defaultValue:{value:"https://api.oneai.com"},description:"",name:"domain",required:!1,type:{name:"string"}},apiKey:{defaultValue:{value:""},description:"",name:"apiKey",required:!1,type:{name:"string"}},collection:{defaultValue:{value:""},description:"",name:"collection",required:!1,type:{name:"string"}},darkMode:{defaultValue:null,description:"",name:"darkMode",required:!1,type:{name:"boolean"}},currentNode:{defaultValue:null,description:"",name:"currentNode",required:!1,type:{name:"OneAIDataNode"}},nodeClicked:{defaultValue:null,description:"",name:"nodeClicked",required:!1,type:{name:'((node: Omit<OneAIDataNode & { id: string; }, "data">) => void)'}},goBackClicked:{defaultValue:null,description:"",name:"goBackClicked",required:!1,type:{name:"((skip: number) => void)"}},nextPageClicked:{defaultValue:null,description:"",name:"nextPageClicked",required:!1,type:{name:"(() => void)"}},prevPageClicked:{defaultValue:null,description:"",name:"prevPageClicked",required:!1,type:{name:"(() => void)"}},background:{defaultValue:null,description:"",name:"background",required:!1,type:{name:"string"}},treemapBigColor:{defaultValue:null,description:"",name:"treemapBigColor",required:!1,type:{name:"string"}},treemapSmallColor:{defaultValue:null,description:"",name:"treemapSmallColor",required:!1,type:{name:"string"}},treemapCountFontSize:{defaultValue:null,description:"",name:"treemapCountFontSize",required:!1,type:{name:"number"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"string"}},textColor:{defaultValue:null,description:"",name:"textColor",required:!1,type:{name:"string"}},treemapBorderWidth:{defaultValue:null,description:"",name:"treemapBorderWidth",required:!1,type:{name:"number"}},treemapBorderColor:{defaultValue:null,description:"",name:"treemapBorderColor",required:!1,type:{name:"string"}},navbarColor:{defaultValue:null,description:"",name:"navbarColor",required:!1,type:{name:"string"}},barColor:{defaultValue:null,description:"",name:"barColor",required:!1,type:{name:"string"}},itemsDisplay:{defaultValue:null,description:"",name:"itemsDisplay",required:!1,type:{name:"FC<ItemsDisplayComponentProps>"}},loading:{defaultValue:null,description:"",name:"loading",required:!1,type:{name:"boolean"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"string | null"}},nodesPath:{defaultValue:null,description:"",name:"nodesPath",required:!1,type:{name:"{ text: string; translated?: string | null; }[]"}},dateRangeChanged:{defaultValue:null,description:"",name:"dateRangeChanged",required:!1,type:{name:"((from: Date | null, to: Date | null) => void)"}},labelsFilters:{defaultValue:null,description:"",name:"labelsFilters",required:!1,type:{name:"MetadataKeyValue[]"}},labelClicked:{defaultValue:null,description:"",name:"labelClicked",required:!1,type:{name:"((key: string, value: string) => void)"}},labelFilterDeleted:{defaultValue:null,description:"",name:"labelFilterDeleted",required:!1,type:{name:"((index: number) => void)"}},trendPeriods:{defaultValue:null,description:"",name:"trendPeriods",required:!1,type:{name:"number"}},trendPeriodsChanged:{defaultValue:null,description:"",name:"trendPeriodsChanged",required:!1,type:{name:"((index: number) => void)"}},searchSimilarClusters:{defaultValue:null,description:"",name:"searchSimilarClusters",required:!1,type:{name:"((text: string, controller: AbortController) => Promise<{ id: string; text: string; translation: string | null; }[]>)"}},splitPhrase:{defaultValue:null,description:"",name:"splitPhrase",required:!1,type:{name:'((phraseId: string, controller: AbortController) => Promise<{ status: "error" | "Success"; message: string; }>)'}},mergeClusters:{defaultValue:null,description:"",name:"mergeClusters",required:!1,type:{name:'((source: string[], destination: string, controller: AbortController) => Promise<{ status: "error" | "Success"; message: string; }>)'}},translationEnabled:{defaultValue:null,description:"",name:"translationEnabled",required:!1,type:{name:"boolean"}},toggleHide:{defaultValue:null,description:"",name:"toggleHide",required:!1,type:{name:"((node: { type: NodeType; id: string; text: string; properties: Properties; } | null, hide: string) => void)"}},propertiesFilters:{defaultValue:null,description:"",name:"propertiesFilters",required:!1,type:{name:"Properties"}},setPropertiesFilters:{defaultValue:null,description:"",name:"setPropertiesFilters",required:!1,type:{name:"((properties: Properties) => void)"}},metaOptions:{defaultValue:null,description:"",name:"metaOptions",required:!1,type:{name:"string[]"}},currentMetaOption:{defaultValue:null,description:"",name:"currentMetaOption",required:!1,type:{name:"string"}},metaOptionsChanged:{defaultValue:null,description:"",name:"metaOptionsChanged",required:!1,type:{name:"((option: string) => void)"}},refresh:{defaultValue:null,description:"",name:"refresh",required:!1,type:{name:"(() => void)"}},collectionName:{defaultValue:{value:""},description:"",name:"collectionName",required:!1,type:{name:"string"}},refreshToken:{defaultValue:{value:""},description:"",name:"refreshToken",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/wrappers/OneAIAnalyticsApiWrapper.tsx#OneAIAnalyticsApiWrapper"]={docgenInfo:OneAIAnalyticsApiWrapper.__docgenInfo,name:"OneAIAnalyticsApiWrapper",path:"src/wrappers/OneAIAnalyticsApiWrapper.tsx#OneAIAnalyticsApiWrapper"})}catch(__react_docgen_typescript_loader_error){}const OneAIAnalyticsApiWrapperExample_stories={title:"One AI Analytics api wrapper",component:OneAIAnalyticsApiWrapper,parameters:{controls:{expanded:!0}}},Template=args=>(0,jsx_runtime.jsx)("div",{className:"h-screen w-full",children:(0,jsx_runtime.jsx)(OneAIAnalyticsApiWrapper,{...args})});Template.displayName="Template";const OneAIAnalyticsApiWrapperStory=Template.bind({}),__namedExportsOrder=["OneAIAnalyticsApiWrapperStory"];OneAIAnalyticsApiWrapperStory.parameters={...OneAIAnalyticsApiWrapperStory.parameters,docs:{...OneAIAnalyticsApiWrapperStory.parameters?.docs,source:{originalSource:'args => /*#__PURE__*/_jsx("div", {\n  className: "h-screen w-full",\n  children: /*#__PURE__*/_jsx(OneAIAnalyticsApiWrapper, {\n    ...args\n  })\n})',...OneAIAnalyticsApiWrapperStory.parameters?.docs?.source}}}}}]);