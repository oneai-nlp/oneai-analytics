{"version":3,"file":"oneai-analytics.cjs.production.min.js","sources":["../src/common/utils/utils.ts","../node_modules/style-inject/dist/style-inject.es.js","../src/common/utils/countersUtils.ts","../src/common/configurations/calculationsConfigurations.ts","../src/common/configurations/commonConfigurations.ts","../src/common/utils/modalsUtils.ts","../src/common/components/CountersLabels/LabelDisplay.tsx","../src/common/components/CountersLabels/LabelsFiltersSelect.tsx","../src/common/components/CountersLabels/SingleSelect.tsx","../src/common/utils/displayUtils.ts","../src/common/components/CountersLabels/CounterDisplay.tsx","../src/common/components/CountersLabels/MaxLabelDisplay.tsx","../src/common/components/CountersLabelsDisplay.tsx","../src/common/components/CountersLabels/DropdownOption.tsx","../src/common/components/CountersLabels/KeyValueSingleSelect.tsx","../src/common/components/CustomizeTab/Counters.tsx","../src/common/components/CustomizeTab/Labels.tsx","../src/common/components/CustomizeTab.tsx","../src/common/components/CustomizeTab/Datepicker.tsx","../src/common/components/DatesFilters.tsx","../src/common/components/ItemActions.tsx","../src/common/configurations/countersConfigurations.tsx","../src/common/components/CountersLabels/ColorsAxis.tsx","../src/components/BarChart.tsx","../src/components/ItemsListDisplay.tsx","../src/components/Treemap.tsx","../src/components/OneAiAnalytics.tsx","../src/wrappers/OneAIAnalyticsApiWrapper.tsx","../src/wrappers/OneAIAnalyticsStaticDataWrapper.tsx","../src/common/components/UploadCSVComponents/constants.ts","../src/common/components/UploadCSVComponents/SingleSelect.tsx","../src/components/OneAiUpload.tsx"],"sourcesContent":["export function calculateFontSize(height: number, width: number) {\r\n  const area = height * width;\r\n  let fontSize = 10 + (32 * area) / (250000 - 15000);\r\n  fontSize = Math.max(fontSize, 10);\r\n  fontSize = Math.min(fontSize, 60);\r\n  return fontSize;\r\n}\r\n\r\nexport function groupBy<T, K extends keyof any>(\r\n  arr: T[],\r\n  key: (i: T) => K\r\n): Map<K, T[]> {\r\n  const map: Map<K, T[]> = new Map();\r\n  arr.forEach((item) => {\r\n    const currentKey = key(item);\r\n    const savedCluster = map.get(currentKey) || [];\r\n    savedCluster.push(item);\r\n    map.set(currentKey, savedCluster);\r\n  });\r\n\r\n  return map;\r\n}\r\n\r\nexport function chunks<T>(arr: T[], size: number): Array<T[]> {\r\n  return Array.from(new Array(Math.ceil(arr.length / size)), (_, i) =>\r\n    arr.slice(i * size, i * size + size)\r\n  );\r\n}\r\n\r\nexport function getSecondsDiff(startDate: Date, endDate: Date) {\r\n  const diff = endDate.getTime() - startDate.getTime();\r\n\r\n  return Math.abs(diff / 1000);\r\n}\r\n\r\nexport function sum(numbers: number[]): number {\r\n  return numbers.reduce((partialSum, a) => partialSum + a, 0);\r\n}\r\n\r\nexport function uniqBy<T, K>(arr: T[], getKey: (item: T) => K) {\r\n  let seen = new Set<K>();\r\n  return arr.filter((item) => {\r\n    let k = getKey(item);\r\n    return seen.has(k) ? false : seen.add(k);\r\n  });\r\n}\r\n\r\nexport function toLowerKeys(obj: { [key: string]: {} }) {\r\n  return Object.keys(obj).reduce((accumulator, key) => {\r\n    accumulator[key.toLowerCase()] = obj[key];\r\n    return accumulator;\r\n  }, {} as { [key: string]: {} });\r\n}\r\n\r\nexport function percentageIncrease(previous: number, current: number): number {\r\n  let percent;\r\n  if (current !== 0) {\r\n    if (previous !== 0) {\r\n      percent = ((current - previous) / previous) * 100;\r\n    } else {\r\n      percent = current * 100;\r\n    }\r\n  } else {\r\n    percent = -previous * 100;\r\n  }\r\n\r\n  return Math.floor(percent);\r\n}\r\n\r\nexport const numberToFixed = (num: number) =>\r\n  Math.round((num + Number.EPSILON) * 100) / 100;\r\n\r\nexport const customNumberToFixed = (num: number): number => {\r\n  const str = Math.abs(num).toString();\r\n  const [integer, _] = str.split('.');\r\n  if (integer.length < 3) {\r\n    return numberToFixed(parseFloat(num.toFixed(2)));\r\n  } else if (integer.length < 4) {\r\n    return numberToFixed(parseFloat(num.toFixed(1)));\r\n  } else {\r\n    return parseFloat(num.toFixed(0));\r\n  }\r\n};\r\n\r\nexport function getNumberDescription(numIn: number, decPlaces: number): string {\r\n  const num = customNumberToFixed(numIn);\r\n  const prefix = num < 0 ? '-' : '';\r\n  // 2 decimal places => 100, 3 => 1000, etc\r\n  decPlaces = Math.pow(10, decPlaces);\r\n\r\n  // Enumerate num abbreviations\r\n  let abbrev = ['k', 'm', 'b', 't'];\r\n\r\n  let strResult: string = num.toString();\r\n  let result: number = Math.abs(num);\r\n\r\n  // Go through the array backwards, so we do the largest first\r\n  for (let i = abbrev.length - 1; i >= 0; i--) {\r\n    // Convert array index to \"1000\", \"1000000\", etc\r\n    let size = Math.pow(10, (i + 1) * 3);\r\n\r\n    // If the num is bigger or equal do the abbreviation\r\n    if (size <= result) {\r\n      // Here, we multiply by decPlaces, round, and then divide by decPlaces.\r\n      // This gives us nice rounding to a particular decimal place.\r\n      result = Math.round((result * decPlaces) / size) / decPlaces;\r\n\r\n      // Handle special case where we round up to the next abbreviation\r\n      if (result == 1000 && i < abbrev.length - 1) {\r\n        result = 1;\r\n        i++;\r\n      }\r\n\r\n      // Add the letter for the abbreviation\r\n      strResult = result.toString() + abbrev[i];\r\n\r\n      // We are done... stop\r\n      break;\r\n    }\r\n  }\r\n\r\n  return prefix + strResult;\r\n}\r\n\r\nexport const objectToLowerCase = <T>(obj: Record<string, T>) => {\r\n  const entries = Object.entries(obj);\r\n\r\n  return Object.fromEntries(\r\n    entries.map(([key, value]) => {\r\n      return [key.toLowerCase(), value];\r\n    })\r\n  );\r\n};\r\n\r\nexport const extractShtrudelSuffix = (str: string): string => {\r\n  const index = str.lastIndexOf('@');\r\n  return index >= 0 ? str.substring(0, index) : str;\r\n};\r\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { CUSTOM_METADATA_KEY } from '../configurations/commonConfigurations';\r\nimport {\r\n  CounterConfiguration,\r\n  CountersConfigurations,\r\n  GroupMembers,\r\n  MetadataKeyValue,\r\n} from '../types/customizeBarTypes';\r\nimport { MetaData, Trend } from '../types/modals';\r\nimport {\r\n  objectToLowerCase,\r\n  percentageIncrease,\r\n  sum,\r\n  toLowerKeys,\r\n} from './utils';\r\n\r\nexport function topGroupPercentCalculation(\r\n  metadataKeyValue: MetadataKeyValue | null,\r\n  metadata: MetaData,\r\n  _: Trend[],\r\n  countersConfigurations: CountersConfigurations,\r\n  __: number\r\n) {\r\n  const counter = getMetadataKeyValueConfiguration(\r\n    metadataKeyValue,\r\n    countersConfigurations\r\n  );\r\n  const groups = getCounterGroups(counter);\r\n  if (!counter || groups.length === 0) return { counter: counter, result: 0 };\r\n\r\n  const sums = groups.map((group) =>\r\n    calculateSumItemsInMetadata(group.members, [], metadata)\r\n  );\r\n  const max = Math.max(...sums);\r\n  const maxGroup = groups[sums.indexOf(max)];\r\n  const groupsSum = sum(sums);\r\n  return {\r\n    result: groupsSum === 0 ? 0 : (max / groupsSum) * 100,\r\n    counter: max > 0 ? maxGroup ?? counter : counter,\r\n    metadataKey: maxGroup.label,\r\n    value: undefined,\r\n  };\r\n}\r\n\r\nexport function groupsPercentsCalculation(\r\n  label: string,\r\n  metadata: MetaData,\r\n  _: Trend[],\r\n  countersConfigurations: CountersConfigurations,\r\n  __: number\r\n): {\r\n  result?: number;\r\n  counter?: CounterConfiguration;\r\n  metadataKey?: string;\r\n  value?: string;\r\n}[] {\r\n  const counter = getMetadataKeyValueConfiguration(\r\n    { key: label },\r\n    countersConfigurations\r\n  );\r\n  const groups = getCounterGroups(counter);\r\n  if (!counter || groups.length === 0) return [];\r\n\r\n  const sums = groups.map((group) => {\r\n    return {\r\n      group: group,\r\n      result: calculateSumItemsInMetadata(group.members, [], metadata),\r\n    };\r\n  });\r\n  const groupsSum = sum(sums.map((g) => g.result));\r\n  if (groupsSum === 0) return [];\r\n\r\n  return sums.map((groupSum) => {\r\n    return {\r\n      result: (groupSum.result / groupsSum) * 100,\r\n      counter: groupSum.group ?? counter,\r\n      metadataKey: groupSum.group.label,\r\n      value: undefined,\r\n    };\r\n  });\r\n}\r\n\r\nexport function topGroupCalculation(\r\n  metadataKeyValue: MetadataKeyValue | null,\r\n  metadata: MetaData,\r\n  _: Trend[],\r\n  countersConfigurations: CountersConfigurations,\r\n  __: number\r\n) {\r\n  const counter = getMetadataKeyValueConfiguration(\r\n    metadataKeyValue,\r\n    countersConfigurations\r\n  );\r\n  const groups = getCounterGroups(counter);\r\n  if (groups.length === 0)\r\n    return {\r\n      counter: counter,\r\n      result: 0,\r\n    };\r\n  const sums = groups.map((group) =>\r\n    calculateSumItemsInMetadata(group.members, [], metadata)\r\n  );\r\n  const max = Math.max(...sums);\r\n  const maxGroup = groups[sums.indexOf(max)];\r\n  return {\r\n    result: max,\r\n    counter: max > 0 ? maxGroup ?? counter : counter,\r\n    metadataKey: maxGroup.label,\r\n    value: undefined,\r\n  };\r\n}\r\n\r\nexport function topValuePercentCalculation(\r\n  metadataKeyValue: MetadataKeyValue | null,\r\n  metadata: MetaData,\r\n  _: Trend[],\r\n  countersConfigurations: CountersConfigurations,\r\n  __: number\r\n) {\r\n  const counter = getMetadataKeyValueConfiguration(\r\n    metadataKeyValue,\r\n    countersConfigurations\r\n  );\r\n  if (!counter) return { counter: counter, result: 0 };\r\n\r\n  const max = getMaxItemValue(counter.members, counter.items, metadata);\r\n  const sum = calculateSumItemsInMetadata(\r\n    counter.members,\r\n    counter.items,\r\n    metadata\r\n  );\r\n\r\n  return {\r\n    result: sum === 0 ? 0 : (max.count / sum) * 100,\r\n    counter:\r\n      getItemCounterConfiguration(\r\n        max.metadata,\r\n        max.value,\r\n        countersConfigurations\r\n      ) ?? counter,\r\n    metadataKey: max.metadata,\r\n    value: max.value,\r\n  };\r\n}\r\n\r\nexport function topValueCalculation(\r\n  metadataKeyValue: MetadataKeyValue | null,\r\n  metadata: MetaData,\r\n  _: Trend[],\r\n  countersConfigurations: CountersConfigurations,\r\n  __: number\r\n) {\r\n  const counter = getMetadataKeyValueConfiguration(\r\n    metadataKeyValue,\r\n    countersConfigurations\r\n  );\r\n  if (!counter) return { counter: counter, result: 0 };\r\n\r\n  const maxItem = getMaxItemValue(counter.members, counter.items, metadata);\r\n\r\n  return {\r\n    result: maxItem.count,\r\n    counter:\r\n      getItemCounterConfiguration(\r\n        maxItem.metadata,\r\n        maxItem.value,\r\n        countersConfigurations\r\n      ) ?? counter,\r\n    metadataKey: maxItem.metadata,\r\n    value: maxItem.value,\r\n  };\r\n}\r\n\r\nexport function totalSumCalculation(\r\n  metadataKeyValue: MetadataKeyValue | null,\r\n  metadata: MetaData,\r\n  _: Trend[],\r\n  countersConfigurations: CountersConfigurations,\r\n  __: number\r\n): {\r\n  counter: CounterConfiguration | null;\r\n  metadata?: string | undefined;\r\n  value?: string | undefined;\r\n  result: number;\r\n} {\r\n  const counter = getMetadataKeyValueConfiguration(\r\n    metadataKeyValue,\r\n    countersConfigurations\r\n  );\r\n  if (!counter) return { counter: counter, result: 0 };\r\n  return {\r\n    result: calculateSumItemsInMetadata(\r\n      counter.members,\r\n      counter.items,\r\n      metadata\r\n    ),\r\n    counter: counter,\r\n  };\r\n}\r\n\r\nexport function percentOfItemsCalculation(\r\n  metadataKeyValue: MetadataKeyValue | null,\r\n  metadata: MetaData,\r\n  _: Trend[],\r\n  countersConfigurations: CountersConfigurations,\r\n  __: number\r\n) {\r\n  if (!metadataKeyValue) return { counter: null, result: 0 };\r\n  const itemCounter = getMetadataKeyValueConfiguration(\r\n    metadataKeyValue,\r\n    countersConfigurations\r\n  );\r\n\r\n  const keyCounter = getMetadataKeyValueConfiguration(\r\n    { key: metadataKeyValue.key },\r\n    countersConfigurations\r\n  );\r\n\r\n  if (!itemCounter || !keyCounter) return { counter: null, result: 0 };\r\n\r\n  const itemCount = calculateSumItemsInMetadata(\r\n    itemCounter.members,\r\n    itemCounter.items,\r\n    metadata\r\n  );\r\n\r\n  const keyCount = calculateSumItemsInMetadata(\r\n    keyCounter.members,\r\n    keyCounter.items,\r\n    metadata\r\n  );\r\n\r\n  return {\r\n    result: keyCount === 0 ? 0 : (itemCount / keyCount) * 100,\r\n    counter: itemCounter ?? keyCounter,\r\n    metadataKey: metadataKeyValue.key,\r\n    value: metadataKeyValue.value,\r\n  };\r\n}\r\n\r\nexport function percentOfAllItemsCalculation(\r\n  metadataKeyValue: MetadataKeyValue | null,\r\n  metadata: MetaData,\r\n  _: Trend[],\r\n  countersConfigurations: CountersConfigurations,\r\n  totalItems: number\r\n) {\r\n  if (!metadataKeyValue) return { counter: null, result: 0 };\r\n  const itemCounter = getMetadataKeyValueConfiguration(\r\n    metadataKeyValue,\r\n    countersConfigurations\r\n  );\r\n\r\n  const keyCounter = getMetadataKeyValueConfiguration(\r\n    { key: CUSTOM_METADATA_KEY },\r\n    countersConfigurations\r\n  );\r\n\r\n  if (!itemCounter || !keyCounter) return { counter: null, result: 0 };\r\n\r\n  const itemCount = calculateSumItemsInMetadata(\r\n    itemCounter.members,\r\n    itemCounter.items,\r\n    metadata\r\n  );\r\n\r\n  const keyCount = calculateSumItemsInMetadata(\r\n    keyCounter.members,\r\n    keyCounter.items,\r\n    metadata\r\n  );\r\n\r\n  let result;\r\n  if (metadataKeyValue.key === CUSTOM_METADATA_KEY) {\r\n    result = totalItems === 0 ? 0 : (itemCount / totalItems) * 100;\r\n  } else {\r\n    result = keyCount === 0 ? 0 : (itemCount / keyCount) * 100;\r\n  }\r\n  return {\r\n    result: result,\r\n    counter: itemCounter ?? keyCounter,\r\n    metadataKey: metadataKeyValue.key,\r\n    value: metadataKeyValue.value,\r\n  };\r\n}\r\n\r\nexport function trendCalculation(\r\n  metadataKeyValue: MetadataKeyValue | null,\r\n  _: MetaData,\r\n  trends: Trend[],\r\n  countersConfigurations: CountersConfigurations\r\n) {\r\n  if (!metadataKeyValue || trends.length < 2)\r\n    return { counter: null, result: 0 };\r\n  const itemCounter = getMetadataKeyValueConfiguration(\r\n    metadataKeyValue,\r\n    countersConfigurations\r\n  );\r\n\r\n  const keyCounter = getMetadataKeyValueConfiguration(\r\n    { key: metadataKeyValue.key },\r\n    countersConfigurations\r\n  );\r\n\r\n  if (!itemCounter || !keyCounter) return { counter: null, result: 0 };\r\n\r\n  const trendsCounts = trends.map((trend) =>\r\n    calculateSumItemsInMetadata(\r\n      itemCounter.members,\r\n      itemCounter.items,\r\n      trend.metadata\r\n    )\r\n  );\r\n  const latestTrend = trendsCounts.at(0) ?? 0;\r\n  const previousTrendsSum = sum(trendsCounts.slice(1, trendsCounts.length));\r\n  const previousTrendsMean =\r\n    previousTrendsSum > 0 ? previousTrendsSum / trendsCounts.length - 1 : 0;\r\n  const trend = percentageIncrease(previousTrendsMean, latestTrend);\r\n\r\n  return {\r\n    result: trend,\r\n    counter: itemCounter ?? keyCounter,\r\n    metadataKey: metadataKeyValue.key,\r\n    value: metadataKeyValue.value,\r\n  };\r\n}\r\n\r\nexport function getMetadataKeyValueGroups(\r\n  metadataKeyValue: MetadataKeyValue | null,\r\n  countersConfigurations: CountersConfigurations\r\n): CounterConfiguration[] {\r\n  const counter = getMetadataKeyValueConfiguration(\r\n    metadataKeyValue,\r\n    countersConfigurations\r\n  );\r\n\r\n  return getCounterGroups(counter);\r\n}\r\n\r\nfunction getCounterGroups(\r\n  counter: CounterConfiguration | null\r\n): CounterConfiguration[] {\r\n  if (!counter) return [];\r\n\r\n  return counter.items?.filter((group) => group.isGroup ?? false) ?? [];\r\n}\r\n\r\nexport function hasMultipleMembers(\r\n  metadataKeyValue: MetadataKeyValue | null,\r\n  countersConfigurations: CountersConfigurations\r\n): boolean {\r\n  const counter = getMetadataKeyValueConfiguration(\r\n    metadataKeyValue,\r\n    countersConfigurations\r\n  );\r\n  if (!counter) return false;\r\n  if (counter.isGroup) return true;\r\n  let sum = 0;\r\n  counter.members?.forEach((member) => (sum += member.values?.length ?? 2));\r\n  return sum > 1;\r\n}\r\n\r\nexport function getMetadataKeyValueConfiguration(\r\n  metadataKeyValue: MetadataKeyValue | null,\r\n  countersConfigurations: CountersConfigurations\r\n): CounterConfiguration | null {\r\n  if (!metadataKeyValue) return null;\r\n  const keyConfig = objectToLowerCase(countersConfigurations)[\r\n    metadataKeyValue.key.toLowerCase()\r\n  ];\r\n  if (!keyConfig) return null;\r\n  if (!metadataKeyValue.value) return keyConfig;\r\n  const memberConfig = keyConfig.items?.find(\r\n    (group) =>\r\n      group.label?.toLowerCase() === metadataKeyValue.value?.toLowerCase()\r\n  );\r\n  if (!memberConfig || !memberConfig.display) return keyConfig;\r\n  return memberConfig;\r\n}\r\n\r\nexport function calculateSumItemsInMetadata(\r\n  members: GroupMembers[] | undefined,\r\n  groups: CounterConfiguration[] | undefined,\r\n  metadata: MetaData\r\n): number {\r\n  const items = getValuesAndCounts(members, groups, metadata);\r\n  return sum(items.map(({ count }) => count));\r\n}\r\n\r\nexport function getMaxItemValue(\r\n  members: GroupMembers[] | undefined,\r\n  groups: CounterConfiguration[] | undefined,\r\n  metadata: MetaData\r\n): { metadata?: string; value?: string; count: number } {\r\n  const items = getValuesAndCounts(members, groups, metadata);\r\n  if (items.length === 0) return { count: 0 };\r\n\r\n  return items.reduce((prev, current) =>\r\n    prev.count > current.count ? prev : current\r\n  );\r\n}\r\n\r\nfunction getValuesAndCounts(\r\n  members: GroupMembers[] | undefined,\r\n  groups: CounterConfiguration[] | undefined,\r\n  metadata: MetaData\r\n): { metadata?: string; value: string; count: number }[] {\r\n  const lowerKeysMetadata = toLowerKeys(metadata) as MetaData;\r\n  const membersData = filterRelevantValues(members, lowerKeysMetadata);\r\n\r\n  if (membersData.length > 0) return membersData;\r\n\r\n  return filterRelevantValues(\r\n    groups?.flatMap((group) => group.members ?? []) ?? [],\r\n    lowerKeysMetadata\r\n  );\r\n}\r\n\r\nfunction filterRelevantValues(\r\n  members: GroupMembers[] | undefined,\r\n  metadata: MetaData\r\n): { metadata?: string; value: string; count: number }[] {\r\n  return (\r\n    members?.flatMap((member) => {\r\n      const values = metadata[member.metadataName ?? ''];\r\n      if (!values) return [];\r\n\r\n      return (\r\n        member.values === undefined\r\n          ? values\r\n          : values.filter((k) => member.values?.includes(k.value))\r\n      ).map(({ value, count }) => {\r\n        return { metadata: member.metadataName, value: value, count: count };\r\n      });\r\n    }) ?? []\r\n  );\r\n}\r\n\r\nexport function getItemCounterConfiguration(\r\n  metadata: string | undefined,\r\n  value: string | undefined,\r\n  countersConfigurations: CountersConfigurations\r\n): CounterConfiguration | null {\r\n  if (!metadata || !value) return null;\r\n  const counterConfig = countersConfigurations[metadata];\r\n  const valueCounterConfig = counterConfig.items?.find(\r\n    (group) => group.label === value\r\n  );\r\n  if (!valueCounterConfig || !valueCounterConfig.display) return null;\r\n  return valueCounterConfig;\r\n}\r\n","import { CalculationConfiguration } from '../types/customizeBarTypes';\r\nimport {\r\n  percentOfAllItemsCalculation,\r\n  percentOfItemsCalculation,\r\n  topGroupCalculation,\r\n  topGroupPercentCalculation,\r\n  topValueCalculation,\r\n  topValuePercentCalculation,\r\n  totalSumCalculation,\r\n  trendCalculation,\r\n} from '../utils/countersUtils';\r\n\r\nexport const totalSumCalculationName = 'Total SUM';\r\nexport const topValueCalculationName = 'Top value total sum';\r\nexport const topValuePercentCalculationName = 'Top value %';\r\nexport const topGroupCalculationName = 'Top group total';\r\nexport const topGroupPercentCalculationName = 'Top group %';\r\nexport const percentOfItemsCalculationName = '% of items';\r\nexport const percentOfAllCalculationName = '% of all items';\r\nexport const trendCalculationName = 'trend';\r\n\r\nexport const totalSumCalculationConfiguration: CalculationConfiguration = {\r\n  name: totalSumCalculationName,\r\n  hasGroups: false,\r\n  hasMultipleMembers: false,\r\n  type: 'number',\r\n  calculate: totalSumCalculation,\r\n};\r\n\r\nexport const topValueCalculationConfiguration: CalculationConfiguration = {\r\n  name: topValueCalculationName,\r\n  hasGroups: false,\r\n  hasMultipleMembers: true,\r\n  type: 'number',\r\n  calculate: topValueCalculation,\r\n};\r\n\r\nexport const topValuePercentCalculationConfiguration: CalculationConfiguration =\r\n  {\r\n    name: topValuePercentCalculationName,\r\n    hasGroups: false,\r\n    hasMultipleMembers: true,\r\n    type: 'percentage',\r\n    calculate: topValuePercentCalculation,\r\n  };\r\n\r\nexport const topGroupCalculationConfiguration: CalculationConfiguration = {\r\n  name: topGroupCalculationName,\r\n  hasGroups: true,\r\n  hasMultipleMembers: false,\r\n  type: 'number',\r\n  calculate: topGroupCalculation,\r\n};\r\n\r\nexport const topGroupPercentCalculationConfiguration: CalculationConfiguration =\r\n  {\r\n    name: topGroupPercentCalculationName,\r\n    hasGroups: true,\r\n    hasMultipleMembers: false,\r\n    type: 'percentage',\r\n    calculate: topGroupPercentCalculation,\r\n  };\r\n\r\nexport const percentOfItemsCalculationConfiguration: CalculationConfiguration =\r\n  {\r\n    name: percentOfItemsCalculationName,\r\n    hasGroups: false,\r\n    hasMultipleMembers: false,\r\n    type: 'percentage',\r\n    calculate: percentOfItemsCalculation,\r\n  };\r\n\r\nexport const percentOfAllItemsCalculationConfiguration: CalculationConfiguration =\r\n  {\r\n    name: percentOfAllCalculationName,\r\n    hasGroups: false,\r\n    hasMultipleMembers: false,\r\n    type: 'percentage',\r\n    calculate: percentOfAllItemsCalculation,\r\n  };\r\n\r\nexport const trendCalculationConfiguration: CalculationConfiguration = {\r\n  name: trendCalculationName,\r\n  hasGroups: false,\r\n  hasMultipleMembers: false,\r\n  type: 'trend',\r\n  calculate: trendCalculation,\r\n};\r\n","import {\r\n  percentOfAllItemsCalculationConfiguration,\r\n  percentOfItemsCalculationConfiguration,\r\n  topGroupCalculationConfiguration,\r\n  topGroupPercentCalculationConfiguration,\r\n  topValueCalculationConfiguration,\r\n  topValuePercentCalculationConfiguration,\r\n  totalSumCalculationConfiguration,\r\n  trendCalculationConfiguration,\r\n} from './calculationsConfigurations';\r\n\r\nexport const CUSTOM_METADATA_KEY = 'item count';\r\nexport const countersStorageKey = 'oneAi-counters';\r\nexport const labelsStorageKey = 'oneAi-labels';\r\nexport const sizeAxisStorageKey = 'oneAi-sizeAxis';\r\nexport const colorAxisStorageKey = 'oneAi-colorAxis';\r\nexport const defaultCalculations = [\r\n  totalSumCalculationConfiguration,\r\n  topValueCalculationConfiguration,\r\n  topValuePercentCalculationConfiguration,\r\n  topGroupCalculationConfiguration,\r\n  topGroupPercentCalculationConfiguration,\r\n  percentOfItemsCalculationConfiguration,\r\n  percentOfAllItemsCalculationConfiguration,\r\n  trendCalculationConfiguration,\r\n];\r\nexport const PAGE_SIZE = 25;\r\n","import { OneAIDataNode } from '../types/componentsInputs';\r\nimport { Cluster, Item, MetaCluster, Phrase, Trend } from '../types/modals';\r\n\r\nexport const COLLECTION_TYPE = 'Collection';\r\n\r\nexport function getNodeText(node: OneAIDataNode): string {\r\n  return node.type === 'Cluster'\r\n    ? (node.data as Cluster).cluster_phrase\r\n    : node.type === 'Phrase'\r\n    ? (node.data as Phrase).text\r\n    : node.type === 'Meta'\r\n    ? (node.data as MetaCluster).meta_value\r\n    : (node.data as Item).original_text;\r\n}\r\n\r\nexport function getNodeId(node: OneAIDataNode): string {\r\n  return (\r\n    node.type === 'Cluster'\r\n      ? (node.data as Cluster).cluster_id\r\n      : node.type === 'Phrase'\r\n      ? (node.data as Phrase).phrase_id\r\n      : node.type === 'Meta'\r\n      ? (node.data as MetaCluster).meta_key +\r\n        '$$' +\r\n        (node.data as MetaCluster).meta_value\r\n      : (node.data as Item).id\r\n  ).toString();\r\n}\r\n\r\nexport function getNodeItemsCount(node: OneAIDataNode): number {\r\n  return node.type === 'Cluster'\r\n    ? (node.data as Cluster).items_count\r\n    : node.type === 'Phrase'\r\n    ? (node.data as Phrase).items_count\r\n    : node.type === 'Meta'\r\n    ? (node.data as MetaCluster).items_count\r\n    : 1;\r\n}\r\n\r\nexport function getNodeDetails(\r\n  node: OneAIDataNode | undefined,\r\n  collection: string\r\n): { id: string; type: string } {\r\n  const currentNodeType = node?.type ?? COLLECTION_TYPE;\r\n  const currentNodeId = node ? getNodeId(node) : collection;\r\n\r\n  return { id: currentNodeId, type: currentNodeType };\r\n}\r\n\r\nexport function getNodeTrends(node: OneAIDataNode | undefined): Trend[] {\r\n  if (!node) return [];\r\n  return node.type === 'Cluster'\r\n    ? (node.data as Cluster).trends ?? []\r\n    : node.type === 'Phrase'\r\n    ? (node.data as Phrase).trends ?? []\r\n    : node.type === 'Meta'\r\n    ? (node.data as MetaCluster).trends ?? []\r\n    : [];\r\n}\r\n\r\nexport const getNodeOriginalAndTranslatedText = (\r\n  node: OneAIDataNode | undefined\r\n) => {\r\n  if (!node) return { originalText: undefined, translatedText: undefined };\r\n  if (['Cluster', 'Phrase', 'Item'].includes(node.type)) {\r\n    const cluster = node.data as Cluster;\r\n    return {\r\n      originalText: cluster.item_original_text,\r\n      translatedText:\r\n        cluster.item_translated_text ?? cluster.item_original_text,\r\n    };\r\n  }\r\n\r\n  if (node.type === 'Meta') {\r\n    const item = node.data as MetaCluster;\r\n    return {\r\n      originalText: item.meta_value,\r\n      translatedText: item.meta_value,\r\n    };\r\n  }\r\n  return { originalText: undefined, translatedText: undefined };\r\n};\r\n","import React from 'react';\r\nimport { CountersConfigurations } from '../../types/customizeBarTypes';\r\nimport { getMetadataKeyValueConfiguration } from '../../utils/countersUtils';\r\n\r\nexport default function LabelDisplay({\r\n  metadataKey,\r\n  value,\r\n  countersConfiguration,\r\n  labelClicked,\r\n  tooltip = '',\r\n  width,\r\n  maxWidth = '10ch',\r\n  color,\r\n}: {\r\n  metadataKey: string;\r\n  value: string;\r\n  countersConfiguration: CountersConfigurations;\r\n  labelClicked: (key: string, value: string) => void;\r\n  tooltip?: string;\r\n  width?: string;\r\n  maxWidth?: string;\r\n  color?: string;\r\n}) {\r\n  const config = getMetadataKeyValueConfiguration(\r\n    { key: metadataKey, value: value },\r\n    countersConfiguration\r\n  );\r\n\r\n  return (\r\n    <span\r\n      data-for=\"global\"\r\n      data-tip={tooltip !== '' ? tooltip + ': ' + value : value}\r\n      className=\"flex items-center cursor-pointer text-gray-500 hover:text-gray-300\"\r\n      style={{ color }}\r\n      onClick={() => labelClicked(metadataKey, value)}\r\n    >\r\n      {config && config.display && config.display.icon !== null && (\r\n        <span\r\n          className={`w-[1em] h-[1em] ${\r\n            config.display.color === 'green'\r\n              ? 'text-emerald-400'\r\n              : config.display.color === 'red'\r\n              ? 'text-red-400'\r\n              : 'text-gray-500 dark:text-gray-300'\r\n          }`}\r\n        >\r\n          {config.display.icon}\r\n        </span>\r\n      )}\r\n      <span\r\n        style={{\r\n          width,\r\n          maxWidth,\r\n          marginLeft: metadataKey === 'topic' ? '-1px' : '1px',\r\n        }}\r\n        className=\"italic truncate pr-1\"\r\n      >\r\n        {value}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n","import { Listbox, Transition } from '@headlessui/react';\r\nimport {\r\n  ChevronDownIcon,\r\n  ChevronUpDownIcon,\r\n  ChevronUpIcon,\r\n  FunnelIcon,\r\n} from '@heroicons/react/24/outline';\r\nimport React, { Fragment, useState } from 'react';\r\nimport {\r\n  CountersConfigurations,\r\n  MetadataKeyValue,\r\n} from '../../types/customizeBarTypes';\r\nimport { uniqBy } from '../../utils/utils';\r\n\r\nexport default function LabelsFiltersSelect({\r\n  selectedLabels,\r\n  countersConfigurations,\r\n  selectedMetadataKeyValueChange,\r\n}: {\r\n  selectedLabels: MetadataKeyValue[];\r\n  selectedMetadataKeyValueChange: (\r\n    newMetadataKeyValue: MetadataKeyValue\r\n  ) => void;\r\n  countersConfigurations: CountersConfigurations;\r\n}) {\r\n  return (\r\n    <Listbox>\r\n      <div className=\"relative\">\r\n        <Listbox.Button className=\"relative rounded-lg  py-2 pl-3 pr-10 text-left focus:outline-none sm:text-sm\">\r\n          <span\r\n            className=\"block truncate lowercase first-letter:uppercase text-black dark:text-white !text-xl\"\r\n            style={{ width: '1em', height: '1em' }}\r\n          >\r\n            <FunnelIcon />\r\n          </span>\r\n          <span className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2\">\r\n            <ChevronUpDownIcon\r\n              className=\"h-5 w-5 text-gray-400\"\r\n              aria-hidden=\"true\"\r\n            />\r\n          </span>\r\n        </Listbox.Button>\r\n        <Transition\r\n          as={Fragment}\r\n          leave=\"transition ease-in duration-100\"\r\n          leaveFrom=\"opacity-100\"\r\n          leaveTo=\"opacity-0\"\r\n        >\r\n          <Listbox.Options className=\"fixed mt-1 z-10 max-h-60 scrollbar-thin scrollbar-thumb-[#747189] scrollbar-track-[#272533] overflow-y-scroll scrollbar-thumb-rounded-full scrollbar-track-rounded-full rounded-md bg-gray-600 dark:bg-[#272533] py-1 text-base shadow-lg ring-1 ring-gray-500 dark:ring-black ring-opacity-5 focus:outline-none sm:text-sm\">\r\n            {uniqBy(\r\n              Object.keys(countersConfigurations).sort((a, b) =>\r\n                a < b ? -1 : a > b ? 1 : 0\r\n              ),\r\n              (key) => key\r\n            )\r\n              .filter(\r\n                (meta) => (countersConfigurations[meta]?.items?.length ?? 0) > 0\r\n              )\r\n              .map((key, i) => (\r\n                <CascadedOption\r\n                  countersConfigurations={countersConfigurations}\r\n                  optionName={key}\r\n                  index={i}\r\n                  selected={selectedLabels ?? []}\r\n                  labelClicked={selectedMetadataKeyValueChange}\r\n                  key={i}\r\n                />\r\n              ))}\r\n          </Listbox.Options>\r\n        </Transition>\r\n      </div>\r\n    </Listbox>\r\n  );\r\n}\r\n\r\nfunction CascadedOption({\r\n  countersConfigurations,\r\n  optionName,\r\n  index,\r\n  selected,\r\n  labelClicked,\r\n}: {\r\n  countersConfigurations: CountersConfigurations;\r\n  optionName: string;\r\n  index: number;\r\n  selected: MetadataKeyValue[];\r\n  labelClicked: (newMetadataKeyValue: MetadataKeyValue) => void;\r\n}) {\r\n  const keySelected = selected.some((s) => s.key === optionName);\r\n  const [opened, setOpened] = useState(keySelected);\r\n  const configData = countersConfigurations[optionName];\r\n\r\n  return (\r\n    <Fragment key={index}>\r\n      <div className=\"w-full flex\">\r\n        <MetadataTitle label={optionName} key={optionName} />\r\n\r\n        {configData.items && configData.items.length > 0 && (\r\n          <button\r\n            type=\"button\"\r\n            className=\"ml-auto mr-3\"\r\n            onClick={() => setOpened((opened) => !opened)}\r\n          >\r\n            {opened ? (\r\n              <ChevronUpIcon className=\"h-4 w-4 text-gray-300 \" />\r\n            ) : (\r\n              <ChevronDownIcon className=\"h-4 w-4 text-gray-300 \" />\r\n            )}\r\n            <span className=\"sr-only\">Open or Close metadata</span>\r\n          </button>\r\n        )}\r\n      </div>\r\n      {opened &&\r\n        uniqBy(configData.items ?? [], (group) => group.label).map(\r\n          (group, i) => {\r\n            return (\r\n              <DropdownOption\r\n                label={group.label ?? ''}\r\n                value={\r\n                  { key: optionName, value: group.label } as MetadataKeyValue\r\n                }\r\n                selected={selected.some(\r\n                  (keyVal) =>\r\n                    keyVal.key === optionName && keyVal.value === group.label\r\n                )}\r\n                labelClicked={labelClicked}\r\n                pl={2}\r\n                key={optionName + group.label + i.toString()}\r\n              />\r\n            );\r\n          }\r\n        )}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nfunction MetadataTitle({ label }: { label: string }) {\r\n  return (\r\n    <Listbox.Option\r\n      style={{ paddingLeft: '1rem' }}\r\n      className={({ active }) =>\r\n        `relative cursor-default select-none py-2 pr-4 ${\r\n          active\r\n            ? 'bg-gray-400 dark:bg-[#444154] text-white'\r\n            : 'text-gray-300 dark:text-[#747189]'\r\n        }`\r\n      }\r\n      value={label}\r\n    >\r\n      <span className=\"w-full flex\">\r\n        <div className=\"flex items-center\">\r\n          <label\r\n            className={`text-sm ml-2 font-medium text-gray-900 dark:text-gray-300 block truncate lowercase first-letter:uppercase`}\r\n          >\r\n            {label}\r\n          </label>\r\n        </div>\r\n      </span>\r\n    </Listbox.Option>\r\n  );\r\n}\r\n\r\nfunction DropdownOption({\r\n  label,\r\n  value,\r\n  selected,\r\n  labelClicked,\r\n  pl = 1,\r\n}: {\r\n  label: string;\r\n  value: MetadataKeyValue;\r\n  selected: boolean;\r\n  labelClicked: (newMetadataKeyValue: MetadataKeyValue) => void;\r\n  pl?: number;\r\n}) {\r\n  return (\r\n    <Listbox.Option\r\n      style={{ paddingLeft: pl + 'rem' }}\r\n      className={({ active }) =>\r\n        `relative cursor-default select-none py-2 pr-4 ${\r\n          active\r\n            ? 'bg-gray-400 dark:bg-[#444154] text-white'\r\n            : 'text-gray-300 dark:text-[#747189]'\r\n        }`\r\n      }\r\n      onClick={() => labelClicked(value)}\r\n      value={value}\r\n    >\r\n      <span className=\"w-full flex\">\r\n        <div className=\"flex items-center\">\r\n          <input\r\n            checked={selected}\r\n            type=\"checkbox\"\r\n            className=\"w-4 h-4 text-[#4D4DFE] bg-gray-100 border-gray-300 focus:ring-[#4D4DFE] dark:ring-offset-gray-800 focus:ring-2 dark:bg-[#322F46] dark:border-[#322F46]\"\r\n          />\r\n          <label\r\n            className={`text-sm ml-2 font-medium text-gray-900 dark:text-gray-300 block truncate lowercase first-letter:uppercase ${\r\n              selected ? 'font-medium' : 'font-normal'\r\n            }`}\r\n          >\r\n            {label}\r\n          </label>\r\n        </div>\r\n      </span>\r\n    </Listbox.Option>\r\n  );\r\n}\r\n","import { Listbox, Transition } from '@headlessui/react';\r\nimport { ChevronDownIcon } from '@heroicons/react/24/outline';\r\nimport React, { Fragment } from 'react';\r\n\r\nexport default function SingleSelect({\r\n  options,\r\n  selectedLabel,\r\n  onSelect,\r\n}: {\r\n  options: string[];\r\n  selectedLabel: string;\r\n  onSelect: (selectedLabel: string) => void;\r\n}) {\r\n  return (\r\n    <Listbox>\r\n      <div className=\"relative\">\r\n        <Listbox.Button className=\"relative rounded-lg text-left focus:outline-none text-sm flex items-center\">\r\n          <span className=\"text-[#111111] dark:text-gray-300 text-sm mr-1\">\r\n            {selectedLabel}\r\n          </span>\r\n          <span>\r\n            <ChevronDownIcon\r\n              className=\"h-4 w-4 text-gray-200\"\r\n              aria-hidden=\"true\"\r\n            />\r\n          </span>\r\n        </Listbox.Button>\r\n        <Transition\r\n          as={Fragment}\r\n          leave=\"transition ease-in duration-100\"\r\n          leaveFrom=\"opacity-100\"\r\n          leaveTo=\"opacity-0\"\r\n        >\r\n          <Listbox.Options className=\"fixed mt-1 z-10 p-1 max-h-60 scrollbar-thin scrollbar-thumb-[#747189] scrollbar-track-[#272533] overflow-y-scroll scrollbar-thumb-rounded-full scrollbar-track-rounded-full rounded-md bg-gray-600 dark:bg-[#272533] py-1 text-base shadow-lg ring-1 ring-gray-500 dark:ring-black ring-opacity-5 focus:outline-none sm:text-sm\">\r\n            {options.map((key, i) => (\r\n              <DropdownOption\r\n                label={key}\r\n                value={key}\r\n                selected={selectedLabel === key}\r\n                labelClicked={onSelect}\r\n                key={i}\r\n              />\r\n            ))}\r\n          </Listbox.Options>\r\n        </Transition>\r\n      </div>\r\n    </Listbox>\r\n  );\r\n}\r\n\r\nfunction DropdownOption({\r\n  label,\r\n  value,\r\n  selected,\r\n  labelClicked,\r\n}: {\r\n  label: string;\r\n  value: string;\r\n  selected: boolean;\r\n  labelClicked: (label: string) => void;\r\n}) {\r\n  return (\r\n    <Listbox.Option\r\n      className={({ active }) =>\r\n        `relative cursor-default select-none py-2 pr-4 ${\r\n          active\r\n            ? 'bg-gray-400 dark:bg-[#444154] text-white'\r\n            : 'text-gray-300 dark:text-[#747189]'\r\n        }`\r\n      }\r\n      onClick={() => labelClicked(value)}\r\n      value={value}\r\n    >\r\n      <span className=\"w-full flex\">\r\n        <div className=\"flex items-center\">\r\n          <input\r\n            checked={selected}\r\n            onChange={() => {}}\r\n            type=\"radio\"\r\n            className=\"w-4 h-4 text-[#4D4DFE] bg-gray-100 border-gray-300 focus:ring-[#4D4DFE] dark:ring-offset-gray-800 focus:ring-2 dark:bg-[#322F46] dark:border-[#322F46]\"\r\n          />\r\n          <label\r\n            className={`text-sm ml-2 font-medium text-gray-900 dark:text-gray-300 block truncate lowercase first-letter:uppercase ${\r\n              selected ? 'font-medium' : 'font-normal'\r\n            }`}\r\n          >\r\n            {label}\r\n          </label>\r\n        </div>\r\n      </span>\r\n    </Listbox.Option>\r\n  );\r\n}\r\n","import {\r\n  CountersConfigurations,\r\n  CounterType,\r\n  MetadataKeyValue,\r\n} from '../types/customizeBarTypes';\r\nimport { MetaData, Trend } from '../types/modals';\r\nimport { getMetadataKeyValueGroups, hasMultipleMembers } from './countersUtils';\r\n\r\nexport const numberFormatter = new Intl.NumberFormat('en-US');\r\n\r\nexport function getMetadataKeyValueDisplay(metadataKeyValue: MetadataKeyValue) {\r\n  if (!metadataKeyValue.value) return metadataKeyValue.key;\r\n  return `${metadataKeyValue.key}.${metadataKeyValue.value}`;\r\n}\r\n\r\nexport function getBackgroundColorLayers(\r\n  colorAxis: CounterType[],\r\n  metadata: MetaData,\r\n  trends: Trend[],\r\n  countersConfiguration: CountersConfigurations,\r\n  totalItems: number\r\n) {\r\n  return groupCounters(colorAxis, countersConfiguration)\r\n    .map((countersGroup) => {\r\n      const groups = countersGroup.map((counter) =>\r\n        counter.calculationConfiguration.calculate(\r\n          counter.metadataKeyValue,\r\n          metadata,\r\n          trends,\r\n          countersConfiguration,\r\n          totalItems\r\n        )\r\n      );\r\n\r\n      if (!groups.some((group) => group.result && group.result > 0)) return '';\r\n      let backgroundString = '';\r\n      let totalPercentage = 0;\r\n      groups.forEach((group) => {\r\n        backgroundString =\r\n          backgroundString +\r\n          `,${\r\n            group.counter?.display?.color ?? 'rgba(255,0,0,0)'\r\n          } ${totalPercentage}% ${totalPercentage + group.result}%`;\r\n        totalPercentage += group.result;\r\n      });\r\n      backgroundString = `${backgroundString},rgba(255,0,0,0) ${totalPercentage}% ${\r\n        100 - totalPercentage\r\n      }%`;\r\n      return `linear-gradient(90deg${backgroundString})`;\r\n    })\r\n    .filter((str) => str !== '');\r\n}\r\n\r\nfunction groupCounters(\r\n  counters: CounterType[],\r\n  countersConfiguration: CountersConfigurations\r\n) {\r\n  return counters.reduce((groups, counter) => {\r\n    const index = groups.findIndex(\r\n      (group) =>\r\n        group.length > 0 &&\r\n        areCountersCanBeGrouped(counter, group.at(0), countersConfiguration)\r\n    );\r\n    if (index !== -1) {\r\n      groups[index].push(counter);\r\n    } else {\r\n      groups.push([counter]);\r\n    }\r\n    return groups;\r\n  }, [] as Array<CounterType[]>);\r\n}\r\n\r\nfunction areCountersCanBeGrouped(\r\n  firstCounter: CounterType,\r\n  secondCounter: CounterType | undefined,\r\n  countersConfiguration: CountersConfigurations\r\n): boolean {\r\n  if (\r\n    !firstCounter.metadataKeyValue ||\r\n    !secondCounter ||\r\n    !secondCounter.metadataKeyValue\r\n  )\r\n    return false;\r\n  if (\r\n    firstCounter.calculationConfiguration.name !==\r\n    secondCounter.calculationConfiguration.name\r\n  )\r\n    return false;\r\n  return areKeyValuesSameLevel(\r\n    firstCounter.metadataKeyValue,\r\n    secondCounter.metadataKeyValue,\r\n    countersConfiguration\r\n  );\r\n}\r\n\r\nfunction areKeyValuesSameLevel(\r\n  firstKeyValue: MetadataKeyValue,\r\n  secondKeyValue: MetadataKeyValue,\r\n  countersConfiguration: CountersConfigurations\r\n): boolean {\r\n  if (firstKeyValue.key !== secondKeyValue.key) return false;\r\n\r\n  const firstKeyValueHasGroups =\r\n    getMetadataKeyValueGroups(firstKeyValue, countersConfiguration).length > 0;\r\n  const secondKeyValueHasGroups =\r\n    getMetadataKeyValueGroups(secondKeyValue, countersConfiguration).length > 0;\r\n  if (firstKeyValueHasGroups !== secondKeyValueHasGroups) return false;\r\n\r\n  const firstKeyValueHasMultipleMembers = hasMultipleMembers(\r\n    firstKeyValue,\r\n    countersConfiguration\r\n  );\r\n  const secondKeyValueHasMultipleMembers = hasMultipleMembers(\r\n    secondKeyValue,\r\n    countersConfiguration\r\n  );\r\n  if (firstKeyValueHasMultipleMembers !== secondKeyValueHasMultipleMembers)\r\n    return false;\r\n\r\n  return true;\r\n}\r\n","import {\r\n  ArrowDownIcon,\r\n  ArrowsUpDownIcon,\r\n  ArrowUpIcon,\r\n} from '@heroicons/react/20/solid';\r\nimport React from 'react';\r\nimport {\r\n  CountersConfigurations,\r\n  CounterType,\r\n} from '../../types/customizeBarTypes';\r\nimport { MetaData, Trend } from '../../types/modals';\r\nimport {\r\n  getMetadataKeyValueDisplay,\r\n  numberFormatter,\r\n} from '../../utils/displayUtils';\r\nimport { customNumberToFixed, getNumberDescription } from '../../utils/utils';\r\n\r\nexport default function CounterDisplay({\r\n  counter,\r\n  metadata,\r\n  countersConfiguration,\r\n  trends,\r\n  totalItems,\r\n  width,\r\n  maxWidth = '6ch',\r\n}: {\r\n  counter: CounterType;\r\n  metadata: MetaData;\r\n  countersConfiguration: CountersConfigurations;\r\n  trends: Trend[];\r\n  totalItems: number;\r\n  width?: string;\r\n  maxWidth?: string;\r\n}) {\r\n  const metadataKeyValue = counter.metadataKeyValue;\r\n  if (!metadataKeyValue) return <></>;\r\n  const displayResult = counter.calculationConfiguration.calculate(\r\n    metadataKeyValue,\r\n    metadata,\r\n    trends,\r\n    countersConfiguration,\r\n    totalItems\r\n  );\r\n  if (!displayResult.counter) return <></>;\r\n\r\n  return (\r\n    <span\r\n      data-tip={\r\n        `${getMetadataKeyValueDisplay(metadataKeyValue)} - ${\r\n          counter.calculationConfiguration.name\r\n        }` +\r\n        getMetadataValueTitle(displayResult.metadataKey, displayResult.value) +\r\n        ' - ' +\r\n        numberFormatter.format(customNumberToFixed(displayResult.result))\r\n      }\r\n      data-for=\"global\"\r\n      className={`flex items-center text-sm ${\r\n        counter.calculationConfiguration.type !== 'trend' &&\r\n        displayResult.result < 1\r\n          ? 'text-gray-500 dark:text-gray-300'\r\n          : displayResult.counter.display\r\n          ? displayResult.counter.display.color === 'green'\r\n            ? 'text-emerald-400'\r\n            : displayResult.counter.display.color === 'red'\r\n            ? 'text-red-400'\r\n            : 'text-gray-500 dark:text-gray-300'\r\n          : 'text-gray-500 dark:text-gray-300'\r\n      }`}\r\n    >\r\n      {counter.calculationConfiguration.type === 'trend' &&\r\n      displayResult.result > 0 ? (\r\n        <span\r\n          className=\"text-emerald-400\"\r\n          style={{ width: '1em', height: '1em' }}\r\n        >\r\n          <ArrowUpIcon />\r\n        </span>\r\n      ) : counter.calculationConfiguration.type === 'trend' &&\r\n        displayResult.result < 0 ? (\r\n        <span className=\"text-red-400\" style={{ width: '1em', height: '1em' }}>\r\n          <ArrowDownIcon />\r\n        </span>\r\n      ) : (\r\n        counter.calculationConfiguration.type === 'trend' && (\r\n          <span\r\n            className=\"text-gray-300\"\r\n            style={{ width: '1em', height: '1em' }}\r\n          >\r\n            <ArrowsUpDownIcon />\r\n          </span>\r\n        )\r\n      )}\r\n      {displayResult.counter.display &&\r\n        displayResult.counter.display.icon !== null && (\r\n          <span style={{ width: '1em', height: '1em' }}>\r\n            {displayResult.counter.display.icon}\r\n          </span>\r\n        )}\r\n      <span\r\n        className={`${\r\n          counter.calculationConfiguration.type === 'trend'\r\n            ? displayResult.result > 0\r\n              ? 'text-emerald-400'\r\n              : displayResult.result < 0\r\n              ? 'text-red-400'\r\n              : 'text-gray-500 dark:text-gray-300'\r\n            : ''\r\n        }`}\r\n        style={{ width, maxWidth }}\r\n      >\r\n        {getNumberDescription(displayResult.result, 2)}\r\n        {counter.calculationConfiguration.type === 'percentage' ||\r\n        counter.calculationConfiguration.type === 'trend'\r\n          ? '%'\r\n          : null}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n\r\nfunction getMetadataValueTitle(\r\n  metadata: string | undefined,\r\n  value: string | undefined\r\n) {\r\n  if (metadata) {\r\n    if (value) return `(${metadata}.${value})`;\r\n    return `(${metadata})`;\r\n  }\r\n\r\n  if (value) {\r\n    return `(${value})`;\r\n  }\r\n\r\n  return '';\r\n}\r\n","import React from 'react';\r\nimport { CountersConfigurations } from '../../types/customizeBarTypes';\r\nimport { MetaData } from '../../types/modals';\r\nimport { toLowerKeys } from '../../utils/utils';\r\nimport LabelDisplay from './LabelDisplay';\r\n\r\nexport default function MaxLabelDisplay({\r\n  metadataKey,\r\n  metadata,\r\n  countersConfiguration,\r\n  labelClicked,\r\n  width,\r\n  maxWidth,\r\n}: {\r\n  metadataKey: string;\r\n  metadata: MetaData;\r\n  countersConfiguration: CountersConfigurations;\r\n  labelClicked: (key: string, value: string) => void;\r\n  width?: string;\r\n  maxWidth?: string;\r\n}) {\r\n  const lowerKeysMetadata = toLowerKeys(metadata) as MetaData;\r\n  const meta = lowerKeysMetadata[metadataKey.toLowerCase()]?.reduce(\r\n    (prev, current) => (prev.count > current.count ? prev : current)\r\n  );\r\n  if (!meta) return <></>;\r\n  return (\r\n    <LabelDisplay\r\n      metadataKey={metadataKey}\r\n      value={meta.value}\r\n      countersConfiguration={countersConfiguration}\r\n      labelClicked={labelClicked}\r\n      width={width}\r\n      maxWidth={maxWidth}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {\r\n  CountersConfigurations,\r\n  CounterType,\r\n} from '../types/customizeBarTypes';\r\nimport { MetaData, Trend } from '../types/modals';\r\nimport CounterDisplay from './CountersLabels/CounterDisplay';\r\nimport MaxLabelDisplay from './CountersLabels/MaxLabelDisplay';\r\n\r\nexport default function CountersLabelsDisplay({\r\n  counters,\r\n  labels,\r\n  metadata,\r\n  countersConfiguration,\r\n  trends,\r\n  labelClicked,\r\n  counterWidth,\r\n  counterMaxWidth,\r\n  labelWidth,\r\n  labelMaxWidth,\r\n  totalItems,\r\n}: {\r\n  counters: CounterType[];\r\n  labels: string[];\r\n  metadata: MetaData;\r\n  countersConfiguration: CountersConfigurations;\r\n  trends: Trend[];\r\n  labelClicked: (key: string, value: string) => void;\r\n  totalItems: number;\r\n  counterWidth?: string;\r\n  counterMaxWidth?: string;\r\n  labelWidth?: string;\r\n  labelMaxWidth?: string;\r\n}) {\r\n  return (\r\n    <span className=\"truncate flex items-center\">\r\n      {counters\r\n        .filter((counter) => counter.metadataKeyValue !== null)\r\n        .map((counter, i) => (\r\n          <div key={i} className=\"mr-2\">\r\n            <CounterDisplay\r\n              counter={counter}\r\n              countersConfiguration={countersConfiguration}\r\n              metadata={metadata}\r\n              trends={trends}\r\n              width={counterWidth}\r\n              maxWidth={counterMaxWidth}\r\n              totalItems={totalItems}\r\n            />\r\n          </div>\r\n        ))}\r\n      {labels.map((label, i) => (\r\n        <div key={i} className=\"mr-1\">\r\n          <MaxLabelDisplay\r\n            countersConfiguration={countersConfiguration}\r\n            metadataKey={label}\r\n            labelClicked={labelClicked}\r\n            metadata={metadata}\r\n            width={labelWidth}\r\n            maxWidth={labelMaxWidth}\r\n          />\r\n        </div>\r\n      ))}\r\n    </span>\r\n  );\r\n}\r\n","import { Listbox } from '@headlessui/react';\r\nimport React from 'react';\r\nimport {\r\n  CalculationConfiguration,\r\n  MetadataKeyValue,\r\n} from '../../types/customizeBarTypes';\r\n\r\nexport default function DropdownOption({\r\n  label,\r\n  value,\r\n  pl = 1,\r\n}: {\r\n  label: string;\r\n  value: MetadataKeyValue | CalculationConfiguration | string;\r\n  pl?: number;\r\n}) {\r\n  return (\r\n    <Listbox.Option\r\n      style={{ paddingLeft: pl + 'rem' }}\r\n      className={({ active }) =>\r\n        `relative cursor-default select-none py-2 pr-4 ${\r\n          active\r\n            ? 'bg-gray-400 dark:bg-[#444154] text-white'\r\n            : 'text-gray-300 dark:text-[#747189]'\r\n        }`\r\n      }\r\n      value={value}\r\n    >\r\n      {({ selected }) => (\r\n        <span className=\"w-full flex\">\r\n          <div className=\"flex items-center\">\r\n            <input\r\n              checked={selected}\r\n              type=\"radio\"\r\n              className=\"w-4 h-4 text-[#4D4DFE] bg-gray-100 border-gray-300 focus:ring-[#4D4DFE] dark:ring-offset-gray-800 focus:ring-2 dark:bg-[#322F46] dark:border-[#322F46]\"\r\n            />\r\n            <label\r\n              className={`text-sm ml-2 font-medium text-gray-900 dark:text-gray-300 block truncate lowercase first-letter:uppercase ${\r\n                selected ? 'font-medium' : 'font-normal'\r\n              }`}\r\n            >\r\n              {label}\r\n            </label>\r\n          </div>\r\n        </span>\r\n      )}\r\n    </Listbox.Option>\r\n  );\r\n}\r\n","import { Listbox, Transition } from '@headlessui/react';\r\nimport {\r\n  ChevronDownIcon,\r\n  ChevronUpDownIcon,\r\n  ChevronUpIcon,\r\n} from '@heroicons/react/20/solid';\r\nimport React, { Fragment, useState } from 'react';\r\nimport {\r\n  CountersConfigurations,\r\n  MetadataKeyValue,\r\n} from '../../types/customizeBarTypes';\r\nimport { getMetadataKeyValueDisplay } from '../../utils/displayUtils';\r\nimport { uniqBy } from '../../utils/utils';\r\nimport DropdownOption from './DropdownOption';\r\n\r\nexport default function KeyValueSingleSelect({\r\n  metadataKeyValue,\r\n  countersConfigurations,\r\n  selectedMetadataKeyValueChange,\r\n  placeholder,\r\n}: {\r\n  metadataKeyValue: MetadataKeyValue | null;\r\n  selectedMetadataKeyValueChange: (\r\n    newMetadataKeyValue: MetadataKeyValue\r\n  ) => void;\r\n  countersConfigurations: CountersConfigurations;\r\n  placeholder: string;\r\n}) {\r\n  return (\r\n    <Listbox\r\n      value={metadataKeyValue}\r\n      onChange={selectedMetadataKeyValueChange}\r\n      by={(a, b) => a?.key === b?.key && a?.value === b?.value}\r\n    >\r\n      <div className=\"relative\">\r\n        <Listbox.Button className=\"relative rounded-lg bg-gray-600 dark:bg-[#272535] py-2 pl-3 pr-10 text-left focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm\">\r\n          <span className=\"block truncate lowercase first-letter:uppercase text-white\">\r\n            {metadataKeyValue\r\n              ? getMetadataKeyValueDisplay(metadataKeyValue)\r\n              : placeholder}\r\n          </span>\r\n          <span className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2\">\r\n            <ChevronUpDownIcon\r\n              className=\"h-5 w-5 text-gray-400\"\r\n              aria-hidden=\"true\"\r\n            />\r\n          </span>\r\n        </Listbox.Button>\r\n        <Transition\r\n          as={Fragment}\r\n          leave=\"transition ease-in duration-100\"\r\n          leaveFrom=\"opacity-100\"\r\n          leaveTo=\"opacity-0\"\r\n        >\r\n          <Listbox.Options className=\"fixed mt-1 z-10 max-h-60 scrollbar-thin scrollbar-thumb-[#747189] scrollbar-track-[#272533] overflow-y-scroll scrollbar-thumb-rounded-full scrollbar-track-rounded-full rounded-md bg-gray-600 dark:bg-[#272533] py-1 text-base shadow-lg ring-1 ring-gray-500 dark:ring-black ring-opacity-5 focus:outline-none sm:text-sm\">\r\n            {uniqBy(\r\n              Object.keys(countersConfigurations).sort((a, b) =>\r\n                a < b ? -1 : a > b ? 1 : 0\r\n              ),\r\n              (key) => key\r\n            ).map((key, i) => (\r\n              <CascadedOption\r\n                countersConfigurations={countersConfigurations}\r\n                optionName={key}\r\n                index={i}\r\n                selected={\r\n                  (metadataKeyValue?.key ?? '') === key &&\r\n                  metadataKeyValue?.value !== undefined\r\n                }\r\n                key={i}\r\n              />\r\n            ))}\r\n          </Listbox.Options>\r\n        </Transition>\r\n      </div>\r\n    </Listbox>\r\n  );\r\n}\r\n\r\nfunction CascadedOption({\r\n  countersConfigurations,\r\n  optionName,\r\n  index,\r\n  selected,\r\n}: {\r\n  countersConfigurations: CountersConfigurations;\r\n  optionName: string;\r\n  index: number;\r\n  selected: boolean;\r\n}) {\r\n  const [opened, setOpened] = useState(selected);\r\n  const configData = countersConfigurations[optionName];\r\n\r\n  return (\r\n    <Fragment key={index}>\r\n      <div className=\"w-full flex\">\r\n        <DropdownOption\r\n          label={optionName}\r\n          value={{ key: optionName } as MetadataKeyValue}\r\n          key={optionName}\r\n        />\r\n\r\n        {configData.items && configData.items.length > 0 && (\r\n          <button\r\n            type=\"button\"\r\n            className=\"ml-auto mr-3\"\r\n            onClick={() => setOpened((opened) => !opened)}\r\n          >\r\n            {opened ? (\r\n              <ChevronUpIcon className=\"h-4 w-4 text-gray-300 \" />\r\n            ) : (\r\n              <ChevronDownIcon className=\"h-4 w-4 text-gray-300 \" />\r\n            )}\r\n            <span className=\"sr-only\">Open or Close metadata</span>\r\n          </button>\r\n        )}\r\n      </div>\r\n      {opened &&\r\n        uniqBy(configData.items ?? [], (group) => group.label).map(\r\n          (group, i) => {\r\n            return (\r\n              <DropdownOption\r\n                label={group.label ?? ''}\r\n                value={\r\n                  { key: optionName, value: group.label } as MetadataKeyValue\r\n                }\r\n                pl={2}\r\n                key={optionName + group.label + i.toString()}\r\n              />\r\n            );\r\n          }\r\n        )}\r\n    </Fragment>\r\n  );\r\n}\r\n","import { Listbox, Transition } from '@headlessui/react';\r\nimport { ChevronUpDownIcon, XMarkIcon } from '@heroicons/react/20/solid';\r\nimport React, { Fragment } from 'react';\r\nimport {\r\n  topGroupPercentCalculationName,\r\n  topValuePercentCalculationName,\r\n} from '../../configurations/calculationsConfigurations';\r\nimport {\r\n  CalculationConfiguration,\r\n  CountersConfigurations,\r\n  CounterType,\r\n  MetadataKeyValue,\r\n} from '../../types/customizeBarTypes';\r\nimport {\r\n  getMetadataKeyValueGroups,\r\n  hasMultipleMembers,\r\n} from '../../utils/countersUtils';\r\nimport DropdownOption from '../CountersLabels/DropdownOption';\r\nimport KeyValueSingleSelect from '../CountersLabels/KeyValueSingleSelect';\r\n\r\nexport default function Counters({\r\n  countersConfigurations,\r\n  calculationsConfigurations,\r\n  currentCounters,\r\n  countersChanged,\r\n  addCounterText,\r\n  title,\r\n}: {\r\n  countersConfigurations: CountersConfigurations;\r\n  calculationsConfigurations: CalculationConfiguration[];\r\n  currentCounters: CounterType[];\r\n  countersChanged: (counters: CounterType[]) => void;\r\n  addCounterText: string;\r\n  title: string;\r\n}) {\r\n  const addCounter = (newMetadataKeyValue: MetadataKeyValue) => {\r\n    const allowedCalculations = getCalculationTypes(\r\n      calculationsConfigurations,\r\n      newMetadataKeyValue,\r\n      countersConfigurations\r\n    );\r\n    countersChanged([\r\n      ...currentCounters,\r\n      {\r\n        metadataKeyValue: newMetadataKeyValue,\r\n        calculationConfiguration: getDefaultCalculation(allowedCalculations),\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const deleteCounter = (index: number) => {\r\n    currentCounters.splice(index, 1);\r\n    countersChanged([...currentCounters]);\r\n  };\r\n\r\n  const updateCounter = (index: number, updatedCounter: CounterType) => {\r\n    currentCounters[index] = updatedCounter;\r\n    countersChanged([...currentCounters]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <p className=\"text-xl text-gray-500 dark:text-white mb-1\">{title}</p>\r\n      <div className=\"flex w-full flex-wrap items-center\">\r\n        {currentCounters.map((addedCounter, i) => (\r\n          <div className=\"ml-1 mb-1\" key={i}>\r\n            <Counter\r\n              counterData={addedCounter}\r\n              countersConfigurations={countersConfigurations}\r\n              calculationsConfigurations={calculationsConfigurations}\r\n              counterDeleted={() => deleteCounter(i)}\r\n              counterChanged={(counter) => updateCounter(i, counter)}\r\n            />\r\n          </div>\r\n        ))}\r\n        <div className=\"ml-1\">\r\n          <KeyValueSingleSelect\r\n            metadataKeyValue={null}\r\n            countersConfigurations={countersConfigurations}\r\n            selectedMetadataKeyValueChange={addCounter}\r\n            placeholder={addCounterText}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Counter({\r\n  counterData,\r\n  countersConfigurations,\r\n  calculationsConfigurations,\r\n  counterDeleted,\r\n  counterChanged,\r\n}: {\r\n  counterData: CounterType;\r\n  countersConfigurations: CountersConfigurations;\r\n  calculationsConfigurations: CalculationConfiguration[];\r\n  counterDeleted: () => void;\r\n  counterChanged: (counter: CounterType) => void;\r\n}) {\r\n  const selectedMetadataKeyValueChangeHandler = (\r\n    newMetadataKeyValue: MetadataKeyValue\r\n  ) => {\r\n    const allowedCalculations = getCalculationTypes(\r\n      calculationsConfigurations,\r\n      newMetadataKeyValue,\r\n      countersConfigurations\r\n    );\r\n    counterChanged({\r\n      metadataKeyValue: newMetadataKeyValue,\r\n      calculationConfiguration: allowedCalculations.some(\r\n        (calc) => calc.name === counterData.calculationConfiguration.name\r\n      )\r\n        ? counterData.calculationConfiguration\r\n        : getDefaultCalculation(allowedCalculations),\r\n    });\r\n  };\r\n\r\n  const counterChangeHandler = (newCounter: CalculationConfiguration) => {\r\n    counterChanged({\r\n      metadataKeyValue: counterData.metadataKeyValue,\r\n      calculationConfiguration: newCounter,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"flex bg-gray-600 dark:bg-[#272535] p-1 w-fit\">\r\n        <KeyValueSingleSelect\r\n          metadataKeyValue={counterData.metadataKeyValue}\r\n          countersConfigurations={countersConfigurations}\r\n          selectedMetadataKeyValueChange={selectedMetadataKeyValueChangeHandler}\r\n          placeholder=\"Select\"\r\n        />\r\n        <Listbox\r\n          value={counterData.calculationConfiguration}\r\n          onChange={counterChangeHandler}\r\n          by=\"name\"\r\n        >\r\n          <div className=\"relative ml-1\">\r\n            <Listbox.Button className=\"relative rounded-lg bg-gray-600 dark:bg-[#272535] py-2 pl-3 pr-10 text-left focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm\">\r\n              <span className=\"block truncate lowercase first-letter:uppercase text-white\">\r\n                {counterData.calculationConfiguration.name}\r\n              </span>\r\n              <span className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2\">\r\n                <ChevronUpDownIcon\r\n                  className=\"h-5 w-5 text-gray-400\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              </span>\r\n            </Listbox.Button>\r\n            <Transition\r\n              as={Fragment}\r\n              leave=\"transition ease-in duration-100\"\r\n              leaveFrom=\"opacity-100\"\r\n              leaveTo=\"opacity-0\"\r\n            >\r\n              <Listbox.Options className=\"fixed mt-1 z-10 max-h-60 scrollbar-thin scrollbar-thumb-[#747189] scrollbar-track-[#272533] overflow-y-scroll scrollbar-thumb-rounded-full scrollbar-track-rounded-full rounded-md bg-gray-600 dark:bg-[#272533] py-1 text-base shadow-lg ring-1 ring-gray-500 dark:ring-black ring-opacity-5 focus:outline-none sm:text-sm\">\r\n                {getCalculationTypes(\r\n                  calculationsConfigurations,\r\n                  counterData.metadataKeyValue,\r\n                  countersConfigurations\r\n                )\r\n                  .sort(function (a, b) {\r\n                    const textA = a.name.toLowerCase();\r\n                    const textB = b.name.toLowerCase();\r\n                    return textA < textB ? -1 : textA > textB ? 1 : 0;\r\n                  })\r\n                  .map((counter) => (\r\n                    <DropdownOption\r\n                      label={counter.name}\r\n                      value={counter}\r\n                      key={counter.name}\r\n                    />\r\n                  ))}\r\n              </Listbox.Options>\r\n            </Transition>\r\n          </div>\r\n        </Listbox>\r\n        <button type=\"button\" className=\"ml-1\" onClick={counterDeleted}>\r\n          <XMarkIcon className=\"h-4 w-4 text-gray-200 dark:text-gray-600 hover:scale-125 transition duration-100 ease-linear\" />\r\n          <span className=\"sr-only\">Delete counter</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getCalculationTypes(\r\n  calculationTypes: CalculationConfiguration[],\r\n  selectedMetadataKeyValue: MetadataKeyValue | null,\r\n  countersConfiguration: CountersConfigurations\r\n): CalculationConfiguration[] {\r\n  if (!selectedMetadataKeyValue)\r\n    return calculationTypes.filter(\r\n      (calc) => !calc.hasGroups && !calc.hasMultipleMembers\r\n    );\r\n\r\n  const hasGroups =\r\n    getMetadataKeyValueGroups(selectedMetadataKeyValue, countersConfiguration)\r\n      .length > 0;\r\n  if (hasGroups) return calculationTypes;\r\n\r\n  const keyValueHasMultipleMembers = hasMultipleMembers(\r\n    selectedMetadataKeyValue,\r\n    countersConfiguration\r\n  );\r\n  if (keyValueHasMultipleMembers)\r\n    return calculationTypes.filter((calc) => !calc.hasGroups);\r\n\r\n  return calculationTypes.filter(\r\n    (calc) => !calc.hasGroups && !calc.hasMultipleMembers\r\n  );\r\n}\r\n\r\nfunction getDefaultCalculation(\r\n  allowedCalculations: CalculationConfiguration[]\r\n): CalculationConfiguration {\r\n  return (\r\n    allowedCalculations.find(\r\n      (calc) => calc.name === topGroupPercentCalculationName\r\n    ) ??\r\n    allowedCalculations.find(\r\n      (calc) => calc.name === topValuePercentCalculationName\r\n    ) ??\r\n    allowedCalculations[0]\r\n  );\r\n}\r\n","import { Listbox, Transition } from '@headlessui/react';\r\nimport { ChevronUpDownIcon } from '@heroicons/react/20/solid';\r\nimport React, { Fragment, useState } from 'react';\r\nimport { uniqBy } from '../../utils/utils';\r\nimport DropdownOption from '../CountersLabels/DropdownOption';\r\n\r\nexport default function Labels({\r\n  currentLabels,\r\n  labelsOptions,\r\n  labelsChanged,\r\n  title = 'Labels',\r\n}: {\r\n  currentLabels: string[];\r\n  labelsOptions: string[];\r\n  labelsChanged: (labels: string[]) => void;\r\n  title?: string;\r\n}) {\r\n  const [selectedLabels, setSelectedLabels] = useState(\r\n    currentLabels as string[]\r\n  );\r\n\r\n  const handleChange = (newLabels: string[]) => {\r\n    setSelectedLabels(newLabels);\r\n    labelsChanged(newLabels);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <p className=\"text-xl text-gray-500 dark:text-white mb-1\">{title}</p>\r\n      <Listbox value={selectedLabels} onChange={handleChange} multiple>\r\n        <div className=\"relative\">\r\n          <Listbox.Button className=\"relative rounded-lg bg-gray-600 dark:bg-[#272535] py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm\">\r\n            <span className=\"block truncate lowercase first-letter:uppercase text-white\">\r\n              {selectedLabels.length === 0\r\n                ? 'Select'\r\n                : `${selectedLabels.length} labels selected`}\r\n            </span>\r\n            <span className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2\">\r\n              <ChevronUpDownIcon\r\n                className=\"h-5 w-5 text-gray-400\"\r\n                aria-hidden=\"true\"\r\n              />\r\n            </span>\r\n          </Listbox.Button>\r\n          <Transition\r\n            as={Fragment}\r\n            leave=\"transition ease-in duration-100\"\r\n            leaveFrom=\"opacity-100\"\r\n            leaveTo=\"opacity-0\"\r\n          >\r\n            <Listbox.Options className=\"fixed mt-1 z-10 max-h-60 scrollbar-thin scrollbar-thumb-[#747189] scrollbar-track-[#272533] overflow-y-scroll scrollbar-thumb-rounded-full scrollbar-track-rounded-full rounded-md bg-gray-600 dark:bg-[#272533] py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\">\r\n              {uniqBy(labelsOptions, (key) => key).map((key) => (\r\n                <DropdownOption key={key} label={key} value={key} />\r\n              ))}\r\n            </Listbox.Options>\r\n          </Transition>\r\n        </div>\r\n      </Listbox>\r\n    </div>\r\n  );\r\n}\r\n","import { Popover, Transition } from '@headlessui/react';\r\nimport { ChevronDownIcon } from '@heroicons/react/20/solid';\r\nimport React, { Fragment } from 'react';\r\nimport {\r\n  CalculationConfiguration,\r\n  CountersConfigurations,\r\n  CounterType,\r\n  MetadataKeyValue,\r\n} from '../types/customizeBarTypes';\r\nimport KeyValueSingleSelect from './CountersLabels/KeyValueSingleSelect';\r\nimport Counters from './CustomizeTab/Counters';\r\nimport Labels from './CustomizeTab/Labels';\r\n\r\nexport default function CustomizeTab({\r\n  currentCounters,\r\n  selectedLabels,\r\n  countersConfigurations,\r\n  calculationsConfigurations,\r\n  labelsOptions,\r\n  countersChanged,\r\n  labelsChanged,\r\n  currentColorsAxis,\r\n  selectedSizeAxis,\r\n  colorsAxisChanged,\r\n  sizeAxisChanged,\r\n}: {\r\n  currentCounters: CounterType[];\r\n  selectedLabels: string[];\r\n  countersConfigurations: CountersConfigurations;\r\n  calculationsConfigurations: CalculationConfiguration[];\r\n  labelsOptions: string[];\r\n  countersChanged: (counters: CounterType[]) => void;\r\n  labelsChanged: (labels: string[]) => void;\r\n  currentColorsAxis: CounterType[];\r\n  selectedSizeAxis: MetadataKeyValue | null;\r\n  colorsAxisChanged: (counters: CounterType[]) => void;\r\n  sizeAxisChanged: (metadataKeyValue: MetadataKeyValue) => void;\r\n}) {\r\n  return (\r\n    <div className=\"max-w-sm\">\r\n      <Popover className=\"relative\">\r\n        {({ open }) => (\r\n          <>\r\n            <Popover.Button\r\n              className={`\r\n                ${open ? '' : 'text-opacity-90'}\r\n                group inline-flex items-center rounded-md px-3 py-2 text-base font-medium text-gray-500 dark:text-white hover:text-opacity-100 focus:outline-none `}\r\n            >\r\n              <span>Customize</span>\r\n              <ChevronDownIcon\r\n                className={`${open ? '' : 'text-opacity-70'}\r\n                  ml-2 h-5 w-5 text-blue-700 transition duration-150 ease-in-out group-hover:text-opacity-80`}\r\n                aria-hidden=\"true\"\r\n              />\r\n            </Popover.Button>\r\n            <Transition\r\n              as={Fragment}\r\n              enter=\"transition ease-out duration-200\"\r\n              enterFrom=\"opacity-0 translate-y-1\"\r\n              enterTo=\"opacity-100 translate-y-0\"\r\n              leave=\"transition ease-in duration-150\"\r\n              leaveFrom=\"opacity-100 translate-y-0\"\r\n              leaveTo=\"opacity-0 translate-y-1\"\r\n            >\r\n              <Popover.Panel\r\n                tabIndex={0}\r\n                className=\"absolute z-10 mt-3 w-screen max-w-sm transform lg:max-w-4xl\"\r\n              >\r\n                <div className=\"overflow-hidden rounded-lg shadow-lg ring-1 ring-gray-500 dark:ring-black ring-opacity-5\">\r\n                  <div className=\"relative bg-white dark:bg-[#1D1C27] p-5 max-h-[85vh] text-gray-500 dark:text-white\">\r\n                    <div className=\"w-full\">\r\n                      <p className=\"text-xl mb-1\">Size Axis</p>\r\n                      <KeyValueSingleSelect\r\n                        metadataKeyValue={selectedSizeAxis}\r\n                        placeholder=\"Select\"\r\n                        countersConfigurations={countersConfigurations}\r\n                        selectedMetadataKeyValueChange={sizeAxisChanged}\r\n                      />\r\n                    </div>\r\n                    <div className=\"w-full mt-2\">\r\n                      <Counters\r\n                        countersConfigurations={countersConfigurations}\r\n                        calculationsConfigurations={calculationsConfigurations.filter(\r\n                          (calc) => calc.type === 'percentage'\r\n                        )}\r\n                        currentCounters={currentColorsAxis}\r\n                        countersChanged={colorsAxisChanged}\r\n                        addCounterText=\"Add axis\"\r\n                        title=\"Color Axis\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"w-full mt-2\">\r\n                      <Counters\r\n                        countersConfigurations={countersConfigurations}\r\n                        calculationsConfigurations={calculationsConfigurations}\r\n                        currentCounters={currentCounters}\r\n                        countersChanged={countersChanged}\r\n                        addCounterText=\"Add counter\"\r\n                        title=\"Counters\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"w-full mt-2\">\r\n                      <Labels\r\n                        currentLabels={selectedLabels}\r\n                        labelsOptions={labelsOptions.sort()}\r\n                        labelsChanged={labelsChanged}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Popover.Panel>\r\n            </Transition>\r\n          </>\r\n        )}\r\n      </Popover>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport {\r\n  format,\r\n  subMonths,\r\n  addMonths,\r\n  subYears,\r\n  addYears,\r\n  isEqual,\r\n  getDaysInMonth,\r\n  getDay,\r\n} from 'date-fns';\r\nimport React from 'react';\r\n\r\ntype DatepickerType = 'date' | 'month' | 'year';\r\n\r\nexport default function Datepicker({\r\n  selectedDate,\r\n  dateChanged,\r\n  placeholder = 'Select Date',\r\n}: {\r\n  selectedDate: Date | null;\r\n  placeholder?: string;\r\n  dateChanged: (date: Date) => void;\r\n}) {\r\n  const DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  const [dayCount, setDayCount] = useState<Array<number>>([]);\r\n  const [blankDays, setBlankDays] = useState<Array<number>>([]);\r\n  const [showDatepicker, setShowDatepicker] = useState(false);\r\n  const [datepickerHeaderDate, setDatepickerHeaderDate] = useState(new Date());\r\n  const [type, setType] = useState<DatepickerType>('date');\r\n\r\n  const decrement = () => {\r\n    switch (type) {\r\n      case 'date':\r\n        setDatepickerHeaderDate((prev) => subMonths(prev, 1));\r\n        break;\r\n      case 'month':\r\n        setDatepickerHeaderDate((prev) => subYears(prev, 1));\r\n        break;\r\n      case 'year':\r\n        setDatepickerHeaderDate((prev) => subMonths(prev, 1));\r\n        break;\r\n    }\r\n  };\r\n\r\n  const increment = () => {\r\n    switch (type) {\r\n      case 'date':\r\n        setDatepickerHeaderDate((prev) => addMonths(prev, 1));\r\n        break;\r\n      case 'month':\r\n        setDatepickerHeaderDate((prev) => addYears(prev, 1));\r\n        break;\r\n      case 'year':\r\n        setDatepickerHeaderDate((prev) => subMonths(prev, 1));\r\n        break;\r\n    }\r\n  };\r\n\r\n  const isToday = (date: number) =>\r\n    selectedDate &&\r\n    isEqual(\r\n      new Date(selectedDate.getFullYear(), selectedDate.getMonth(), date),\r\n      selectedDate\r\n    );\r\n\r\n  const setDateValue = (date: number) => () => {\r\n    dateChanged(\r\n      new Date(\r\n        datepickerHeaderDate.getFullYear(),\r\n        datepickerHeaderDate.getMonth(),\r\n        date\r\n      )\r\n    );\r\n    setShowDatepicker(false);\r\n  };\r\n\r\n  const getDayCount = (date: Date) => {\r\n    let daysInMonth = getDaysInMonth(date);\r\n\r\n    // find where to start calendar day of week\r\n    let dayOfWeek = getDay(new Date(date.getFullYear(), date.getMonth(), 1));\r\n    let blankDaysArray = [];\r\n    for (let i = 1; i <= dayOfWeek; i++) {\r\n      blankDaysArray.push(i);\r\n    }\r\n\r\n    let daysArray = [];\r\n    for (let i = 1; i <= daysInMonth; i++) {\r\n      daysArray.push(i);\r\n    }\r\n\r\n    setBlankDays(blankDaysArray);\r\n    setDayCount(daysArray);\r\n  };\r\n\r\n  const isSelectedMonth = (month: number) =>\r\n    selectedDate &&\r\n    isEqual(\r\n      new Date(selectedDate.getFullYear(), month, selectedDate.getDate()),\r\n      selectedDate\r\n    );\r\n\r\n  const setMonthValue = (month: number) => () => {\r\n    setDatepickerHeaderDate(\r\n      new Date(\r\n        datepickerHeaderDate.getFullYear(),\r\n        month,\r\n        datepickerHeaderDate.getDate()\r\n      )\r\n    );\r\n    setType('date');\r\n  };\r\n\r\n  const toggleDatepicker = () => setShowDatepicker((prev) => !prev);\r\n\r\n  const showMonthPicker = () => setType('month');\r\n\r\n  const showYearPicker = () => setType('date');\r\n\r\n  useEffect(() => {\r\n    getDayCount(datepickerHeaderDate);\r\n  }, [datepickerHeaderDate]);\r\n\r\n  return (\r\n    <div className=\"mb-5 w-64\">\r\n      <label\r\n        htmlFor=\"datepicker\"\r\n        className=\"font-bold mb-1 text-gray-500 dark:text-white block\"\r\n      >\r\n        {placeholder}\r\n      </label>\r\n      <div className=\"relative\">\r\n        <input type=\"hidden\" name=\"date\" />\r\n        <input\r\n          type=\"text\"\r\n          readOnly\r\n          className=\"cursor-pointer w-full pl-4 pr-10 py-3 leading-none rounded-lg shadow-sm focus:outline-none focus:shadow-outline bg-gray-300 dark:bg-[#2C293D] text-gray-600 dark:text-white font-medium\"\r\n          placeholder=\"Select date\"\r\n          value={selectedDate ? format(selectedDate, 'dd/MM/yyyy') : ''}\r\n          onClick={toggleDatepicker}\r\n        />\r\n        <div\r\n          className=\"cursor-pointer absolute top-0 right-0 px-3 py-2\"\r\n          onClick={toggleDatepicker}\r\n        >\r\n          <svg\r\n            className=\"h-6 w-6 text-gray-600 dark:text-gray-300\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"\r\n            />\r\n          </svg>\r\n        </div>\r\n        {showDatepicker && (\r\n          <div\r\n            className=\"bg-gray-300 dark:bg-[#272535] mt-1 rounded-lg shadow p-4 fixed z-10 overflow-auto\"\r\n            style={{ width: '16rem' }}\r\n          >\r\n            <div className=\"flex justify-between items-center mb-2\">\r\n              <div>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"transition ease-in-out duration-100 inline-flex cursor-pointer hover:bg-gray-400 hover:text-gray-900 dark:hover:bg-gray-200 dark:hover:text-gray-700 p-1 rounded-full\"\r\n                  onClick={decrement}\r\n                >\r\n                  <svg\r\n                    className=\"h-6 w-6 text-gray-500 dark:text-gray-300 hover:text-gray-700 inline-flex\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={2}\r\n                      d=\"M15 19l-7-7 7-7\"\r\n                    />\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n              {type === 'date' && (\r\n                <div\r\n                  onClick={showMonthPicker}\r\n                  className=\"flex-grow p-1 text-lg font-bold text-gray-400 dark:text-gray-200 cursor-pointer hover:bg-gray-400 dark:hover:bg-gray-200 hover:text-gray-700 rounded-lg\"\r\n                >\r\n                  <p className=\"text-center\">\r\n                    {format(datepickerHeaderDate, 'MMMM')}\r\n                  </p>\r\n                </div>\r\n              )}\r\n              <div\r\n                onClick={showYearPicker}\r\n                className=\"flex-grow p-1 text-lg font-bold text-gray-400 dark:text-gray-200 cursor-pointer hover:bg-gray-400 dark:hover:bg-gray-200 hover:text-gray-700 rounded-lg\"\r\n              >\r\n                <p className=\"text-center\">\r\n                  {format(datepickerHeaderDate, 'yyyy')}\r\n                </p>\r\n              </div>\r\n              <div>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"transition ease-in-out duration-100 inline-flex cursor-pointer hover:bg-gray-400 dark:hover:bg-gray-200 hover:text-gray-700 p-1 rounded-full\"\r\n                  onClick={increment}\r\n                >\r\n                  <svg\r\n                    className=\"h-6 w-6 text-gray-500 dark:text-gray-300 hover:text-gray-700 inline-flex\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={2}\r\n                      d=\"M9 5l7 7-7 7\"\r\n                    />\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n            </div>\r\n            {type === 'date' && (\r\n              <>\r\n                <div className=\"flex flex-wrap mb-3 -mx-1\">\r\n                  {DAYS.map((day, i) => (\r\n                    <div key={i} style={{ width: '14.26%' }} className=\"px-1\">\r\n                      <div className=\"text-gray-400 font-medium text-center text-xs\">\r\n                        {day}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                <div className=\"flex flex-wrap -mx-1\">\r\n                  {blankDays.map((_, i) => (\r\n                    <div\r\n                      key={i}\r\n                      style={{ width: '14.26%' }}\r\n                      className=\"text-center border p-1 border-transparent text-sm\"\r\n                    ></div>\r\n                  ))}\r\n                  {dayCount.map((d, i) => (\r\n                    <div\r\n                      key={i}\r\n                      style={{ width: '14.26%' }}\r\n                      className=\"px-1 mb-1\"\r\n                    >\r\n                      <div\r\n                        onClick={setDateValue(d)}\r\n                        className={`cursor-pointer text-center text-sm rounded-full leading-loose transition ease-in-out duration-100 ${\r\n                          isToday(d)\r\n                            ? 'bg-blue-500 text-gray-300 dark:text-white'\r\n                            : 'text-gray-400 dark:text-gray-200 hover:bg-blue-200'\r\n                        }`}\r\n                      >\r\n                        {d}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </>\r\n            )}\r\n            {type === 'month' && (\r\n              <div className=\"flex flex-wrap -mx-1\">\r\n                {Array(12)\r\n                  .fill(null)\r\n                  .map((_, i) => (\r\n                    <div\r\n                      key={i}\r\n                      onClick={setMonthValue(i)}\r\n                      style={{ width: '25%' }}\r\n                    >\r\n                      <div\r\n                        className={`cursor-pointer p-5 font-semibold text-center text-sm rounded-lg hover:bg-gray-200 hover:text-gray-700 ${\r\n                          isSelectedMonth(i)\r\n                            ? 'bg-blue-500 text-gray-500 dark:text-white'\r\n                            : 'text-gray-600 dark:text-gray-200 hover:bg-blue-200'\r\n                        }`}\r\n                      >\r\n                        {format(\r\n                          new Date(\r\n                            datepickerHeaderDate.getFullYear(),\r\n                            i,\r\n                            datepickerHeaderDate.getDate()\r\n                          ),\r\n                          'MMM'\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            )}{' '}\r\n            {/* {type === \"year\" && (\r\n                      <Datepicker\r\n                        datepickerHeaderDate={datepickerHeaderDate}\r\n                        selectedDate={selectedDate}\r\n                        setSelectedDate={setSelectedDate}\r\n                        closeDatepicker={() => setShowDatepicker(false)}\r\n                      />\r\n                    )} */}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { Popover, Transition } from '@headlessui/react';\r\nimport {\r\n  CalendarDaysIcon,\r\n  ChevronDownIcon,\r\n  XMarkIcon,\r\n} from '@heroicons/react/20/solid';\r\nimport React, { Fragment } from 'react';\r\nimport Datepicker from './CustomizeTab/Datepicker';\r\n\r\nexport default function DatesFilters({\r\n  fromDate,\r\n  toDate,\r\n  fromDateChanged,\r\n  toDateChanged,\r\n  trendPeriods,\r\n  trendPeriodsChanged,\r\n}: {\r\n  fromDate: Date | null;\r\n  toDate: Date | null;\r\n  fromDateChanged: (date: Date | null) => void;\r\n  toDateChanged: (date: Date | null) => void;\r\n  trendPeriods?: number;\r\n  trendPeriodsChanged?: (index: number) => void;\r\n}) {\r\n  return (\r\n    <Popover className=\"relative\">\r\n      {({ open }) => (\r\n        <>\r\n          <Popover.Button\r\n            className={`\r\n                ${open ? '' : 'text-opacity-90'}\r\n                group inline-flex items-center rounded-md px-3 py-2 text-base font-medium text-gray-500 dark:text-white hover:text-opacity-100 focus:outline-none `}\r\n          >\r\n            <CalendarDaysIcon className=\"h-7 w-7\" />\r\n            <ChevronDownIcon\r\n              className={`${open ? '' : 'text-opacity-70'}\r\n                  ml-2 h-5 w-5 text-blue-700 transition duration-150 ease-in-out group-hover:text-opacity-80`}\r\n              aria-hidden=\"true\"\r\n            />\r\n          </Popover.Button>\r\n          <Transition\r\n            as={Fragment}\r\n            enter=\"transition ease-out duration-200\"\r\n            enterFrom=\"opacity-0 translate-y-1\"\r\n            enterTo=\"opacity-100 translate-y-0\"\r\n            leave=\"transition ease-in duration-150\"\r\n            leaveFrom=\"opacity-100 translate-y-0\"\r\n            leaveTo=\"opacity-0 translate-y-1\"\r\n          >\r\n            <Popover.Panel\r\n              tabIndex={0}\r\n              className=\"absolute z-10 mt-3 transform max-w-md\"\r\n            >\r\n              <div className=\"overflow-hidden rounded-lg shadow-lg ring-1 ring-gray-500 dark:ring-black ring-opacity-5\">\r\n                <div className=\"relative bg-white dark:bg-[#272535] p-5\">\r\n                  <div className=\"w-full\">\r\n                    <div className=\"flex flex-wrap w-full mt-3 justify-between\">\r\n                      <div className=\"flex items-center\">\r\n                        <Datepicker\r\n                          selectedDate={fromDate}\r\n                          dateChanged={fromDateChanged}\r\n                          placeholder=\"From\"\r\n                        />\r\n                        <div className=\"ml-1\">\r\n                          <button\r\n                            type=\"button\"\r\n                            onClick={() => fromDateChanged(null)}\r\n                          >\r\n                            <XMarkIcon className=\"h-4 w-4 text-gray-500 dark:text-gray-200 hover:scale-125 transition duration-100 ease-linear\" />\r\n                            <span className=\"sr-only\">Clear dates filters</span>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex items-center\">\r\n                        <Datepicker\r\n                          selectedDate={toDate}\r\n                          dateChanged={toDateChanged}\r\n                          placeholder=\"To\"\r\n                        />\r\n                        <div className=\"ml-1\">\r\n                          <button\r\n                            type=\"button\"\r\n                            onClick={() => toDateChanged(null)}\r\n                          >\r\n                            <XMarkIcon className=\"h-4 w-4 text-gray-200 hover:scale-125 transition duration-100 ease-linear\" />\r\n                            <span className=\"sr-only\">Clear dates filters</span>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                      {trendPeriods !== undefined && trendPeriodsChanged && (\r\n                        <div className=\"flex items-center\">\r\n                          <div>\r\n                            <label\r\n                              htmlFor=\"small-input\"\r\n                              className=\"block mb-2 text-sm font-medium text-gray-500 dark:text-gray-300\"\r\n                            >\r\n                              Trend periods amount\r\n                            </label>\r\n                            <input\r\n                              type=\"number\"\r\n                              id=\"small-input\"\r\n                              onChange={(e) =>\r\n                                trendPeriodsChanged(Number(e.target.value))\r\n                              }\r\n                              value={trendPeriods}\r\n                              className=\"block p-2 w-1/2 rounded-lg border sm:text-xs bg-gray-300 dark:bg-gray-700 border-gray-300 dark:border-gray-600 placeholder-gray-700 dark:placeholder-gray-400 text-gray-500 dark:text-white focus:ring-blue-500 focus:border-blue-500\"\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Popover.Panel>\r\n          </Transition>\r\n        </>\r\n      )}\r\n    </Popover>\r\n  );\r\n}\r\n","import { Dialog, RadioGroup, Switch, Transition } from '@headlessui/react';\r\nimport React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport { NodeType } from '../types/componentsInputs';\r\n\r\nexport default function ItemActions({\r\n  node,\r\n  searchSimilarClusters,\r\n  splitPhrase,\r\n  mergeClusters,\r\n  translationEnabled,\r\n}: {\r\n  node: { type: NodeType; id: string; text: string } | null;\r\n  searchSimilarClusters?: (\r\n    text: string,\r\n    controller: AbortController\r\n  ) => Promise<\r\n    { id: string; text: string; translation: string | null | undefined }[]\r\n  >;\r\n  splitPhrase?: (\r\n    phraseId: string,\r\n    controller: AbortController\r\n  ) => Promise<{ status: 'Success' | 'error'; message: string }>;\r\n  mergeClusters?: (\r\n    source: string[],\r\n    destination: string,\r\n    controller: AbortController\r\n  ) => Promise<{ status: 'Success' | 'error'; message: string }>;\r\n  translationEnabled: boolean;\r\n}) {\r\n  const controller = useRef(null as AbortController | null);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [action, setAction] = useState(null as 'Split' | 'Merge' | null);\r\n  const [similarClusters, setSimilarClusters] = useState(\r\n    null as\r\n      | { id: string; text: string; translation: string | null | undefined }[]\r\n      | null\r\n  );\r\n  const [selectedClusters, setSelectedClusters] = useState(\r\n    null as string[] | null\r\n  );\r\n  const [searchText, setSearchText] = useState(null as string | null);\r\n  const [error, setError] = useState(null as string | null);\r\n  const [mergeTo, setMergeTo] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!node || !searchSimilarClusters) return;\r\n    if (node.type === 'Cluster') {\r\n      setAction('Merge');\r\n      setSearchText('');\r\n    } else if (node.type === 'Phrase') {\r\n      setAction('Split');\r\n    }\r\n    setIsOpen(true);\r\n  }, [node]);\r\n\r\n  useEffect(() => {\r\n    if (controller.current && !isOpen) controller.current.abort();\r\n    if (!isOpen) {\r\n      setError(null);\r\n      setLoading(false);\r\n      setAction(null);\r\n      setSimilarClusters(null);\r\n      setSelectedClusters(null);\r\n      setSearchText(null);\r\n      controller.current = new AbortController();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  useEffect(() => {\r\n    if (searchText === null || !node || !searchSimilarClusters) return;\r\n    const fetchData = async (controller: AbortController) => {\r\n      try {\r\n        setLoading(true);\r\n        const res = await searchSimilarClusters(\r\n          searchText === '' ? node.text : searchText,\r\n          controller\r\n        );\r\n        setSimilarClusters(res);\r\n      } catch (e) {\r\n        console.error(e);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    const currentController = new AbortController();\r\n    fetchData(currentController).catch((e) => {\r\n      console.error(e);\r\n    });\r\n\r\n    return () => {\r\n      currentController.abort();\r\n    };\r\n  }, [searchText, node, searchSimilarClusters]);\r\n\r\n  function closeModal() {\r\n    setIsOpen(false);\r\n    setSelectedClusters(null);\r\n    setMergeTo(false);\r\n    setSearchText(null);\r\n    setError(null);\r\n    setLoading(false);\r\n    setSimilarClusters(null);\r\n    setAction(null);\r\n  }\r\n\r\n  async function invokeAction() {\r\n    if (!splitPhrase || !mergeClusters || !controller.current || !node)\r\n      return closeModal();\r\n    setError(null);\r\n    setLoading(true);\r\n    if (action === 'Split') {\r\n      const res = await splitPhrase(node.id, controller.current);\r\n      if (res.message) {\r\n        setError(res.message);\r\n      } else {\r\n        closeModal();\r\n      }\r\n    } else {\r\n      const firstSelectedCluster = selectedClusters?.at(0);\r\n      if (\r\n        selectedClusters &&\r\n        selectedClusters.length > 0 &&\r\n        firstSelectedCluster\r\n      ) {\r\n        let res;\r\n        if (mergeTo) {\r\n          res = await mergeClusters(\r\n            [node.id],\r\n            firstSelectedCluster,\r\n            controller.current\r\n          );\r\n        } else {\r\n          res = await mergeClusters(\r\n            selectedClusters,\r\n            node.id,\r\n            controller.current\r\n          );\r\n        }\r\n\r\n        if (res && res.message) {\r\n          setError(res.message);\r\n        } else {\r\n          closeModal();\r\n        }\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  function clusterSelected(clusterId: string, selected: boolean) {\r\n    if (selected)\r\n      return setSelectedClusters(\r\n        (current) => current?.filter((c) => c !== clusterId) ?? []\r\n      );\r\n\r\n    if (mergeTo) {\r\n      return setSelectedClusters([clusterId]);\r\n    }\r\n\r\n    return setSelectedClusters((selected) => {\r\n      return [...(selected ?? []), clusterId];\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Transition appear show={isOpen} as={Fragment}>\r\n      <Dialog as=\"div\" className=\"relative z-10\" onClose={closeModal}>\r\n        <Transition.Child\r\n          as={Fragment}\r\n          enter=\"ease-out duration-300\"\r\n          enterFrom=\"opacity-0\"\r\n          enterTo=\"opacity-100\"\r\n          leave=\"ease-in duration-200\"\r\n          leaveFrom=\"opacity-100\"\r\n          leaveTo=\"opacity-0\"\r\n        >\r\n          <div className=\"fixed inset-0 bg-opacity-25\" />\r\n        </Transition.Child>\r\n\r\n        <div className=\"fixed inset-0 overflow-y-auto\">\r\n          <div className=\"flex min-h-full items-center justify-center p-4 text-center\">\r\n            <Transition.Child\r\n              as={Fragment}\r\n              enter=\"ease-out duration-300\"\r\n              enterFrom=\"opacity-0 scale-95\"\r\n              enterTo=\"opacity-100 scale-100\"\r\n              leave=\"ease-in duration-200\"\r\n              leaveFrom=\"opacity-100 scale-100\"\r\n              leaveTo=\"opacity-0 scale-95\"\r\n            >\r\n              <Dialog.Panel className=\"w-full max-w-md transform overflow-hidden rounded-2xl bg-white dark:bg-[#272535] p-6 text-left align-middle shadow-xl transition-all\">\r\n                <Dialog.Title\r\n                  as=\"h3\"\r\n                  className=\"text-center text-lg font-medium leading-6 text-gray-900 dark:text-white\"\r\n                >\r\n                  {action === 'Merge' ? (\r\n                    <div>Merging:</div>\r\n                  ) : (\r\n                    <span>Split to a new cluster:</span>\r\n                  )}\r\n                  <span className=\"group relative flex w-full\">\r\n                    \"<span className=\"truncate\">{node?.text}</span>\"\r\n                    <span className=\"absolute hidden group-hover:flex -left-5 -translate-y-full px-2 py-1 bg-gray-700 rounded-lg text-center text-white text-sm after:content-[''] after:absolute after:left-1/2 after:top-[100%] after:-translate-x-1/2 after:border-8 after:border-x-transparent after:border-b-transparent after:border-t-gray-700\">\r\n                      {node?.text}\r\n                    </span>\r\n                  </span>\r\n                </Dialog.Title>\r\n                {error && (\r\n                  <p\r\n                    id=\"filled_error_help\"\r\n                    className=\"mt-2 text-xs text-red-600 dark:text-red-400\"\r\n                  >\r\n                    <span className=\"font-medium\">Oh, snapp!</span> {error}\r\n                  </p>\r\n                )}\r\n                {searchText !== null ? (\r\n                  <div>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={searchText}\r\n                      onChange={(e) => setSearchText(e.target.value)}\r\n                      id=\"search\"\r\n                      className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\"\r\n                      placeholder=\"Search for clusters\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                ) : null}\r\n                {action === 'Merge' ? (\r\n                  <div className=\"flex w-full mt-1 items-center align-middle justify-center\">\r\n                    <span\r\n                      className={`mr-1 ${\r\n                        mergeTo ? 'text-gray-400 ' : 'text-white'\r\n                      }`}\r\n                    >\r\n                      Merge From\r\n                    </span>\r\n                    <Switch\r\n                      checked={mergeTo}\r\n                      onChange={() =>\r\n                        setMergeTo((state) => {\r\n                          setSelectedClusters([]);\r\n                          return !state;\r\n                        })\r\n                      }\r\n                      className={`${mergeTo ? 'bg-teal-900' : 'bg-teal-700'}\r\n          relative inline-flex h-[38px] w-[74px] shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus-visible:ring-2  focus-visible:ring-white focus-visible:ring-opacity-75`}\r\n                    >\r\n                      <span className=\"sr-only\">Use setting</span>\r\n                      <span\r\n                        aria-hidden=\"true\"\r\n                        className={`${\r\n                          mergeTo ? 'translate-x-9' : 'translate-x-0'\r\n                        }\r\n            pointer-events-none inline-block h-[34px] w-[34px] transform rounded-full bg-white shadow-lg ring-0 transition duration-200 ease-in-out`}\r\n                      />\r\n                    </Switch>\r\n                    <span\r\n                      className={`ml-1 ${\r\n                        mergeTo ? 'text-white ' : 'text-gray-400'\r\n                      }`}\r\n                    >\r\n                      Merge To\r\n                    </span>\r\n                  </div>\r\n                ) : null}\r\n                {loading ? (\r\n                  <div className=\"grow w-full justify-center items-center flex mt-2\">\r\n                    <div className=\"text-center\">\r\n                      <div role=\"status\">\r\n                        <svg\r\n                          className=\"inline mr-2 w-8 h-8 text-gray-200 animate-spin fill-blue-600\"\r\n                          viewBox=\"0 0 100 101\"\r\n                          fill=\"none\"\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                          <path\r\n                            d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\r\n                            fill=\"currentColor\"\r\n                          />\r\n                          <path\r\n                            d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\r\n                            fill=\"currentFill\"\r\n                          />\r\n                        </svg>\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  similarClusters && (\r\n                    <div className=\"overflow-y-auto max-h-64 mt-2\">\r\n                      <ClustersList\r\n                        clusters={similarClusters.filter(\r\n                          (c) => c.id.toString() !== node?.id\r\n                        )}\r\n                        selected={selectedClusters}\r\n                        clusterSelected={clusterSelected}\r\n                        translationEnabled={translationEnabled}\r\n                      />\r\n                    </div>\r\n                  )\r\n                )}\r\n\r\n                <div className=\"mt-4 flex justify-between\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"text-center w-1/3 rounded-md border border-transparent bg-green-100 px-4 py-2 text-sm font-medium text-green-900 hover:bg-green-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-green-500 focus-visible:ring-offset-2\"\r\n                    onClick={invokeAction}\r\n                    disabled={\r\n                      loading || (action === 'Merge' && !selectedClusters)\r\n                    }\r\n                  >\r\n                    {action}\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"text-center w-1/3 rounded-md border border-transparent bg-blue-100 px-4 py-2 text-sm font-medium text-blue-900 hover:bg-blue-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2\"\r\n                    onClick={closeModal}\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </div>\r\n              </Dialog.Panel>\r\n            </Transition.Child>\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    </Transition>\r\n  );\r\n}\r\n\r\nfunction ClustersList({\r\n  clusters,\r\n  selected,\r\n  clusterSelected,\r\n  translationEnabled,\r\n}: {\r\n  clusters: {\r\n    id: string;\r\n    text: string;\r\n    translation: string | null | undefined;\r\n  }[];\r\n  selected: string[] | null;\r\n  clusterSelected: (cluster: string, selected: boolean) => void;\r\n  translationEnabled: boolean;\r\n}) {\r\n  return (\r\n    <div className=\"w-full pr-1 py-2\">\r\n      <div className=\"mx-auto w-full max-w-md\">\r\n        <RadioGroup>\r\n          <RadioGroup.Label className=\"sr-only\">\r\n            Select Destination Cluster\r\n          </RadioGroup.Label>\r\n          <div className=\"space-y-2\">\r\n            {clusters.map((cluster) => {\r\n              const checked = selected?.some((c) => c === cluster.id) ?? false;\r\n              return (\r\n                <RadioGroup.Option\r\n                  key={cluster.id}\r\n                  value={cluster}\r\n                  onClick={() => clusterSelected(cluster.id, checked)}\r\n                  className={`\r\n                  ${\r\n                    checked ? 'bg-sky-900 bg-opacity-75 text-white' : 'bg-white'\r\n                  }\r\n                    relative flex cursor-pointer rounded-lg px-5 py-4 shadow-md focus:outline-none`}\r\n                >\r\n                  <div className=\"flex w-full items-center justify-between\">\r\n                    <div className=\"flex items-center\">\r\n                      <div className=\"text-sm\">\r\n                        <RadioGroup.Label\r\n                          as=\"p\"\r\n                          className={`font-medium  ${\r\n                            checked ? 'text-white' : 'text-gray-900'\r\n                          }`}\r\n                        >\r\n                          {translationEnabled && cluster.translation\r\n                            ? cluster.translation\r\n                            : cluster.text}\r\n                        </RadioGroup.Label>\r\n                      </div>\r\n                    </div>\r\n                    {checked && (\r\n                      <div className=\"shrink-0 text-white\">\r\n                        <CheckIcon className=\"h-6 w-6\" />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </RadioGroup.Option>\r\n              );\r\n            })}\r\n          </div>\r\n        </RadioGroup>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CheckIcon(\r\n  props: JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>\r\n) {\r\n  return (\r\n    <svg viewBox=\"0 0 24 24\" fill=\"none\" {...props}>\r\n      <circle cx={12} cy={12} r={12} fill=\"#fff\" opacity=\"0.2\" />\r\n      <path\r\n        d=\"M7 13l3 3 7-7\"\r\n        stroke=\"#fff\"\r\n        strokeWidth={1.5}\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n","import { CountersConfigurations } from '../types/customizeBarTypes';\r\nimport {\r\n  FaceFrownIcon,\r\n  FaceSmileIcon,\r\n  UserIcon,\r\n  HandThumbDownIcon,\r\n  HandThumbUpIcon,\r\n  GlobeAltIcon,\r\n  BuildingOffice2Icon,\r\n  MapPinIcon,\r\n  UsersIcon,\r\n  ScaleIcon,\r\n  CalendarIcon,\r\n  HeartIcon,\r\n  KeyIcon,\r\n} from '@heroicons/react/24/outline';\r\nimport React from 'react';\r\nimport { FilmIcon, HashtagIcon } from '@heroicons/react/20/solid';\r\n\r\nexport const defaultCountersConfigurations: CountersConfigurations = {\r\n  signals: {\r\n    display: {\r\n      color: 'white',\r\n      icon: (\r\n        <span className=\"flex flex-col\" style={{ height: '1em' }}>\r\n          <HandThumbUpIcon />\r\n          <HandThumbDownIcon />\r\n        </span>\r\n      ),\r\n    },\r\n    items: [\r\n      {\r\n        label: 'positive',\r\n        display: {\r\n          color: 'green',\r\n          icon: <FaceSmileIcon />,\r\n        },\r\n        members: [\r\n          { metadataName: 'emotion', values: ['happiness'] },\r\n          { metadataName: 'sentiment', values: ['POS'] },\r\n        ],\r\n        isGroup: true,\r\n      },\r\n      {\r\n        label: 'negative',\r\n        display: {\r\n          color: 'red',\r\n          icon: <FaceFrownIcon />,\r\n        },\r\n        members: [\r\n          { metadataName: 'emotion', values: ['anger', 'sadness'] },\r\n          { metadataName: 'sentiment', values: ['NEG'] },\r\n        ],\r\n        isGroup: true,\r\n      },\r\n    ],\r\n  },\r\n  person: {\r\n    display: {\r\n      color: 'white',\r\n      icon: <UserIcon />,\r\n    },\r\n  },\r\n  topic: {\r\n    display: {\r\n      color: 'white',\r\n      icon: <HashtagIcon />,\r\n    },\r\n  },\r\n  keyword: {\r\n    display: {\r\n      color: 'white',\r\n      icon: <KeyIcon />,\r\n    },\r\n  },\r\n  geo: {\r\n    display: {\r\n      color: 'white',\r\n      icon: <GlobeAltIcon />,\r\n    },\r\n  },\r\n  org: {\r\n    display: {\r\n      color: 'white',\r\n      icon: <BuildingOffice2Icon />,\r\n    },\r\n  },\r\n  location: {\r\n    display: {\r\n      color: 'white',\r\n      icon: <MapPinIcon />,\r\n    },\r\n  },\r\n  groups: {\r\n    display: {\r\n      color: 'white',\r\n      icon: <UsersIcon />,\r\n    },\r\n  },\r\n  art: {\r\n    display: {\r\n      color: 'white',\r\n      icon: <FilmIcon />,\r\n    },\r\n  },\r\n  law: {\r\n    display: {\r\n      color: 'white',\r\n      icon: <ScaleIcon />,\r\n    },\r\n  },\r\n  event: {\r\n    display: {\r\n      color: 'white',\r\n      icon: <CalendarIcon />,\r\n    },\r\n  },\r\n  sentiment: {\r\n    display: {\r\n      color: 'white',\r\n      icon: (\r\n        <span className=\"flex flex-col\" style={{ height: '1em' }}>\r\n          <HandThumbUpIcon />\r\n          <HandThumbDownIcon />\r\n        </span>\r\n      ),\r\n    },\r\n    items: [\r\n      {\r\n        label: 'POS',\r\n        display: {\r\n          color: 'green',\r\n          icon: <HandThumbUpIcon />,\r\n        },\r\n      },\r\n      {\r\n        label: 'NEG',\r\n        display: {\r\n          color: 'red',\r\n          icon: <HandThumbDownIcon />,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  emotion: {\r\n    display: {\r\n      color: 'white',\r\n      icon: <HeartIcon />,\r\n    },\r\n    items: [\r\n      {\r\n        label: 'positive',\r\n        display: {\r\n          color: 'green',\r\n          icon: <FaceSmileIcon />,\r\n        },\r\n        members: [{ values: ['happiness'] }],\r\n        isGroup: true,\r\n      },\r\n      {\r\n        label: 'negative',\r\n        display: {\r\n          color: 'red',\r\n          icon: <FaceFrownIcon />,\r\n        },\r\n        members: [{ values: ['anger', 'sadness'] }],\r\n        isGroup: true,\r\n      },\r\n      {\r\n        label: 'happiness',\r\n        display: {\r\n          color: 'green',\r\n          icon: <FaceSmileIcon />,\r\n        },\r\n      },\r\n      {\r\n        label: 'surprise',\r\n        display: {\r\n          color: 'green',\r\n          icon: <FaceSmileIcon />,\r\n        },\r\n      },\r\n      {\r\n        label: 'anger',\r\n        display: {\r\n          color: 'red',\r\n          icon: <FaceFrownIcon />,\r\n        },\r\n      },\r\n      {\r\n        label: 'sadness',\r\n        display: {\r\n          color: 'red',\r\n          icon: <FaceFrownIcon />,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  score: {\r\n    display: {\r\n      color: 'white',\r\n      icon: (\r\n        <span className=\"flex flex-col\" style={{ height: '1em' }}>\r\n          <HandThumbUpIcon />\r\n          <HandThumbDownIcon />\r\n        </span>\r\n      ),\r\n    },\r\n    items: [\r\n      {\r\n        label: '2',\r\n        display: {\r\n          color: 'green',\r\n          icon: <HandThumbUpIcon />,\r\n        },\r\n      },\r\n      {\r\n        label: '1',\r\n        display: {\r\n          color: 'green',\r\n          icon: <HandThumbUpIcon />,\r\n        },\r\n      },\r\n      {\r\n        label: '-1',\r\n        display: {\r\n          color: 'red',\r\n          icon: <HandThumbDownIcon />,\r\n        },\r\n      },\r\n      {\r\n        label: '-2',\r\n        display: {\r\n          color: 'red',\r\n          icon: <HandThumbDownIcon />,\r\n        },\r\n      },\r\n      {\r\n        label: 'positive',\r\n        display: {\r\n          color: 'green',\r\n          icon: <HandThumbUpIcon />,\r\n        },\r\n        members: [{ values: ['1', '2'] }],\r\n        isGroup: true,\r\n      },\r\n      {\r\n        label: 'positive',\r\n        display: {\r\n          color: 'red',\r\n          icon: <HandThumbDownIcon />,\r\n        },\r\n        members: [{ values: ['-1', '-2'] }],\r\n        isGroup: true,\r\n      },\r\n    ],\r\n  },\r\n};\r\n","import React from 'react';\r\n\r\nexport function ColorsAxis({\r\n  width,\r\n  colorsConfig,\r\n}: {\r\n  width: number;\r\n  colorsConfig: string[];\r\n}) {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: width,\r\n        opacity: 0.9,\r\n      }}\r\n      className=\"h-full fixed flex flex-col\"\r\n    >\r\n      {colorsConfig.map((colorConfig, i) => (\r\n        <div\r\n          key={i}\r\n          className=\"w-full\"\r\n          style={{\r\n            background: colorConfig,\r\n            height: '4px',\r\n            marginTop: i === 0 ? 'auto' : '1px',\r\n          }}\r\n        ></div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import { EllipsisHorizontalIcon } from '@heroicons/react/24/outline';\r\nimport { extent, scaleBand, scaleLinear } from 'd3';\r\nimport React, { FC, useEffect, useMemo, useState } from 'react';\r\nimport { ColorsAxis } from '../common/components/CountersLabels/ColorsAxis';\r\nimport CounterDisplay from '../common/components/CountersLabels/CounterDisplay';\r\nimport MaxLabelDisplay from '../common/components/CountersLabels/MaxLabelDisplay';\r\nimport { CUSTOM_METADATA_KEY } from '../common/configurations/commonConfigurations';\r\nimport { BarChartProps } from '../common/types/componentsInputs';\r\nimport { totalSumCalculation } from '../common/utils/countersUtils';\r\nimport { getBackgroundColorLayers } from '../common/utils/displayUtils';\r\n\r\nconst BAR_PADDING = 0.1;\r\n\r\nexport const BarChart: FC<BarChartProps> = ({\r\n  dataNodes,\r\n  height,\r\n  width,\r\n  nodeClicked,\r\n  barColor,\r\n  fontFamily,\r\n  textColor,\r\n  counters,\r\n  countersConfiguration,\r\n  labels,\r\n  labelClicked,\r\n  sizeAxis,\r\n  colorAxis,\r\n  translate,\r\n  totalItems,\r\n  nodeActionsClicked,\r\n}) => {\r\n  const [actionsVisible, setActionsVisible] = useState(null as number | null);\r\n  const barsHeight = dataNodes.length * 40;\r\n\r\n  const [groups, setGroups] = useState([] as string[]);\r\n\r\n  useEffect(() => {\r\n    // Y axis is for groups since the barplot is horizontal\r\n    setGroups(\r\n      dataNodes\r\n        .sort((a, b) =>\r\n          sizeAxis?.key === CUSTOM_METADATA_KEY\r\n            ? b.amount - a.amount\r\n            : totalSumCalculation(\r\n                sizeAxis,\r\n                b.metadata,\r\n                b.trends,\r\n                countersConfiguration,\r\n                totalItems\r\n              ).result -\r\n              totalSumCalculation(\r\n                sizeAxis,\r\n                a.metadata,\r\n                b.trends,\r\n                countersConfiguration,\r\n                totalItems\r\n              ).result\r\n        )\r\n        .map((d) => d.text ?? '')\r\n    );\r\n  }, [dataNodes, sizeAxis]);\r\n\r\n  const yScale = useMemo(() => {\r\n    return scaleBand()\r\n      .domain(groups)\r\n      .range([0, barsHeight])\r\n      .padding(BAR_PADDING);\r\n  }, [height, groups]);\r\n\r\n  const max = useMemo(\r\n    () =>\r\n      extent(\r\n        dataNodes.map((d) =>\r\n          sizeAxis?.key === CUSTOM_METADATA_KEY\r\n            ? d.amount\r\n            : totalSumCalculation(\r\n                sizeAxis,\r\n                d.metadata,\r\n                d.trends,\r\n                countersConfiguration,\r\n                totalItems\r\n              ).result\r\n        )\r\n      )[1] ?? 20,\r\n    [dataNodes, sizeAxis]\r\n  );\r\n\r\n  // X axis\r\n  const xScale = useMemo(() => {\r\n    return scaleLinear()\r\n      .domain([0, max || 10])\r\n      .range([0, width]);\r\n  }, [width, max]);\r\n\r\n  // Build the shapes\r\n  const allShapes = dataNodes.map((d, i) => {\r\n    const x = 24;\r\n    const y = yScale(d.text ?? '') ?? 0;\r\n    const result =\r\n      sizeAxis?.key === CUSTOM_METADATA_KEY\r\n        ? d.amount\r\n        : totalSumCalculation(\r\n            sizeAxis,\r\n            d.metadata,\r\n            d.trends,\r\n            countersConfiguration,\r\n            totalItems\r\n          ).result;\r\n    const xWidth =\r\n      xScale(result === max ? result : Math.min(max - 1, result + max * 0.1)) -\r\n      24;\r\n    const barWidth = xWidth > 0 ? xWidth : 0;\r\n    const barHeight = 36;\r\n    const opacity = 1;\r\n    const fill = barColor;\r\n    const fillOpacity = 1;\r\n    const rx = 1;\r\n\r\n    const colorsConfig = getBackgroundColorLayers(\r\n      colorAxis,\r\n      d.metadata,\r\n      d.trends,\r\n      countersConfiguration,\r\n      totalItems\r\n    );\r\n\r\n    return (\r\n      <g key={i}>\r\n        <rect\r\n          x={x}\r\n          y={y}\r\n          width={barWidth}\r\n          height={barHeight}\r\n          opacity={opacity}\r\n          fill={fill}\r\n          fillOpacity={fillOpacity}\r\n          rx={rx}\r\n        />\r\n        <foreignObject\r\n          x={x}\r\n          y={y}\r\n          width={width}\r\n          height={barHeight}\r\n          opacity={opacity}\r\n          fill={fill}\r\n          fillOpacity={fillOpacity}\r\n          rx={rx}\r\n        >\r\n          <div\r\n            className=\"h-full w-full\"\r\n            onMouseEnter={() => {\r\n              nodeActionsClicked(d);\r\n              setActionsVisible(i);\r\n            }}\r\n            onMouseLeave={() => {\r\n              setActionsVisible(null);\r\n            }}\r\n          >\r\n            <ColorsAxis width={barWidth} colorsConfig={colorsConfig} />\r\n            <div\r\n              className=\"flex h-full w-full items-center ml-1 relative text-gray-500\"\r\n              style={{\r\n                fontFamily: fontFamily,\r\n                fontWeight: 300,\r\n                fontStyle: 'normal',\r\n                color: textColor,\r\n                fontSize: '14px',\r\n              }}\r\n            >\r\n              <span className=\"flex items-center max-w-[30%] truncate mr-2\">\r\n                {counters\r\n                  .filter((counter) => counter.metadataKeyValue !== null)\r\n                  .map((counter, i) => (\r\n                    <div key={i} className=\"ml-1\">\r\n                      <CounterDisplay\r\n                        counter={counter}\r\n                        countersConfiguration={countersConfiguration}\r\n                        metadata={d.metadata}\r\n                        trends={d.trends}\r\n                        width=\"6ch\"\r\n                        totalItems={totalItems}\r\n                      />\r\n                    </div>\r\n                  ))}\r\n              </span>\r\n              <span\r\n                className=\"truncate w-3/6 hover:text-gray-400 dark:hover:text-gray-300 hover:cursor-pointer\"\r\n                onClick={() => nodeClicked(d)}\r\n                dir=\"auto\"\r\n              >\r\n                {translate &&\r\n                d.item_translated_text !== undefined &&\r\n                d.item_translated_text !== null &&\r\n                d.item_translated_text !== ''\r\n                  ? d.item_translated_text\r\n                  : d.item_original_text}\r\n              </span>\r\n              <span className=\"truncate flex items-center w-2/6 ml-auto\">\r\n                {labels.map((label, i) => (\r\n                  <div key={i}>\r\n                    <MaxLabelDisplay\r\n                      countersConfiguration={countersConfiguration}\r\n                      metadataKey={label}\r\n                      labelClicked={labelClicked}\r\n                      metadata={d.metadata}\r\n                      width=\"15ch\"\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </span>\r\n              <div\r\n                data-for=\"global-actions\"\r\n                data-tip\r\n                data-event=\"click\"\r\n                className={`self-end mr-1 hover:cursor-pointer hover:text-white ${\r\n                  actionsVisible === i ? 'visible' : 'invisible'\r\n                }`}\r\n              >\r\n                <EllipsisHorizontalIcon className=\"h-4 w-4\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </foreignObject>\r\n      </g>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <svg width={width} height={barsHeight}>\r\n      {allShapes}\r\n    </svg>\r\n  );\r\n};\r\n","import { format, parse } from 'date-fns';\r\nimport React, { FC } from 'react';\r\nimport CounterDisplay from '../common/components/CountersLabels/CounterDisplay';\r\nimport MaxLabelDisplay from '../common/components/CountersLabels/MaxLabelDisplay';\r\nimport { CUSTOM_METADATA_KEY } from '../common/configurations/commonConfigurations';\r\nimport { ItemsDisplayComponentProps } from '../common/types/componentsInputs';\r\nimport { getMetadataKeyValueDisplay } from '../common/utils/displayUtils';\r\n\r\nexport const ItemsListDisplay: FC<ItemsDisplayComponentProps> = ({\r\n  items,\r\n  bgColor,\r\n  textColor,\r\n  counters,\r\n  labels,\r\n  countersConfiguration,\r\n  labelClicked,\r\n  translate,\r\n  totalItems,\r\n}) => {\r\n  return (\r\n    <div\r\n      className=\"overflow-x-auto text-black bg-[#F7F7F7] dark:bg-[#272535] dark:text-white\"\r\n      style={{ backgroundColor: bgColor, color: textColor }}\r\n    >\r\n      <table className=\"table-auto w-full h-full text-left\">\r\n        <thead className=\"border-b-2 border-b-slate-500\">\r\n          <tr>\r\n            <th className=\"p-1\">Items</th>\r\n            <th className=\"p-1\">Time</th>\r\n            {counters\r\n              .filter(\r\n                (counter) =>\r\n                  counter.metadataKeyValue?.key !== CUSTOM_METADATA_KEY\r\n              )\r\n              .map((counter, i) => (\r\n                <th className=\"p-1 lowercase first-letter:uppercase\" key={i}>\r\n                  {counter.metadataKeyValue\r\n                    ? getMetadataKeyValueDisplay(counter.metadataKeyValue)\r\n                    : ''}\r\n                </th>\r\n              ))}\r\n            {labels.map((label, i) => (\r\n              <th className=\"p-1 lowercase first-letter:uppercase\" key={i}>\r\n                {label}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {items.map((item, i) => {\r\n            const item_date = parseDate(item.create_date);\r\n            return (\r\n              <tr key={i}>\r\n                <td className=\"max-w-[60ch] truncate p-1\">\r\n                  {translate &&\r\n                  item.item_translated_text !== undefined &&\r\n                  item.item_translated_text !== null &&\r\n                  item.item_translated_text !== ''\r\n                    ? item.item_translated_text\r\n                    : item.original_text}\r\n                </td>\r\n                <td\r\n                  className=\"p-1\"\r\n                  data-for=\"global\"\r\n                  data-tip={item_date}\r\n                  style={{ width: '1em', height: '1em' }}\r\n                >\r\n                  {item_date.split(' ').at(0)}\r\n                </td>\r\n                {counters\r\n                  .filter(\r\n                    (counter) =>\r\n                      counter.metadataKeyValue?.key !== CUSTOM_METADATA_KEY\r\n                  )\r\n                  .map((counter, i) => (\r\n                    <td key={i} className=\"p-1\">\r\n                      <CounterDisplay\r\n                        counter={counter}\r\n                        countersConfiguration={countersConfiguration}\r\n                        metadata={item.metadata}\r\n                        trends={[]}\r\n                        totalItems={totalItems}\r\n                      />\r\n                    </td>\r\n                  ))}\r\n                {labels.map((label, i) => (\r\n                  <td key={i}>\r\n                    <MaxLabelDisplay\r\n                      metadataKey={label}\r\n                      labelClicked={labelClicked}\r\n                      countersConfiguration={countersConfiguration}\r\n                      metadata={item.metadata}\r\n                    />\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction parseDate(date: string | undefined): string {\r\n  if (!date) return '';\r\n\r\n  return format(\r\n    parse(date, 'yyyy-MM-dd HH:mm:ss.SSSSSS', new Date()),\r\n    'dd/MM/yyyy HH:mm'\r\n  );\r\n}\r\n","import { EllipsisHorizontalIcon } from '@heroicons/react/24/outline';\r\nimport { scale, valid } from 'chroma-js';\r\nimport { hierarchy, treemap } from 'd3';\r\nimport React, { FC, useMemo, useState } from 'react';\r\nimport { ColorsAxis } from '../common/components/CountersLabels/ColorsAxis';\r\nimport CountersLabelsDisplay from '../common/components/CountersLabelsDisplay';\r\nimport { CUSTOM_METADATA_KEY } from '../common/configurations/commonConfigurations';\r\nimport { DataNode, TreemapProps } from '../common/types/componentsInputs';\r\nimport { totalSumCalculation } from '../common/utils/countersUtils';\r\nimport { getBackgroundColorLayers } from '../common/utils/displayUtils';\r\nimport { calculateFontSize } from '../common/utils/utils';\r\n\r\ntype TreemapNode = DataNode & { children: TreemapNode[] };\r\n\r\nconst BIG_COLOR_DEFAULT = '#322F46';\r\nconst SMALL_COLOR_DEFAULT = '#2C293D';\r\n\r\nexport const Treemap: FC<TreemapProps> = ({\r\n  dataNodes,\r\n  nodeClicked,\r\n  height,\r\n  width,\r\n  bigColor,\r\n  smallColor,\r\n  countFontSize = 14,\r\n  fontFamily,\r\n  textColor,\r\n  borderWidth = 0,\r\n  borderColor,\r\n  labels,\r\n  counters,\r\n  countersConfiguration,\r\n  labelClicked,\r\n  sizeAxis,\r\n  colorAxis,\r\n  nodeActionsClicked,\r\n  translate,\r\n  totalItems,\r\n}) => {\r\n  const mainNode: TreemapNode = useMemo(() => {\r\n    return {\r\n      id: '',\r\n      children: dataNodes.map((c) => {\r\n        return {\r\n          ...c,\r\n          amount:\r\n            sizeAxis?.key === CUSTOM_METADATA_KEY\r\n              ? c.amount\r\n              : totalSumCalculation(\r\n                  sizeAxis,\r\n                  c.metadata,\r\n                  c.trends,\r\n                  countersConfiguration,\r\n                  totalItems\r\n                ).result,\r\n          children: [],\r\n        };\r\n      }),\r\n      amount: 0,\r\n      metadata: {},\r\n      trends: [],\r\n      type: '',\r\n      properties: {},\r\n    };\r\n  }, [dataNodes, sizeAxis]);\r\n\r\n  const treeHierarchy = useMemo(() => {\r\n    const elementsValues = mainNode.children!.map((item) => item.amount);\r\n    const maxElementValue = Math.max(...elementsValues);\r\n    const elementsSum = elementsValues.reduce(\r\n      (a: number, b: number) => a + b,\r\n      0\r\n    );\r\n    const growFactor =\r\n      maxElementValue > elementsSum * 0.9\r\n        ? 0.1 / (1 - maxElementValue / elementsSum)\r\n        : 1;\r\n\r\n    return hierarchy(mainNode)\r\n      .sum((d) => {\r\n        return maxElementValue === d.amount ? d.amount : d.amount * growFactor;\r\n      })\r\n      .sort((n1, n2) => n2.data.amount - n1.data.amount);\r\n  }, [mainNode]);\r\n\r\n  const root = useMemo(() => {\r\n    const treeGenerator = treemap<DataNode>().size([width, height]).padding(0);\r\n    return treeGenerator(treeHierarchy);\r\n  }, [treeHierarchy, width, height]);\r\n\r\n  const colors = useMemo(() => {\r\n    const len = root.leaves().length;\r\n    if (!bigColor || !smallColor || !(valid(bigColor) && valid(smallColor)))\r\n      return scale([BIG_COLOR_DEFAULT, SMALL_COLOR_DEFAULT]).domain([0, len]);\r\n\r\n    return scale([bigColor, smallColor]).domain([0, len]);\r\n  }, [root, bigColor, smallColor]);\r\n\r\n  const [actionsVisible, setActionsVisible] = useState(null as number | null);\r\n\r\n  const allShapes = root.leaves().map((leaf, index) => {\r\n    const height = leaf.y1 - leaf.y0;\r\n    const width = leaf.x1 - leaf.x0;\r\n    const fontSize = calculateFontSize(height, width);\r\n    const lineHeight = fontSize * 1.1 + 5;\r\n    const paddingY = 10;\r\n    const lines = Math.max(\r\n      1,\r\n      Math.floor((height - paddingY + 20) / lineHeight) - 3\r\n    ); // -2 is for the d.data.value and <br />, 20 is for the value absolute top padding\r\n\r\n    const colorsConfig = getBackgroundColorLayers(\r\n      colorAxis,\r\n      leaf.data.metadata,\r\n      leaf.data.trends,\r\n      countersConfiguration,\r\n      totalItems\r\n    );\r\n\r\n    return (\r\n      <g key={index}>\r\n        <rect\r\n          x={leaf.x0}\r\n          y={leaf.y0}\r\n          width={width}\r\n          height={height}\r\n          stroke=\"transparent\"\r\n          fill={colors(index).hex()}\r\n        />\r\n        <foreignObject x={leaf.x0} y={leaf.y0} width={width} height={height}>\r\n          <div\r\n            className=\"h-full w-full\"\r\n            onMouseEnter={() => {\r\n              nodeActionsClicked(leaf.data);\r\n              setActionsVisible(index);\r\n            }}\r\n            onMouseLeave={() => {\r\n              setActionsVisible(null);\r\n            }}\r\n          >\r\n            <ColorsAxis width={width} colorsConfig={colorsConfig} />\r\n            <div\r\n              className=\"flex flex-col h-full w-full p-1 relative border-slate-500 dark:border-[#272535] text-black dark:text-white\"\r\n              style={{\r\n                fontFamily: fontFamily,\r\n                fontWeight: 300,\r\n                fontStyle: 'normal',\r\n                color: textColor,\r\n                borderRightWidth: `${borderWidth}px`,\r\n                borderLeftWidth: `${borderWidth}px`,\r\n                borderBottomWidth: `${borderWidth}px`,\r\n                borderColor: borderColor,\r\n              }}\r\n            >\r\n              <div\r\n                className=\"flex\"\r\n                style={{\r\n                  fontSize: `${countFontSize}px`,\r\n                }}\r\n              >\r\n                <CountersLabelsDisplay\r\n                  counters={counters}\r\n                  labels={labels}\r\n                  metadata={leaf.data.metadata}\r\n                  trends={leaf.data.trends}\r\n                  countersConfiguration={countersConfiguration}\r\n                  labelClicked={labelClicked}\r\n                  totalItems={totalItems}\r\n                />\r\n              </div>\r\n              <span\r\n                className=\"items-center flex justify-center h-full hover:cursor-pointer\"\r\n                onClick={() => nodeClicked(leaf.data)}\r\n                style={{\r\n                  fontSize: `${fontSize}px`,\r\n                }}\r\n              >\r\n                <span\r\n                  data-element=\"rect-text\"\r\n                  className=\"overflow-hidden text-center\"\r\n                  dir=\"auto\"\r\n                  style={{\r\n                    lineHeight: `${lineHeight}px`,\r\n                    wordBreak: 'break-word',\r\n                    WebkitLineClamp: lines,\r\n                    WebkitTouchCallout: 'none',\r\n                    display: '-webkit-box',\r\n                    WebkitBoxOrient: 'vertical',\r\n                  }}\r\n                >\r\n                  {translate &&\r\n                  leaf.data.item_translated_text !== undefined &&\r\n                  leaf.data.item_translated_text !== null &&\r\n                  leaf.data.item_translated_text !== ''\r\n                    ? leaf.data.item_translated_text\r\n                    : leaf.data.item_original_text}\r\n                </span>\r\n              </span>\r\n              <div\r\n                data-for=\"global-actions\"\r\n                data-tip\r\n                data-event=\"click\"\r\n                className={`self-end hover:cursor-pointer hover:text-white ${\r\n                  actionsVisible === index ? 'visible' : 'invisible'\r\n                }`}\r\n              >\r\n                <EllipsisHorizontalIcon className=\"h-4 w-4\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </foreignObject>\r\n      </g>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <svg width={width} height={height}>\r\n      {allShapes}\r\n    </svg>\r\n  );\r\n};\r\n","import { HomeIcon, XMarkIcon } from '@heroicons/react/20/solid';\r\nimport {\r\n  ArrowPathIcon,\r\n  EyeIcon,\r\n  EyeSlashIcon,\r\n  LanguageIcon,\r\n} from '@heroicons/react/24/outline';\r\nimport React, { FC, useEffect, useRef, useState } from 'react';\r\nimport { useResizeDetector } from 'react-resize-detector';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport LabelDisplay from '../common/components/CountersLabels/LabelDisplay';\r\nimport LabelsFiltersSelect from '../common/components/CountersLabels/LabelsFiltersSelect';\r\nimport SingleSelect from '../common/components/CountersLabels/SingleSelect';\r\nimport CountersLabelsDisplay from '../common/components/CountersLabelsDisplay';\r\nimport CustomizeTab from '../common/components/CustomizeTab';\r\nimport DatesFilters from '../common/components/DatesFilters';\r\nimport ItemActions from '../common/components/ItemActions';\r\nimport {\r\n  percentOfAllCalculationName,\r\n  percentOfItemsCalculationName,\r\n  topGroupCalculationName,\r\n  totalSumCalculationName,\r\n} from '../common/configurations/calculationsConfigurations';\r\nimport {\r\n  colorAxisStorageKey,\r\n  countersStorageKey,\r\n  CUSTOM_METADATA_KEY,\r\n  defaultCalculations,\r\n  labelsStorageKey,\r\n  sizeAxisStorageKey,\r\n} from '../common/configurations/commonConfigurations';\r\nimport { defaultCountersConfigurations } from '../common/configurations/countersConfigurations';\r\nimport {\r\n  DataNode,\r\n  NodeType,\r\n  OneAiAnalyticsProps,\r\n} from '../common/types/componentsInputs';\r\nimport {\r\n  CalculationConfiguration,\r\n  CounterConfiguration,\r\n  CountersConfigurations,\r\n  CountersLocalStorageObject,\r\n  CounterType,\r\n  MetadataKeyValue,\r\n} from '../common/types/customizeBarTypes';\r\nimport { Item, MetaData, Properties, Trend } from '../common/types/modals';\r\nimport {\r\n  COLLECTION_TYPE,\r\n  getNodeId,\r\n  getNodeItemsCount,\r\n  getNodeOriginalAndTranslatedText,\r\n  getNodeText,\r\n  getNodeTrends,\r\n} from '../common/utils/modalsUtils';\r\nimport { BarChart } from './BarChart';\r\nimport { ItemsListDisplay } from './ItemsListDisplay';\r\nimport { Treemap } from './Treemap';\r\nimport { extractShtrudelSuffix } from '../common/utils/utils';\r\n\r\nexport type Displays = 'Treemap' | 'BarChart';\r\n\r\n// Please do not use types off of a default export module or else Storybook Docs will suffer.\r\n// see: https://github.com/storybookjs/storybook/issues/9556\r\n/**\r\n * One Ai Analytics Component\r\n */\r\nexport const OneAiAnalytics: FC<OneAiAnalyticsProps> = ({\r\n  dataNodes = { totalItems: 0, nodes: [] },\r\n  currentNode,\r\n  currentPage = 0,\r\n  totalPagesAmount = 0,\r\n  goBackClicked = () => {},\r\n  nodeClicked = () => {},\r\n  nextPageClicked = () => {},\r\n  prevPageClicked = () => {},\r\n  itemsDisplay = ItemsListDisplay,\r\n  darkMode = true,\r\n  background,\r\n  treemapBigColor = darkMode ? '#322F46' : '#F7F7F7',\r\n  treemapSmallColor = darkMode ? '#2C293D' : '#F7F7F7',\r\n  treemapCountFontSize = 14,\r\n  fontFamily = \"'Poppins', sans-serif\",\r\n  textColor = darkMode ? 'white' : '#111111',\r\n  treemapBorderWidth = 1,\r\n  navbarColor,\r\n  treemapBorderColor = darkMode ? '#272535' : 'white',\r\n  barColor = darkMode ? '#322F46' : '#F7F7F7',\r\n  loading,\r\n  error = null,\r\n  nodesPath = [],\r\n  dateRangeChanged = () => {},\r\n  labelsFilters,\r\n  labelClicked = () => {},\r\n  labelFilterDeleted = () => {},\r\n  trendPeriods,\r\n  trendPeriodsChanged,\r\n  splitPhrase,\r\n  mergeClusters,\r\n  searchSimilarClusters,\r\n  translationEnabled = true,\r\n  toggleHide = () => {},\r\n  propertiesFilters = {},\r\n  setPropertiesFilters = () => {},\r\n  metaOptions,\r\n  currentMetaOption,\r\n  metaOptionsChanged = () => {},\r\n  refresh = () => {},\r\n}) => {\r\n  const [display, setDisplay] = useState('Treemap' as Displays);\r\n  const { width, height, ref } = useResizeDetector();\r\n  const [metaData, setMetaData] = useState({} as MetaData);\r\n  const [nodes, setNodes] = useState([] as DataNode[]);\r\n  const [labels, setLabels] = useState([] as string[]);\r\n  const [counters, setCounters] = useState([] as CounterType[]);\r\n  const [sizeAxis, setSizeAxis] = useState(null as MetadataKeyValue | null);\r\n  const [colorAxis, setColorAxis] = useState([] as CounterType[]);\r\n  const [countersConfigurations, setCountersConfigurations] = useState(\r\n    {} as CountersConfigurations\r\n  );\r\n  const [currentNodeActions, setCurrentNodeActions] = useState(\r\n    null as { type: NodeType; id: string; text: string } | null\r\n  );\r\n  const [translate, setTranslate] = useState(false);\r\n  const [fromDate, setFromDate] = useState(null as Date | null);\r\n  const [toDate, setToDate] = useState(null as Date | null);\r\n  const loadedNodes = useRef([] as { type: string; id: string }[]);\r\n  const currentCollection = useRef(null as string | null);\r\n  const [currentHoveredNode, setCurrentHoveredNode] = useState(\r\n    null as {\r\n      type: NodeType;\r\n      id: string;\r\n      text: string;\r\n      properties: Properties;\r\n    } | null\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !nodesPath ||\r\n      nodesPath.length === 0 ||\r\n      currentCollection.current === nodesPath[0].text\r\n    )\r\n      return;\r\n\r\n    currentCollection.current = nodesPath[0].text;\r\n    setLabels(\r\n      JSON.parse(\r\n        localStorage.getItem(\r\n          getCurrentStorageKey(labelsStorageKey, currentCollection.current)\r\n        ) ?? '[]'\r\n      )\r\n    );\r\n\r\n    setCounters(\r\n      getInitialCounterTypes(\r\n        defaultCalculations,\r\n        [\r\n          {\r\n            metadataKeyValue: { key: CUSTOM_METADATA_KEY },\r\n            calculationName: percentOfAllCalculationName,\r\n          },\r\n          {\r\n            metadataKeyValue: { key: CUSTOM_METADATA_KEY },\r\n            calculationName: totalSumCalculationName,\r\n          },\r\n          {\r\n            metadataKeyValue: { key: 'signals' },\r\n            calculationName: topGroupCalculationName,\r\n          },\r\n        ],\r\n        currentCollection.current,\r\n        countersStorageKey\r\n      ) as CounterType[]\r\n    );\r\n\r\n    const storedSizeAxis = localStorage.getItem(\r\n      getCurrentStorageKey(sizeAxisStorageKey, currentCollection.current)\r\n    );\r\n    setSizeAxis(\r\n      storedSizeAxis ? JSON.parse(storedSizeAxis) : { key: CUSTOM_METADATA_KEY }\r\n    );\r\n\r\n    setColorAxis(\r\n      getInitialCounterTypes(\r\n        defaultCalculations,\r\n        [\r\n          {\r\n            metadataKeyValue: { key: 'signals', value: 'positive' },\r\n            calculationName: percentOfItemsCalculationName,\r\n          },\r\n          {\r\n            metadataKeyValue: { key: 'signals', value: 'negative' },\r\n            calculationName: percentOfItemsCalculationName,\r\n          },\r\n        ],\r\n        currentCollection.current,\r\n        colorAxisStorageKey\r\n      ) as CounterType[]\r\n    );\r\n  }, [nodesPath]);\r\n\r\n  useEffect(() => {\r\n    setMetaData((currentMetadata) => {\r\n      const newMetadata = currentNode\r\n        ? loadedNodes.current.some(\r\n            (loadedNode) =>\r\n              loadedNode.type === currentNode.type &&\r\n              loadedNode.id === getNodeId(currentNode)\r\n          )\r\n          ? currentMetadata\r\n          : mergeMetadata(currentMetadata, currentNode?.data.metadata ?? {})\r\n        : nodes\r\n            .filter(\r\n              (node) =>\r\n                !loadedNodes.current.some(\r\n                  (loadedNode) =>\r\n                    loadedNode.id === node.id && loadedNode.type === node.type\r\n                )\r\n            )\r\n            .reduce(\r\n              (finalMetadata, currentNode) =>\r\n                mergeMetadata(finalMetadata, currentNode.metadata),\r\n              currentMetadata\r\n            );\r\n      loadedNodes.current.push({\r\n        type: currentNode?.type ?? COLLECTION_TYPE,\r\n        id: currentNode ? getNodeId(currentNode) : COLLECTION_TYPE,\r\n      });\r\n\r\n      if (!currentNode)\r\n        loadedNodes.current.push(\r\n          ...nodes.map((node) => {\r\n            return { type: node.type, id: node.id };\r\n          })\r\n        );\r\n      return newMetadata;\r\n    });\r\n  }, [currentNode, nodes]);\r\n\r\n  useEffect(() => {\r\n    setNodes(\r\n      dataNodes.nodes.map((d) => {\r\n        const itemsCount = getNodeItemsCount(d);\r\n        const nodeText = getNodeText(d);\r\n        const { originalText, translatedText } =\r\n          getNodeOriginalAndTranslatedText(d);\r\n        return {\r\n          id: getNodeId(d),\r\n          amount: itemsCount,\r\n          text: nodeText,\r\n          item_original_text: originalText ?? nodeText,\r\n          item_translated_text: translatedText,\r\n          metadata: {\r\n            [CUSTOM_METADATA_KEY]: [\r\n              { value: CUSTOM_METADATA_KEY, count: itemsCount },\r\n            ],\r\n            ...d.data.metadata,\r\n          },\r\n          trends: getNodeTrends(d),\r\n          type: d.type,\r\n          properties: d.data.properties,\r\n        };\r\n      })\r\n    );\r\n  }, [dataNodes]);\r\n\r\n  useEffect(() => {\r\n    const newCountersConfigurations: CountersConfigurations = {};\r\n    Object.keys(metaData)\r\n      .concat(Object.keys(defaultCountersConfigurations))\r\n      .forEach((key) => {\r\n        const defaultConfig = defaultCountersConfigurations[key];\r\n        const valuesConfigured =\r\n          defaultConfig?.items?.map((group) => group.label) ?? [];\r\n        const counterConfiguration: CounterConfiguration = {\r\n          label: (defaultConfig?.label ?? key).toLowerCase(),\r\n          display: defaultConfig?.display,\r\n          members: defaultConfig?.members ?? [{ metadataName: key }],\r\n          isGroup: defaultConfig?.isGroup ?? false,\r\n          items:\r\n            key === CUSTOM_METADATA_KEY\r\n              ? undefined\r\n              : (\r\n                  defaultConfig?.items?.map((group) => {\r\n                    return {\r\n                      label: group.label,\r\n                      display: group.display,\r\n                      isGroup: group.isGroup,\r\n                      members: group.members?.map((member) => {\r\n                        return {\r\n                          metadataName: member.metadataName ?? key,\r\n                          values: member.values,\r\n                        };\r\n                      }) ?? [\r\n                        { metadataName: key, values: [group.label ?? ''] },\r\n                      ],\r\n                    };\r\n                  }) ?? []\r\n                ).concat(\r\n                  metaData[key]\r\n                    ?.filter((meta) => !valuesConfigured.includes(meta.value))\r\n                    .map((meta) => {\r\n                      return {\r\n                        label: meta.value,\r\n                        members: [{ metadataName: key, values: [meta.value] }],\r\n                        display: undefined,\r\n                        isGroup: false,\r\n                      };\r\n                    }) ?? []\r\n                ),\r\n        };\r\n        newCountersConfigurations[key] = counterConfiguration;\r\n      });\r\n\r\n    setCountersConfigurations(newCountersConfigurations);\r\n  }, [metaData]);\r\n\r\n  useEffect(() => {\r\n    const storedCounters = counters.map((counter) => {\r\n      return {\r\n        metadataKeyValue: counter.metadataKeyValue,\r\n        calculationName: counter.calculationConfiguration.name,\r\n      } as CountersLocalStorageObject;\r\n    });\r\n\r\n    const storedColorAxis = colorAxis.map((counter) => {\r\n      return {\r\n        metadataKeyValue: counter.metadataKeyValue,\r\n        calculationName: counter.calculationConfiguration.name,\r\n      } as CountersLocalStorageObject;\r\n    });\r\n\r\n    if (currentCollection.current) {\r\n      localStorage.setItem(\r\n        getCurrentStorageKey(countersStorageKey, currentCollection.current),\r\n        JSON.stringify(storedCounters)\r\n      );\r\n      localStorage.setItem(\r\n        getCurrentStorageKey(labelsStorageKey, currentCollection.current),\r\n        JSON.stringify(labels)\r\n      );\r\n      localStorage.setItem(\r\n        getCurrentStorageKey(colorAxisStorageKey, currentCollection.current),\r\n        JSON.stringify(storedColorAxis)\r\n      );\r\n      localStorage.setItem(\r\n        getCurrentStorageKey(sizeAxisStorageKey, currentCollection.current),\r\n        JSON.stringify(sizeAxis)\r\n      );\r\n    }\r\n  }, [counters, labels, sizeAxis, colorAxis]);\r\n\r\n  useEffect(() => {\r\n    dateRangeChanged(fromDate, toDate);\r\n  }, [fromDate, toDate]);\r\n\r\n  useEffect(() => {\r\n    ReactTooltip.hide();\r\n    ReactTooltip.rebuild();\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={`oneai-analytics-namespace h-full w-full overflow-hidden ${\r\n        darkMode ? 'dark' : ''\r\n      }`}\r\n    >\r\n      <div\r\n        id=\"headlessui-portal-root\"\r\n        className={`h-full w-full flex flex-col overflow-hidden bg-[#f3e5e5] dark:bg-[#161414] p-1 ${\r\n          darkMode ? 'dark' : ''\r\n        }`}\r\n        style={{ background: background }}\r\n      >\r\n        <ReactTooltip id=\"global\" />\r\n        <ReactTooltip\r\n          id=\"global-actions\"\r\n          place=\"top\"\r\n          effect=\"solid\"\r\n          clickable={true}\r\n          className=\"!p-1\"\r\n        >\r\n          <div className=\"flex flex-col w-full h-full items-baseline\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                ReactTooltip.hide();\r\n                setCurrentNodeActions(currentHoveredNode);\r\n              }}\r\n              className=\"text-gray-900 w-full bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 font-medium rounded-lg text-sm px-2 py-2 mr-1 mb-1 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700\"\r\n            >\r\n              {currentHoveredNode?.type === 'Cluster' ? 'Merge' : 'Split'}\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                ReactTooltip.hide();\r\n                ReactTooltip.rebuild();\r\n                toggleHide(\r\n                  currentHoveredNode,\r\n                  currentHoveredNode?.properties?.['hide'] === 'true'\r\n                    ? 'false'\r\n                    : 'true'\r\n                );\r\n              }}\r\n              className=\"text-gray-900 w-full bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 font-medium rounded-lg text-sm px-2 py-2 mr-1 mb-1 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700\"\r\n            >\r\n              {currentHoveredNode?.properties?.['hide'] === 'true'\r\n                ? 'Show'\r\n                : 'Hide'}\r\n            </button>\r\n          </div>\r\n        </ReactTooltip>\r\n        <ItemActions\r\n          node={currentNodeActions}\r\n          splitPhrase={splitPhrase}\r\n          mergeClusters={mergeClusters}\r\n          searchSimilarClusters={searchSimilarClusters}\r\n          translationEnabled={translate}\r\n        />\r\n        <div\r\n          className=\"w-full mb-1 rounded-md bg-white dark:bg-[#272535]\"\r\n          style={{\r\n            height: '65px',\r\n            background: navbarColor,\r\n            fontFamily: fontFamily,\r\n          }}\r\n        >\r\n          <div className=\"flex flex-row items-center py-5 ml-[24px] h-full\">\r\n            <div className=\"flex flex-row w-5/12 justify-start items-center\">\r\n              <div className=\"h-full flex\">\r\n                <svg\r\n                  className={getVisualizationLogoClasses(display === 'Treemap')}\r\n                  onClick={() => setDisplay('Treemap')}\r\n                  width=\"24\"\r\n                  height=\"24\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                  <path d=\"M3.5 5.89477C3.5 5.06635 4.17157 4.39478 5 4.39478H19C19.8284 4.39478 20.5 5.06635 20.5 5.89478V11.9211H3.5V5.89477Z\" />\r\n                  <path d=\"M3.5 11.9736H13.8684V19.4999H5C4.17157 19.4999 3.5 18.8284 3.5 17.9999V11.9736Z\" />\r\n                  <path d=\"M13.9211 11.9736H20.5001V17.9999C20.5001 18.8284 19.8285 19.4999 19.0001 19.4999H13.9211V11.9736Z\" />\r\n                  <path d=\"M8.68433 4.36841V11.4737\" />\r\n                </svg>\r\n\r\n                <svg\r\n                  className={getVisualizationLogoClasses(\r\n                    display === 'BarChart'\r\n                  )}\r\n                  onClick={() => setDisplay('BarChart')}\r\n                  width=\"24\"\r\n                  height=\"24\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke=\"currentColor\"\r\n                  fill=\"none\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                  <path d=\"M3.75 20.25V3.75\" />\r\n                  <path d=\"M3.75 9.75H15.75C15.75 11.5074 15.75 12.4926 15.75 14.25H3.75\" />\r\n                  <path d=\"M20.25 5.25H3.75V9.75H20.25V5.25Z\" />\r\n                  <path d=\"M12.75 14.25V18.75H3.75\" />\r\n                </svg>\r\n              </div>\r\n              <div>\r\n                <CustomizeTab\r\n                  currentCounters={counters}\r\n                  selectedLabels={labels}\r\n                  countersConfigurations={countersConfigurations}\r\n                  labelsOptions={Object.keys(metaData).filter(\r\n                    (key) => key !== CUSTOM_METADATA_KEY\r\n                  )}\r\n                  calculationsConfigurations={defaultCalculations}\r\n                  countersChanged={setCounters}\r\n                  labelsChanged={setLabels}\r\n                  selectedSizeAxis={sizeAxis}\r\n                  sizeAxisChanged={setSizeAxis}\r\n                  currentColorsAxis={colorAxis}\r\n                  colorsAxisChanged={setColorAxis}\r\n                />\r\n              </div>\r\n              <div>\r\n                <DatesFilters\r\n                  fromDate={fromDate}\r\n                  fromDateChanged={setFromDate}\r\n                  toDate={toDate}\r\n                  toDateChanged={setToDate}\r\n                  trendPeriods={trendPeriods}\r\n                  trendPeriodsChanged={trendPeriodsChanged}\r\n                />\r\n              </div>\r\n              <div>\r\n                <LabelsFiltersSelect\r\n                  selectedLabels={labelsFilters ?? []}\r\n                  countersConfigurations={countersConfigurations}\r\n                  selectedMetadataKeyValueChange={(metadataKeyValue) =>\r\n                    labelClicked(metadataKeyValue.key, metadataKeyValue.value!)\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"flex flex-row w-full justify-end items-center\">\r\n              <ArrowPathIcon\r\n                onClick={refresh}\r\n                data-for=\"global\"\r\n                data-tip=\"Refresh data\"\r\n                className=\"h-6 w-6 p-1 mr-1 hover:cursor-pointer focus:outline-none text-[#747189] dark:hover:text-white\"\r\n              />\r\n              {propertiesFilters['hide'] === 'true' ? (\r\n                <EyeIcon\r\n                  onClick={() => setPropertiesFilters({ hide: 'false' })}\r\n                  data-for=\"global\"\r\n                  data-tip=\"Show hidden nodes\"\r\n                  className=\"h-6 w-6 p-1 mr-1 hover:cursor-pointer focus:outline-none text-[#747189] dark:hover:text-white\"\r\n                />\r\n              ) : (\r\n                <EyeSlashIcon\r\n                  onClick={() => setPropertiesFilters({ hide: 'true' })}\r\n                  data-for=\"global\"\r\n                  data-tip=\"Hide hidden nodes\"\r\n                  className=\"h-6 w-6 p-1 mr-1 hover:cursor-pointer focus:outline-none bg-[#EFEFEF] dark:text-white dark:bg-[#322F46]\"\r\n                />\r\n              )}\r\n              {translationEnabled ? (\r\n                <LanguageIcon\r\n                  onClick={() => setTranslate((translate) => !translate)}\r\n                  data-for=\"global\"\r\n                  data-tip={\r\n                    translate ? 'Disable translation' : 'Enable translation'\r\n                  }\r\n                  className={`h-6 w-6 p-1 mr-1 hover:cursor-pointer focus:outline-none ${\r\n                    translate\r\n                      ? 'bg-[#EFEFEF] dark:text-white dark:bg-[#322F46]'\r\n                      : 'text-[#747189] hover:cursor-pointer dark:hover:text-white'\r\n                  }`}\r\n                />\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"w-full rounded-md grow flex flex-col overflow-hidden bg-white dark:bg-[#272535]\"\r\n          style={{ background: navbarColor }}\r\n        >\r\n          <div\r\n            className=\"w-full\"\r\n            style={{\r\n              height: '65px',\r\n              fontFamily: fontFamily,\r\n            }}\r\n          >\r\n            <div className=\"flex flex-row items-center ml-[24px] h-full\">\r\n              <div\r\n                className=\"flex flex-row justify-start mr-4 items-center w-full\"\r\n                style={{\r\n                  fontFamily: fontFamily,\r\n                  fontWeight: 300,\r\n                  fontStyle: 'normal',\r\n                  fontSize: '14px',\r\n                }}\r\n              >\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => goBackClicked(1)}\r\n                  disabled={currentNode === null}\r\n                  className={`rounded-lg inline-flex ${\r\n                    currentNode\r\n                      ? 'hover:bg-[#EFEFEF] dark:hover:bg-slate-700'\r\n                      : 'hover:cursor-default'\r\n                  }`}\r\n                >\r\n                  {currentNode ? (\r\n                    <svg\r\n                      className=\"h-[1em] w-[1em] self-center text-[#111111] dark:text-white\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      strokeWidth=\"2\"\r\n                      stroke=\"currentColor\"\r\n                      fill=\"none\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      {' '}\r\n                      <path stroke=\"none\" d=\"M0 0h24v24H0z\" />{' '}\r\n                      <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />{' '}\r\n                      <line x1=\"5\" y1=\"12\" x2=\"9\" y2=\"16\" />{' '}\r\n                      <line x1=\"5\" y1=\"12\" x2=\"9\" y2=\"8\" />\r\n                    </svg>\r\n                  ) : (\r\n                    <HomeIcon className=\"h-[0.9em] w-[1em] text-[#111111] dark:text-white\" />\r\n                  )}\r\n\r\n                  <span className=\"sr-only\">Go back</span>\r\n                </button>\r\n\r\n                <div className=\"ml-1 text-[#111111] dark:text-gray-300 truncate flex items-center\">\r\n                  {nodesPath.map((node, i) => (\r\n                    <div key={i} className=\"flex\">\r\n                      <div className=\"max-w-[50ch] truncate\">\r\n                        <span\r\n                          className=\"cursor-pointer hover:text-gray-600 dark:hover:text-gray-50\"\r\n                          onClick={() =>\r\n                            goBackClicked(nodesPath.length - 1 - i)\r\n                          }\r\n                          dir=\"auto\"\r\n                        >\r\n                          {translate && node.translated\r\n                            ? extractShtrudelSuffix(node.translated)\r\n                            : extractShtrudelSuffix(node.text)}\r\n                        </span>\r\n                      </div>\r\n                      {nodesPath.length - 1 !== i && (\r\n                        <span className=\"ml-1 mr-1\">/</span>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                  {metaOptions && nodesPath.length === 1 ? (\r\n                    <span className=\"ml-1 flex text-[#111111] dark:text-gray-300\">\r\n                      <span className=\"mr-1\">/ </span>\r\n                      <SingleSelect\r\n                        options={metaOptions}\r\n                        selectedLabel={currentMetaOption ?? 'text'}\r\n                        onSelect={metaOptionsChanged}\r\n                      />\r\n                    </span>\r\n                  ) : null}\r\n                  {(labelsFilters?.length ?? 0) > 0 &&\r\n                    labelsFilters\r\n                      ?.filter((label) => label.value)\r\n                      .map((keyValue, i) => (\r\n                        <span key={i} className=\"flex items-center\">\r\n                          <span className=\"text-gray-500 ml-1\">/ </span>\r\n                          <LabelDisplay\r\n                            metadataKey={keyValue.key}\r\n                            value={keyValue.value ?? ''}\r\n                            countersConfiguration={countersConfigurations}\r\n                            labelClicked={() => {}}\r\n                            maxWidth=\"20ch\"\r\n                            color=\"#747189\"\r\n                          />\r\n                          <button\r\n                            type=\"button\"\r\n                            onClick={() => labelFilterDeleted(i)}\r\n                          >\r\n                            <XMarkIcon className=\"h-4 w-4 text-gray-400 hover:scale-125 transition duration-100 ease-linear\" />\r\n                            <span className=\"sr-only\">Delete label filter</span>\r\n                          </button>\r\n                        </span>\r\n                      ))}\r\n                  {totalPagesAmount > 1 && currentPage > 0 && (\r\n                    <span className=\"ml-1 text-gray-500\">\r\n                      / {currentPage + 1}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div>\r\n                {!loading && (\r\n                  <CountersLabelsDisplay\r\n                    counters={counters}\r\n                    labels={labels}\r\n                    metadata={nodes.reduce(\r\n                      (finalMetadata, currentNode) =>\r\n                        mergeMetadata(\r\n                          finalMetadata,\r\n                          currentNode.metadata,\r\n                          dataNodes.totalItems\r\n                        ),\r\n                      {}\r\n                    )}\r\n                    trends={nodes.reduce(\r\n                      (finalMetadata, currentNode) =>\r\n                        mergeTrends(finalMetadata, currentNode.trends),\r\n                      [] as Trend[]\r\n                    )}\r\n                    countersConfiguration={countersConfigurations}\r\n                    labelClicked={labelClicked}\r\n                    totalItems={dataNodes.totalItems}\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"w-full h-full flex flex-col overflow-x-hidden\">\r\n            {loading && (\r\n              <div className=\"grow w-full justify-center items-center flex\">\r\n                <div className=\"text-center\">\r\n                  <div role=\"status\">\r\n                    <svg\r\n                      className=\"inline mr-2 w-8 h-8 text-gray-200 animate-spin fill-blue-600\"\r\n                      viewBox=\"0 0 100 101\"\r\n                      fill=\"none\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                      <path\r\n                        d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\r\n                        fill=\"currentColor\"\r\n                      />\r\n                      <path\r\n                        d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\r\n                        fill=\"currentFill\"\r\n                      />\r\n                    </svg>\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            <div\r\n              className={`flex flex-row flex-grow ${\r\n                loading\r\n                  ? 'invisible pointer-events-none w-0 h-0'\r\n                  : 'w-full h-full'\r\n              }`}\r\n            >\r\n              {currentPage > 0 && (\r\n                <div\r\n                  className=\"h-full flex items-center justify-center hover:cursor-pointer dark:bg-[#322F46]\"\r\n                  onClick={prevPageClicked}\r\n                  style={{ width: '3%', backgroundColor: treemapBigColor }}\r\n                >\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"text-slate-500 hover:text-slate-700 font-medium rounded-lg text-sm text-center inline-flex items-center\"\r\n                  >\r\n                    <svg\r\n                      aria-hidden=\"true\"\r\n                      className=\"w-5 h-5 rotate-180\"\r\n                      fill=\"currentColor\"\r\n                      viewBox=\"0 0 20 20\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                      <path\r\n                        fillRule=\"evenodd\"\r\n                        d=\"M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z\"\r\n                        clipRule=\"evenodd\"\r\n                      ></path>\r\n                    </svg>\r\n                    <span className=\"sr-only\">Prev</span>\r\n                  </button>\r\n                </div>\r\n              )}\r\n\r\n              <div\r\n                ref={ref}\r\n                className=\"h-full w-full overflow-y-auto no-scrollbar overflow-x-hidden\"\r\n              >\r\n                {error !== null ? (\r\n                  <p className=\"h-full w-full text-center dark:text-white\">\r\n                    {error}\r\n                  </p>\r\n                ) : currentNode && currentNode.type === 'Phrase' ? (\r\n                  itemsDisplay({\r\n                    items: dataNodes.nodes.map(\r\n                      (dataNode) => dataNode.data as Item\r\n                    ),\r\n                    bgColor: navbarColor,\r\n                    textColor: textColor,\r\n                    counters: counters,\r\n                    labels: labels,\r\n                    labelClicked: labelClicked,\r\n                    countersConfiguration: countersConfigurations,\r\n                    translate: translate,\r\n                    totalItems: dataNodes.totalItems,\r\n                  })\r\n                ) : display === 'Treemap' ? (\r\n                  <Treemap\r\n                    dataNodes={nodes}\r\n                    height={height ?? 0}\r\n                    width={width ?? 0}\r\n                    nodeClicked={(node) => {\r\n                      ReactTooltip.hide();\r\n                      nodeClicked({\r\n                        type: !currentNode\r\n                          ? 'Cluster'\r\n                          : currentNode.type === 'Cluster'\r\n                          ? 'Phrase'\r\n                          : 'Item',\r\n                        id: node.id,\r\n                      });\r\n                    }}\r\n                    labels={labels}\r\n                    counters={counters}\r\n                    bigColor={treemapBigColor}\r\n                    smallColor={treemapSmallColor}\r\n                    countFontSize={treemapCountFontSize}\r\n                    fontFamily={fontFamily}\r\n                    textColor={textColor}\r\n                    borderWidth={treemapBorderWidth}\r\n                    borderColor={treemapBorderColor}\r\n                    countersConfiguration={countersConfigurations}\r\n                    labelClicked={labelClicked}\r\n                    sizeAxis={sizeAxis}\r\n                    colorAxis={colorAxis}\r\n                    nodeActionsClicked={(node) => {\r\n                      setCurrentHoveredNode({\r\n                        type: !currentNode\r\n                          ? 'Cluster'\r\n                          : currentNode.type === 'Cluster'\r\n                          ? 'Phrase'\r\n                          : 'Item',\r\n                        id: node.id,\r\n                        text: node.text ?? '',\r\n                        properties: node.properties,\r\n                      });\r\n                    }}\r\n                    translate={translate}\r\n                    totalItems={dataNodes.totalItems}\r\n                  />\r\n                ) : (\r\n                  <BarChart\r\n                    dataNodes={nodes}\r\n                    height={height ?? 0}\r\n                    width={width ?? 0}\r\n                    nodeClicked={(node) => {\r\n                      ReactTooltip.hide();\r\n                      nodeClicked({\r\n                        type: !currentNode\r\n                          ? 'Cluster'\r\n                          : currentNode.type === 'Cluster'\r\n                          ? 'Phrase'\r\n                          : 'Item',\r\n                        id: node.id,\r\n                      });\r\n                    }}\r\n                    fontFamily={fontFamily}\r\n                    textColor={textColor}\r\n                    barColor={barColor}\r\n                    labels={labels}\r\n                    counters={counters}\r\n                    countersConfiguration={countersConfigurations}\r\n                    labelClicked={labelClicked}\r\n                    sizeAxis={sizeAxis}\r\n                    colorAxis={colorAxis}\r\n                    nodeActionsClicked={(node) => {\r\n                      setCurrentHoveredNode({\r\n                        type: !currentNode\r\n                          ? 'Cluster'\r\n                          : currentNode.type === 'Cluster'\r\n                          ? 'Phrase'\r\n                          : 'Item',\r\n                        id: node.id,\r\n                        text: node.text ?? '',\r\n                        properties: node.properties,\r\n                      });\r\n                    }}\r\n                    translate={translate}\r\n                    totalItems={dataNodes.totalItems}\r\n                  />\r\n                )}\r\n              </div>\r\n\r\n              {currentPage < totalPagesAmount - 1 && (\r\n                <div\r\n                  className=\"h-full flex items-center justify-center hover:cursor-pointer\"\r\n                  onClick={nextPageClicked}\r\n                  style={{ width: '3%', backgroundColor: treemapSmallColor }}\r\n                >\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"text-slate-500 hover:text-slate-700 font-medium rounded-lg text-sm text-center inline-flex items-center\"\r\n                  >\r\n                    <svg\r\n                      aria-hidden=\"true\"\r\n                      className=\"w-5 h-5\"\r\n                      fill=\"currentColor\"\r\n                      viewBox=\"0 0 20 20\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                      <path\r\n                        fillRule=\"evenodd\"\r\n                        d=\"M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z\"\r\n                        clipRule=\"evenodd\"\r\n                      ></path>\r\n                    </svg>\r\n                    <span className=\"sr-only\">Next</span>\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction getVisualizationLogoClasses(active: boolean) {\r\n  return `h-7 w-7 mr-1 p-1 rounded-md ${\r\n    active\r\n      ? 'bg-[#EFEFEF] dark:text-white dark:bg-[#322F46]'\r\n      : 'text-[#747189] hover:cursor-pointer dark:hover:text-white'\r\n  }`;\r\n}\r\n\r\nfunction mergeMetadata(\r\n  metadata1: MetaData,\r\n  metadata2: MetaData,\r\n  totalItems?: number\r\n): MetaData {\r\n  const newMetadata: MetaData = {};\r\n  Array.from(\r\n    new Set([...Object.keys(metadata1), ...Object.keys(metadata2)])\r\n  ).forEach((key) => {\r\n    if (totalItems === undefined || key !== CUSTOM_METADATA_KEY)\r\n      newMetadata[key] = [...(metadata1[key] ?? []), ...(metadata2[key] ?? [])];\r\n  });\r\n\r\n  if (totalItems === undefined) return newMetadata;\r\n  newMetadata[CUSTOM_METADATA_KEY] = [\r\n    { value: CUSTOM_METADATA_KEY, count: totalItems },\r\n  ];\r\n\r\n  return newMetadata;\r\n}\r\n\r\nfunction mergeTrends(trends1?: Trend[], trends2?: Trend[]): Trend[] {\r\n  if (!trends1 || !trends2) return [];\r\n  const newTrends: Trend[] = [];\r\n  const sourceTrends = trends1.length >= trends2.length ? trends1 : trends2;\r\n  sourceTrends.forEach((_, i) => {\r\n    newTrends.push({\r\n      days: sourceTrends[i].days,\r\n      period_start_date: sourceTrends[i].period_start_date,\r\n      period_end_date: sourceTrends[i].period_end_date,\r\n      items_count:\r\n        (trends1.at(i)?.items_count ?? 0) + (trends2.at(i)?.items_count ?? 0),\r\n      phrases_count:\r\n        (trends1.at(i)?.phrases_count ?? 0) +\r\n        (trends2.at(i)?.phrases_count ?? 0),\r\n      metadata: mergeMetadata(\r\n        trends1.at(i)?.metadata ?? {},\r\n        trends2.at(i)?.metadata ?? {}\r\n      ),\r\n    });\r\n  });\r\n\r\n  return newTrends;\r\n}\r\n\r\nfunction getInitialCounterTypes(\r\n  calculationConfiguration: CalculationConfiguration[],\r\n  defaultCounters: CountersLocalStorageObject[],\r\n  collection: string,\r\n  storageKey: string\r\n): CounterType[] {\r\n  const storedCounters: CountersLocalStorageObject[] = JSON.parse(\r\n    localStorage.getItem(getCurrentStorageKey(storageKey, collection)) ?? '[]'\r\n  );\r\n  const counters = storedCounters.length > 0 ? storedCounters : defaultCounters;\r\n\r\n  return counters\r\n    .map((counter) => {\r\n      return {\r\n        calculationConfiguration: calculationConfiguration.find(\r\n          (calc) => calc.name === counter.calculationName\r\n        ),\r\n        metadataKeyValue: counter.metadataKeyValue,\r\n      } as CounterType;\r\n    })\r\n    .filter((calc) => calc.calculationConfiguration !== undefined);\r\n}\r\n\r\nfunction getCurrentStorageKey(prefix: string, collection: string) {\r\n  return `${prefix}-${collection}`;\r\n}\r\n","import { format } from 'date-fns';\r\nimport React, { FC, useEffect, useRef, useState } from 'react';\r\nimport { PAGE_SIZE } from '../common/configurations/commonConfigurations';\r\nimport {\r\n  NodeType,\r\n  OneAIAnalyticsApiWrapperProps,\r\n  OneAIDataNode,\r\n} from '../common/types/componentsInputs';\r\nimport { MetadataKeyValue } from '../common/types/customizeBarTypes';\r\nimport {\r\n  Cluster,\r\n  Item,\r\n  MetaCluster,\r\n  Phrase,\r\n  Properties,\r\n} from '../common/types/modals';\r\nimport {\r\n  COLLECTION_TYPE,\r\n  getNodeDetails,\r\n  getNodeId,\r\n  getNodeOriginalAndTranslatedText,\r\n  getNodeText,\r\n} from '../common/utils/modalsUtils';\r\nimport { getSecondsDiff, uniqBy } from '../common/utils/utils';\r\nimport { OneAiAnalytics } from '../components/OneAiAnalytics';\r\n\r\nconst cache: Map<\r\n  string,\r\n  { nodes: OneAIDataNode[]; totalItems: number; totalPages: number; time: Date }\r\n> = new Map();\r\n\r\nconst nodeToPageCache: Map<string, number> = new Map();\r\n\r\n// Please do not use types off of a default export module or else Storybook Docs will suffer.\r\n// see: https://github.com/storybookjs/storybook/issues/9556\r\n/**\r\n * One AI Analytics api wrapper component\r\n */\r\nexport const OneAIAnalyticsApiWrapper: FC<OneAIAnalyticsApiWrapperProps> = ({\r\n  domain = 'https://api.oneai.com',\r\n  apiKey = '',\r\n  collection = '',\r\n  refreshToken = '',\r\n  ...rest\r\n}) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null as string | null);\r\n  const [currentNodes, setCurrentNodes] = useState({\r\n    totalItems: 0,\r\n    nodes: [],\r\n  } as { totalItems: number; nodes: OneAIDataNode[] });\r\n  const [clickedNodes, setClickedNodes] = useState([] as OneAIDataNode[]);\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [dateRange, setDateRange] = useState([\r\n    null,\r\n    null,\r\n  ] as Array<Date | null>);\r\n  const [labelsFilters, setLabelsFilters] = useState([] as MetadataKeyValue[]);\r\n  const [localRefreshToken, setLocalRefreshToken] = useState(refreshToken);\r\n  const [trendPeriods, setTrendPeriods] = useState(0);\r\n  const [propertiesFilters, setPropertiesFilters] = useState({\r\n    hide: 'true',\r\n  } as Properties);\r\n  const [metaOptions, setMetaOptions] = useState([] as string[]);\r\n  const [currentMetaGroup, setCurrentMetaGroup] = useState('text');\r\n  const [metaGroupClicked, setMetaGroupClicked] = useState(\r\n    null as MetadataKeyValue | null\r\n  );\r\n\r\n  const previousValues = useRef({\r\n    domain: null as string | null,\r\n    apiKey: null as string | null,\r\n    collection: null as string | null,\r\n    refreshToken: null as string | null,\r\n    localRefreshToken: null as string | null,\r\n    clickedNodes: null as OneAIDataNode[] | null,\r\n    currentPage: null as number | null,\r\n    lastMetaGroup: 'text' as string,\r\n  });\r\n\r\n  const fetchMetaClusters = async (controller: AbortController) => {\r\n    const metaClusters = await fetchMetaClustersApi(\r\n      controller,\r\n      domain,\r\n      collection,\r\n      apiKey,\r\n      0,\r\n      dateRange[0],\r\n      dateRange[1],\r\n      labelsFilters,\r\n      trendPeriods,\r\n      propertiesFilters\r\n    );\r\n\r\n    const newNodes = metaClusters.data.map((c) => {\r\n      return { type: 'Meta' as NodeType, data: c };\r\n    });\r\n\r\n    const mappedNodes = newNodes.map((n) => n.data.meta_key);\r\n    setMetaOptions(mappedNodes);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      previousValues.current.domain !== domain ||\r\n      previousValues.current.apiKey !== apiKey ||\r\n      previousValues.current.collection !== collection ||\r\n      previousValues.current.refreshToken !== refreshToken ||\r\n      previousValues.current.localRefreshToken !== localRefreshToken ||\r\n      previousValues.current.lastMetaGroup !== currentMetaGroup\r\n    ) {\r\n      setCurrentNodes({ totalItems: 0, nodes: [] });\r\n      setClickedNodes([]);\r\n      setCurrentPage(0);\r\n      cache.clear();\r\n\r\n      previousValues.current = {\r\n        domain,\r\n        apiKey,\r\n        collection,\r\n        refreshToken,\r\n        localRefreshToken,\r\n        clickedNodes: null,\r\n        currentPage: null,\r\n        lastMetaGroup: currentMetaGroup,\r\n      };\r\n    }\r\n  }, [\r\n    domain,\r\n    apiKey,\r\n    collection,\r\n    refreshToken,\r\n    localRefreshToken,\r\n    currentMetaGroup,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async (controller: AbortController) => {\r\n      setLoading(true);\r\n      const currentClicked = clickedNodes.at(-1);\r\n\r\n      if (currentMetaGroup !== 'text' && !currentClicked) {\r\n        const cached = getNodesFromCache(\r\n          COLLECTION_TYPE,\r\n          collection + '_meta',\r\n          currentPage\r\n        );\r\n\r\n        if (cached) {\r\n          setCurrentNodes({\r\n            totalItems: cached.totalItems,\r\n            nodes: cached.nodes,\r\n          });\r\n          setTotalPages(cached.totalPages);\r\n        } else {\r\n          const metaClusters = await fetchMetaClustersApi(\r\n            controller,\r\n            domain,\r\n            collection,\r\n            apiKey,\r\n            0,\r\n            dateRange[0],\r\n            dateRange[1],\r\n            labelsFilters,\r\n            trendPeriods,\r\n            propertiesFilters,\r\n            currentMetaGroup\r\n          );\r\n          if (metaClusters.error) {\r\n            if (metaClusters.error.includes('AbortError')) {\r\n              return;\r\n            }\r\n\r\n            setError(metaClusters.error);\r\n            return setLoading(false);\r\n          }\r\n          setError(null);\r\n\r\n          const newNodes = metaClusters.data\r\n            .sort((m1, m2) => m2.items_count - m1.items_count)\r\n            .map((c) => {\r\n              return { type: 'Meta' as NodeType, data: c };\r\n            });\r\n          const totalPages = Math.ceil(metaClusters.data.length / PAGE_SIZE);\r\n          const totalItems = metaClusters.data.reduce(\r\n            (prev, current) => prev + current.items_count,\r\n            0\r\n          );\r\n          const slicedNodes = newNodes.slice(\r\n            currentPage * PAGE_SIZE,\r\n            (currentPage + 1) * PAGE_SIZE\r\n          );\r\n\r\n          if (clickedNodes.at(-1) == currentClicked) {\r\n            setCurrentNodes({\r\n              totalItems: totalItems,\r\n              nodes: slicedNodes,\r\n            });\r\n\r\n            setTotalPages(totalPages);\r\n          }\r\n\r\n          setNodesDataInCache(\r\n            'Collection',\r\n            collection + '_meta',\r\n            currentPage,\r\n            slicedNodes,\r\n            totalPages,\r\n            totalItems\r\n          );\r\n        }\r\n      } else if (!currentClicked) {\r\n        const cached = getNodesFromCache(\r\n          COLLECTION_TYPE,\r\n          collection,\r\n          currentPage\r\n        );\r\n        if (cached) {\r\n          setTotalPages(cached.totalPages);\r\n          setCurrentNodes({\r\n            totalItems: cached.totalItems,\r\n            nodes: cached.nodes,\r\n          });\r\n        } else {\r\n          const clusters = await fetchClusters(\r\n            controller,\r\n            domain,\r\n            collection,\r\n            apiKey,\r\n            currentPage,\r\n            dateRange[0],\r\n            dateRange[1],\r\n            [...labelsFilters, ...(metaGroupClicked ? [metaGroupClicked] : [])],\r\n            trendPeriods,\r\n            propertiesFilters\r\n          );\r\n          if (clusters.error) {\r\n            if (clusters.error.includes('AbortError')) {\r\n              return;\r\n            }\r\n\r\n            setError(clusters.error);\r\n            return setLoading(false);\r\n          }\r\n          setError(null);\r\n\r\n          const newNodes = clusters.data.map((c) => {\r\n            return { type: 'Cluster' as NodeType, data: c };\r\n          });\r\n\r\n          if (clickedNodes.at(-1) == currentClicked) {\r\n            setCurrentNodes({\r\n              totalItems: clusters.totalItems,\r\n              nodes: newNodes,\r\n            });\r\n            setTotalPages(clusters.totalPages);\r\n          }\r\n\r\n          setNodesDataInCache(\r\n            'Collection',\r\n            collection,\r\n            currentPage,\r\n            newNodes,\r\n            clusters.totalPages,\r\n            clusters.totalItems\r\n          );\r\n        }\r\n      } else if (currentClicked.type === 'Cluster') {\r\n        const clusterId = (\r\n          currentClicked.data as Cluster\r\n        ).cluster_id.toString();\r\n        const cached = getNodesFromCache(\r\n          currentClicked.type,\r\n          clusterId,\r\n          currentPage\r\n        );\r\n        if (cached) {\r\n          setTotalPages(cached.totalPages);\r\n          setCurrentNodes({\r\n            totalItems: cached.totalItems,\r\n            nodes: cached.nodes,\r\n          });\r\n        } else {\r\n          const phrases = await fetchPhrases(\r\n            controller,\r\n            domain,\r\n            collection,\r\n            clusterId,\r\n            apiKey,\r\n            currentPage,\r\n            dateRange[0],\r\n            dateRange[1],\r\n            [...labelsFilters, ...(metaGroupClicked ? [metaGroupClicked] : [])],\r\n            trendPeriods,\r\n            propertiesFilters\r\n          );\r\n          if (phrases.error) {\r\n            if (phrases.error.includes('AbortError')) {\r\n              return;\r\n            }\r\n            setError(phrases.error);\r\n            return setLoading(false);\r\n          }\r\n          setError(null);\r\n\r\n          const newNodes = phrases.data.map((p) => {\r\n            return { type: 'Phrase' as NodeType, data: p };\r\n          });\r\n\r\n          if (clickedNodes.at(-1) == currentClicked) {\r\n            setCurrentNodes({\r\n              totalItems: phrases.totalItems,\r\n              nodes: newNodes,\r\n            });\r\n            setTotalPages(phrases.totalPages);\r\n          }\r\n          setNodesDataInCache(\r\n            currentClicked.type,\r\n            clusterId,\r\n            currentPage,\r\n            newNodes,\r\n            phrases.totalPages,\r\n            phrases.totalItems\r\n          );\r\n        }\r\n      } else if (currentClicked.type === 'Phrase') {\r\n        const phraseId = (currentClicked.data as Phrase).phrase_id.toString();\r\n        const cached = getNodesFromCache(\r\n          currentClicked.type,\r\n          phraseId,\r\n          currentPage\r\n        );\r\n        if (cached) {\r\n          setTotalPages(cached.totalPages);\r\n          setCurrentNodes({\r\n            totalItems: cached.totalItems,\r\n            nodes: cached.nodes,\r\n          });\r\n        } else {\r\n          const items = await fetchItems(\r\n            controller,\r\n            domain,\r\n            collection,\r\n            phraseId,\r\n            apiKey,\r\n            currentPage,\r\n            dateRange[0],\r\n            dateRange[1],\r\n            [...labelsFilters, ...(metaGroupClicked ? [metaGroupClicked] : [])],\r\n            trendPeriods,\r\n            propertiesFilters\r\n          );\r\n          if (items.error) {\r\n            if (items.error.includes('AbortError')) {\r\n              return;\r\n            }\r\n            setError(items.error);\r\n            return setLoading(false);\r\n          }\r\n          setError(null);\r\n\r\n          const newNodes = items.data.map((i) => {\r\n            return { type: 'Item' as NodeType, data: i };\r\n          });\r\n\r\n          if (clickedNodes.at(-1) == currentClicked) {\r\n            setCurrentNodes({ totalItems: items.totalItems, nodes: newNodes });\r\n            setTotalPages(items.totalPages);\r\n          }\r\n\r\n          setNodesDataInCache(\r\n            currentClicked.type,\r\n            phraseId,\r\n            currentPage,\r\n            newNodes,\r\n            items.totalPages,\r\n            items.totalItems\r\n          );\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n    const controller = new AbortController();\r\n    if (\r\n      previousValues.current.domain !== domain ||\r\n      previousValues.current.apiKey !== apiKey ||\r\n      previousValues.current.collection !== collection ||\r\n      previousValues.current.clickedNodes != clickedNodes ||\r\n      previousValues.current.currentPage !== currentPage ||\r\n      previousValues.current.lastMetaGroup !== currentMetaGroup\r\n    ) {\r\n      fetchMetaClusters(controller).catch((e) => {\r\n        console.error(e);\r\n      });\r\n      fetchData(controller).catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n      });\r\n\r\n      previousValues.current = {\r\n        domain,\r\n        apiKey,\r\n        collection,\r\n        clickedNodes,\r\n        currentPage,\r\n        refreshToken,\r\n        localRefreshToken,\r\n        lastMetaGroup: currentMetaGroup,\r\n      };\r\n    }\r\n\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, [domain, collection, apiKey, clickedNodes, currentPage, currentMetaGroup]);\r\n\r\n  const nodeClicked = (node: { type: NodeType; id: string }) => {\r\n    const currentNodeDetails = getNodeDetails(clickedNodes.at(-1), collection);\r\n\r\n    if (currentMetaGroup !== 'text') {\r\n      return setLocalRefreshToken((current) => {\r\n        const [key, value] = node.id.split('$$');\r\n        setMetaGroupClicked({ key, value });\r\n        setCurrentMetaGroup('text');\r\n        return current.length > 2 ? '1' : current + '1';\r\n      });\r\n    }\r\n\r\n    setNodePageNumberInCache(\r\n      currentNodeDetails.type,\r\n      currentNodeDetails.id,\r\n      currentPage\r\n    );\r\n    let clickedNode: OneAIDataNode | null = null;\r\n    if (node.type === 'Cluster') {\r\n      clickedNode =\r\n        currentNodes.nodes.find(\r\n          (n) => (n.data as Cluster).cluster_id.toString() === node.id\r\n        ) ?? null;\r\n    } else if (node.type === 'Phrase') {\r\n      clickedNode =\r\n        currentNodes.nodes.find(\r\n          (n) => (n.data as Phrase).phrase_id.toString() === node.id\r\n        ) ?? null;\r\n    }\r\n\r\n    if (clickedNode) {\r\n      const nodeCachedPage = getNodePageNumberFromCache(\r\n        clickedNode.type,\r\n        getNodeId(clickedNode)\r\n      );\r\n      setCurrentPage(nodeCachedPage);\r\n      setClickedNodes((currentClickedCluster) => [\r\n        ...currentClickedCluster,\r\n        clickedNode as OneAIDataNode,\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const goBack = (skip: number = 1) => {\r\n    if (skip === 0) {\r\n      if (currentMetaGroup !== 'text') {\r\n        setMetaGroupClicked(null);\r\n        setCurrentMetaGroup('text');\r\n      }\r\n      return;\r\n    }\r\n\r\n    setClickedNodes((clickedClusters) => {\r\n      const originalClickedAmount = clickedClusters.length;\r\n      for (let i = 0; i < skip; i++) {\r\n        clickedClusters.pop();\r\n      }\r\n      const currentNodeDetails = getNodeDetails(\r\n        clickedClusters.at(-1),\r\n        collection\r\n      );\r\n      const nodeCachedPage = getNodePageNumberFromCache(\r\n        currentNodeDetails.type,\r\n        currentNodeDetails.id\r\n      );\r\n      setCurrentPage(nodeCachedPage);\r\n      const extraBackNodes = originalClickedAmount - skip;\r\n      if (extraBackNodes < 0) {\r\n        setLocalRefreshToken((current) => {\r\n          if (extraBackNodes === -1) {\r\n            setCurrentMetaGroup(metaGroupClicked?.key ?? 'text');\r\n            setMetaGroupClicked(null);\r\n          } else {\r\n            setMetaGroupClicked(null);\r\n            setCurrentMetaGroup('text');\r\n          }\r\n          return current.length > 2 ? '1' : current + '1';\r\n        });\r\n      }\r\n      return [...clickedClusters];\r\n    });\r\n  };\r\n\r\n  return currentNodes ? (\r\n    <OneAiAnalytics\r\n      dataNodes={currentNodes ?? { totalItems: 0, nodes: [] }}\r\n      currentNode={clickedNodes.at(-1)}\r\n      nodeClicked={nodeClicked}\r\n      goBackClicked={goBack}\r\n      currentPage={currentPage}\r\n      totalPagesAmount={totalPages}\r\n      nextPageClicked={() => setCurrentPage((page) => page + 1)}\r\n      prevPageClicked={() => setCurrentPage((page) => page - 1)}\r\n      loading={loading}\r\n      error={error}\r\n      nodesPath={[\r\n        { text: collection },\r\n        ...(metaGroupClicked\r\n          ? [\r\n              { text: metaGroupClicked.key },\r\n              { text: metaGroupClicked.value ?? '' },\r\n            ]\r\n          : []),\r\n        ...clickedNodes.map((node) => {\r\n          const { originalText, translatedText } =\r\n            getNodeOriginalAndTranslatedText(node);\r\n          return {\r\n            text: originalText ?? getNodeText(node),\r\n            translated: translatedText,\r\n          };\r\n        }),\r\n      ]}\r\n      dateRangeChanged={(from, to) =>\r\n        setLocalRefreshToken((current) => {\r\n          setDateRange([from, to]);\r\n          return current + '1';\r\n        })\r\n      }\r\n      labelsFilters={labelsFilters}\r\n      labelClicked={(key, value) => {\r\n        if (\r\n          !labelsFilters.some(\r\n            (keyValue) =>\r\n              keyValue.key.toLowerCase() === key.toLowerCase() &&\r\n              keyValue.value?.toLowerCase() === value.toLowerCase()\r\n          )\r\n        )\r\n          setLocalRefreshToken((current) => {\r\n            setLabelsFilters((labels) => [...labels, { key, value }]);\r\n            return current.length > 2 ? '1' : current + '1';\r\n          });\r\n      }}\r\n      labelFilterDeleted={(i) =>\r\n        setLocalRefreshToken((current) => {\r\n          setLabelsFilters((filters) => {\r\n            filters.splice(i, 1);\r\n            return [...filters];\r\n          });\r\n          return current.length > 2 ? '1' : current + '1';\r\n        })\r\n      }\r\n      trendPeriods={trendPeriods}\r\n      trendPeriodsChanged={(newTrendPeriod) =>\r\n        setLocalRefreshToken((current) => {\r\n          setTrendPeriods(newTrendPeriod);\r\n          return current + '1';\r\n        })\r\n      }\r\n      searchSimilarClusters={(text, controller) =>\r\n        searchSimilarClusters(controller, domain, collection, apiKey, text)\r\n      }\r\n      splitPhrase={(phraseId, controller) =>\r\n        splitPhrase(\r\n          controller,\r\n          domain,\r\n          collection,\r\n          apiKey,\r\n          phraseId,\r\n          setLocalRefreshToken\r\n        )\r\n      }\r\n      mergeClusters={(source, destination, controller) =>\r\n        mergeClusters(\r\n          controller,\r\n          domain,\r\n          collection,\r\n          apiKey,\r\n          source,\r\n          destination,\r\n          setLocalRefreshToken\r\n        )\r\n      }\r\n      toggleHide={(node, hide) =>\r\n        toggleHide(\r\n          domain,\r\n          collection,\r\n          apiKey,\r\n          node,\r\n          hide,\r\n          clickedNodes.at(-1),\r\n          setLocalRefreshToken\r\n        )\r\n      }\r\n      propertiesFilters={propertiesFilters}\r\n      setPropertiesFilters={(properties) =>\r\n        setLocalRefreshToken((current) => {\r\n          setPropertiesFilters(properties);\r\n          return current.length > 2 ? '1' : current + '1';\r\n        })\r\n      }\r\n      metaOptions={['text', ...uniqBy(metaOptions, (m) => m.toLowerCase())]}\r\n      currentMetaOption={currentMetaGroup}\r\n      metaOptionsChanged={(metaOptions) => setCurrentMetaGroup(metaOptions)}\r\n      refresh={() =>\r\n        setLocalRefreshToken((current) => {\r\n          return current.length > 2 ? '1' : current + '1';\r\n        })\r\n      }\r\n      {...rest}\r\n    />\r\n  ) : null;\r\n};\r\n\r\nasync function fetchClusters(\r\n  controller: AbortController,\r\n  domain: string,\r\n  collection: string,\r\n  apiKey: string,\r\n  page: number,\r\n  from: Date | null,\r\n  to: Date | null,\r\n  labelsFilters: MetadataKeyValue[],\r\n  trendPeriods: number,\r\n  propertiesFilters: Properties\r\n): Promise<{\r\n  totalPages: number;\r\n  totalItems: number;\r\n  data: Cluster[];\r\n  error: string | null;\r\n}> {\r\n  return await fetchApi(\r\n    controller,\r\n    `${domain}/clustering/v1/collections/${collection}/clusters`,\r\n    apiKey,\r\n    'clusters',\r\n    page,\r\n    from,\r\n    to,\r\n    labelsFilters,\r\n    trendPeriods,\r\n    propertiesFilters\r\n  );\r\n}\r\n\r\nasync function fetchPhrases(\r\n  controller: AbortController,\r\n  domain: string,\r\n  collection: string,\r\n  clusterId: string,\r\n  apiKey: string,\r\n  page: number,\r\n  from: Date | null,\r\n  to: Date | null,\r\n  labelsFilters: MetadataKeyValue[],\r\n  trendPeriods: number,\r\n  propertiesFilters: Properties\r\n): Promise<{\r\n  totalPages: number;\r\n  totalItems: number;\r\n  data: Phrase[];\r\n  error: string | null;\r\n}> {\r\n  return await fetchApi(\r\n    controller,\r\n    `${domain}/clustering/v1/collections/${collection}/clusters/${clusterId}/phrases`,\r\n    apiKey,\r\n    'phrases',\r\n    page,\r\n    from,\r\n    to,\r\n    labelsFilters,\r\n    trendPeriods,\r\n    propertiesFilters\r\n  );\r\n}\r\n\r\nasync function fetchItems(\r\n  controller: AbortController,\r\n  domain: string,\r\n  collection: string,\r\n  phraseId: string,\r\n  apiKey: string,\r\n  page: number,\r\n  from: Date | null,\r\n  to: Date | null,\r\n  labelsFilters: MetadataKeyValue[],\r\n  trendPeriods: number,\r\n  propertiesFilters: Properties\r\n): Promise<{\r\n  totalPages: number;\r\n  totalItems: number;\r\n  data: Item[];\r\n  error: string | null;\r\n}> {\r\n  return await fetchApi(\r\n    controller,\r\n    `${domain}/clustering/v1/collections/${collection}/phrases/${phraseId}/items`,\r\n    apiKey,\r\n    'items',\r\n    page,\r\n    from,\r\n    to,\r\n    labelsFilters,\r\n    trendPeriods,\r\n    propertiesFilters\r\n  );\r\n}\r\n\r\nasync function fetchMetaClustersApi(\r\n  controller: AbortController,\r\n  domain: string,\r\n  collection: string,\r\n  apiKey: string,\r\n  page: number,\r\n  from: Date | null,\r\n  to: Date | null,\r\n  labelsFilters: MetadataKeyValue[],\r\n  trendPeriods: number,\r\n  propertiesFilters: Properties,\r\n  metaGroup?: string\r\n): Promise<{\r\n  totalPages: number;\r\n  totalItems: number;\r\n  data: MetaCluster[];\r\n  error: string | null;\r\n}> {\r\n  return await fetchApi(\r\n    controller,\r\n    `${domain}/clustering/v1/collections/${collection}/metadata${\r\n      metaGroup ? `/${metaGroup}` : ''\r\n    }`,\r\n    apiKey,\r\n    'content',\r\n    page,\r\n    from,\r\n    to,\r\n    labelsFilters,\r\n    trendPeriods,\r\n    propertiesFilters,\r\n    `&group-by-meta-value=true${metaGroup ? '&include-metadata=true' : ''}`,\r\n    1000\r\n  );\r\n}\r\n\r\nasync function fetchApi<T>(\r\n  controller: AbortController,\r\n  url: string,\r\n  apiKey: string,\r\n  accessor: string,\r\n  page: number,\r\n  from: Date | null,\r\n  to: Date | null,\r\n  labelsFilters: MetadataKeyValue[],\r\n  trendPeriods: number,\r\n  propertiesFilters: Properties,\r\n  extraParams?: string,\r\n  limit?: number\r\n): Promise<{\r\n  totalPages: number;\r\n  totalItems: number;\r\n  data: T[];\r\n  error: string | null;\r\n}> {\r\n  const labelsFiltersString = labelsFilters\r\n    .map((metadataKeyValue) =>\r\n      metadataKeyValue.key && metadataKeyValue.value\r\n        ? `${metadataKeyValue.key} eq '${metadataKeyValue.value}'`\r\n        : ''\r\n    )\r\n    .filter((str) => str !== '');\r\n\r\n  const propertiesFiltersString = Object.keys(propertiesFilters).map((key) => {\r\n    const value = propertiesFilters[key];\r\n    if (value) {\r\n      return `${key} neq '${value}'`;\r\n    }\r\n\r\n    return '';\r\n  });\r\n\r\n  try {\r\n    const res = await fetch(\r\n      encodeURI(\r\n        `${url}?page=${page}&limit=${\r\n          limit !== undefined ? limit : PAGE_SIZE\r\n        }&translate=true` +\r\n          (from ? `&from-date=${format(from, 'yyyy-MM-dd')}` : '') +\r\n          (to ? `&to-date=${format(to, 'yyyy-MM-dd')}` : '') +\r\n          (labelsFiltersString.length > 0\r\n            ? `&item-metadata=${labelsFiltersString.join(' and ')}`\r\n            : '') +\r\n          (trendPeriods > 1\r\n            ? `&include-trends=true&trend-periods-limit=${trendPeriods}`\r\n            : '') +\r\n          (propertiesFiltersString.length > 0\r\n            ? `&properties-query=${propertiesFiltersString.join(' and ')}`\r\n            : '') +\r\n          (extraParams ? extraParams : '')\r\n      ),\r\n      {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json', 'api-key': apiKey },\r\n        signal: controller.signal,\r\n      }\r\n    );\r\n\r\n    if (res.status !== 200 || !res.ok)\r\n      return {\r\n        totalPages: 0,\r\n        totalItems: 0,\r\n        data: [],\r\n        error:\r\n          'Error fetching data, status: ' +\r\n          res.status +\r\n          ': ' +\r\n          (await res.text()),\r\n      };\r\n\r\n    const json = await res.json();\r\n\r\n    return {\r\n      totalPages: json['total_pages'],\r\n      totalItems: json['total_items'],\r\n      data: json[accessor],\r\n      error: null,\r\n    };\r\n  } catch (e) {\r\n    const error = String(e);\r\n    console.error('error occurred ->', error);\r\n\r\n    return {\r\n      totalPages: 0,\r\n      totalItems: 0,\r\n      data: [],\r\n      error: `Error fetching data, ${error}`,\r\n    };\r\n  }\r\n}\r\n\r\nfunction getNodesFromCache(\r\n  parentType: string,\r\n  parentId: string,\r\n  page: number\r\n): {\r\n  nodes: OneAIDataNode[];\r\n  totalItems: number;\r\n  totalPages: number;\r\n  time: Date;\r\n} | null {\r\n  const cached = cache.get(assembleCacheId(parentType, parentId, page));\r\n  if (cached && getSecondsDiff(cached.time, new Date()) < 90) {\r\n    return cached;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction setNodesDataInCache(\r\n  parentType: string,\r\n  parentId: string,\r\n  page: number,\r\n  nodes: OneAIDataNode[],\r\n  totalPages: number,\r\n  totalItems: number\r\n) {\r\n  cache.set(assembleCacheId(parentType, parentId, page), {\r\n    nodes: nodes,\r\n    totalPages: totalPages,\r\n    time: new Date(),\r\n    totalItems: totalItems,\r\n  });\r\n}\r\n\r\nfunction getNodePageNumberFromCache(nodeType: string, nodeId: string): number {\r\n  const cached = nodeToPageCache.get(assembleCacheId(nodeType, nodeId));\r\n  if (cached) {\r\n    return cached;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nfunction setNodePageNumberInCache(\r\n  nodeType: string,\r\n  nodeId: string,\r\n  page: number\r\n) {\r\n  nodeToPageCache.set(assembleCacheId(nodeType, nodeId), page);\r\n}\r\n\r\nfunction assembleCacheId(type: string, id: string, page: number = 0): string {\r\n  return `${type}-${id}-${page}`;\r\n}\r\n\r\nasync function searchSimilarClusters(\r\n  controller: AbortController,\r\n  domain: string,\r\n  collection: string,\r\n  apiKey: string,\r\n  text: string\r\n): Promise<\r\n  { id: string; text: string; translation: string | null | undefined }[]\r\n> {\r\n  try {\r\n    const res = await fetch(\r\n      `${domain}/clustering/v1/collections/${collection}/clusters/find?text=${text}&translate=true`,\r\n      {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json', 'api-key': apiKey },\r\n        signal: controller.signal,\r\n      }\r\n    );\r\n\r\n    if (res.status !== 200 || !res.ok) return [];\r\n\r\n    const clusters = (await res.json()) as {\r\n      cluster_id: string;\r\n      cluster_text: string;\r\n      similarity: number;\r\n      item_original_text: string;\r\n      item_translated_text?: null | string;\r\n    }[];\r\n    if (!clusters || clusters.length === 0) return [];\r\n\r\n    return clusters\r\n      .sort((c1, c2) => c2.similarity - c1.similarity)\r\n      .map((c) => {\r\n        return {\r\n          id: c.cluster_id,\r\n          text: c.cluster_text,\r\n          translation: c.item_translated_text,\r\n        };\r\n      });\r\n  } catch (e) {\r\n    console.error('error occurred ->', e);\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function splitPhrase(\r\n  controller: AbortController,\r\n  domain: string,\r\n  collection: string,\r\n  apiKey: string,\r\n  phraseId: string,\r\n  setLocalRefreshToken: React.Dispatch<React.SetStateAction<string>>\r\n): Promise<{ status: 'Success' | 'error'; message: string }> {\r\n  try {\r\n    const res = await fetch(\r\n      `${domain}/clustering/v1/collections/${collection}/phrases/${phraseId}/split`,\r\n      {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json', 'api-key': apiKey },\r\n        signal: controller.signal,\r\n      }\r\n    );\r\n\r\n    if (res.status !== 200 || !res.ok)\r\n      return { status: 'error', message: 'unknown' };\r\n\r\n    const json = await res.json();\r\n\r\n    if (!json.message) {\r\n      setLocalRefreshToken((current) => {\r\n        if (current.length > 5) {\r\n          return '';\r\n        }\r\n\r\n        return current + '1';\r\n      });\r\n    }\r\n\r\n    return json;\r\n  } catch (e) {\r\n    console.error('error occurred ->', e);\r\n    return { status: 'error', message: String(e) };\r\n  }\r\n}\r\n\r\nasync function mergeClusters(\r\n  controller: AbortController,\r\n  domain: string,\r\n  collection: string,\r\n  apiKey: string,\r\n  source: string[],\r\n  destination: string,\r\n  setLocalRefreshToken: React.Dispatch<React.SetStateAction<string>>\r\n): Promise<{ status: 'Success' | 'error'; message: string }> {\r\n  try {\r\n    const res = await fetch(\r\n      `${domain}/clustering/v1/collections/${collection}/merge`,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          'api-key': apiKey,\r\n        },\r\n        body: JSON.stringify({\r\n          source_clusters: source,\r\n          destination_cluster: destination,\r\n        }),\r\n        signal: controller.signal,\r\n      }\r\n    );\r\n\r\n    if (res.status !== 200 || !res.ok)\r\n      return { status: 'error', message: 'unknown' };\r\n\r\n    const json = await res.json();\r\n\r\n    if (!json.message) {\r\n      setLocalRefreshToken((current) => {\r\n        if (current.length > 5) {\r\n          return '';\r\n        }\r\n\r\n        return current + '1';\r\n      });\r\n    }\r\n\r\n    return json;\r\n  } catch (e) {\r\n    console.error('error occurred ->', e);\r\n    return { status: 'error', message: String(e) };\r\n  }\r\n}\r\n\r\nasync function toggleHide(\r\n  domain: string,\r\n  collection: string,\r\n  apiKey: string,\r\n  node: {\r\n    type: NodeType;\r\n    id: string;\r\n    text: string;\r\n    properties: Properties;\r\n  } | null,\r\n  hide: string,\r\n  currentClickedNode: OneAIDataNode | null | undefined,\r\n  setLocalRefreshToken: React.Dispatch<React.SetStateAction<string>>\r\n): Promise<void> {\r\n  if (!node) return;\r\n  try {\r\n    const clusterId =\r\n      node.type === 'Cluster' ? node.id : getNodeId(currentClickedNode!);\r\n    const res = await fetch(\r\n      `${domain}/clustering/v1/collections/${collection}/clusters/${clusterId}${\r\n        node.type === 'Phrase' ? `/phrases/${node.id}` : ''\r\n      }/settings`,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          'api-key': apiKey,\r\n        },\r\n        body: JSON.stringify({\r\n          properties: {\r\n            hide: hide,\r\n          },\r\n        }),\r\n      }\r\n    );\r\n\r\n    if (res.status !== 200 || !res.ok) return;\r\n\r\n    setLocalRefreshToken((current) => {\r\n      if (current.length > 5) {\r\n        return '';\r\n      }\r\n\r\n      return current + '1';\r\n    });\r\n  } catch (e) {\r\n    console.error('error occurred ->', e);\r\n  }\r\n}\r\n","import React, { FC, useEffect, useMemo, useState } from 'react';\r\nimport { PAGE_SIZE } from '../common/configurations/commonConfigurations';\r\nimport {\r\n  ExampleNode,\r\n  NodeType,\r\n  OneAIAnalyticsStaticDataWrapperProps,\r\n  OneAIDataNode,\r\n} from '../common/types/componentsInputs';\r\nimport { Cluster, Item, Phrase } from '../common/types/modals';\r\nimport { chunks } from '../common/utils/utils';\r\nimport { OneAiAnalytics } from '../components/OneAiAnalytics';\r\n\r\n// Please do not use types off of a default export module or else Storybook Docs will suffer.\r\n// see: https://github.com/storybookjs/storybook/issues/9556\r\n/**\r\n * One AI Analytics static data wrapper component\r\n */\r\nexport const OneAIAnalyticsStaticDataWrapper: FC<OneAIAnalyticsStaticDataWrapperProps> =\r\n  ({ exampleNodes, collection = '', ...rest }) => {\r\n    const [currentNodes, setCurrentNodes] = useState(\r\n      exampleNodes as ExampleNode[]\r\n    );\r\n    const [clickedNodes, setClickedNodes] = useState([] as ExampleNode[]);\r\n    const [currentPage, setCurrentPage] = useState(0);\r\n    const currentPages = useMemo(\r\n      () => chunks(currentNodes, PAGE_SIZE),\r\n      [currentNodes]\r\n    );\r\n\r\n    useEffect(() => {\r\n      setClickedNodes([]);\r\n      setCurrentPage(0);\r\n      setCurrentNodes(exampleNodes);\r\n    }, [exampleNodes]);\r\n\r\n    const nodeClicked = (node: { type: NodeType; id: string }) => {\r\n      setCurrentNodes((currentClusters) => {\r\n        const clickedNode = currentPages.at(currentPage)?.at(Number(node.id));\r\n        if (clickedNode) {\r\n          setClickedNodes((currentClickedCluster) => [\r\n            ...currentClickedCluster,\r\n            clickedNode,\r\n          ]);\r\n          setCurrentPage(0);\r\n        }\r\n\r\n        return (\r\n          clickedNode?.children ??\r\n          clickedNode?.items?.map((item) => {\r\n            return { id: item, items_count: 1, text: item, type: 'Item' };\r\n          }) ??\r\n          currentClusters\r\n        );\r\n      });\r\n    };\r\n\r\n    const goBack = (skip: number = 0) => {\r\n      setClickedNodes((clickedClusters) => {\r\n        for (let i = 0; i < skip; i++) {\r\n          clickedClusters.pop();\r\n        }\r\n        setCurrentPage(0);\r\n        setCurrentNodes(clickedClusters.at(-1)?.children ?? exampleNodes);\r\n        return [...clickedClusters];\r\n      });\r\n    };\r\n\r\n    const currentClickedNode: OneAIDataNode | undefined = useMemo(() => {\r\n      const currentClicked = clickedNodes.at(-1);\r\n      if (currentClicked) {\r\n        return {\r\n          type: currentClicked.type,\r\n          data: getNodeData(currentClicked, 0),\r\n        } as OneAIDataNode;\r\n      }\r\n\r\n      return;\r\n    }, [clickedNodes]);\r\n\r\n    return (\r\n      <OneAiAnalytics\r\n        dataNodes={{\r\n          totalItems: exampleNodes.reduce(\r\n            (acc, node) => acc + node.items_count,\r\n            0\r\n          ),\r\n          nodes:\r\n            currentPages.at(currentPage)?.map((node, index) => {\r\n              return { type: node.type, data: getNodeData(node, index)! };\r\n            }) ?? [],\r\n        }}\r\n        currentNode={currentClickedNode}\r\n        nodeClicked={nodeClicked}\r\n        goBackClicked={goBack}\r\n        currentPage={currentPage}\r\n        totalPagesAmount={currentPages.length}\r\n        nextPageClicked={() => setCurrentPage((page) => page + 1)}\r\n        prevPageClicked={() => setCurrentPage((page) => page - 1)}\r\n        nodesPath={[\r\n          { text: collection },\r\n          ...clickedNodes.map((node) => ({ text: node.text })),\r\n        ]}\r\n        {...rest}\r\n      />\r\n    );\r\n  };\r\n\r\nfunction getNodeData(\r\n  node: ExampleNode,\r\n  index: number\r\n): Cluster | Phrase | Item | undefined {\r\n  if (node.type === 'Cluster') {\r\n    return {\r\n      cluster_id: index,\r\n      cluster_phrase: node.text,\r\n      collection: '',\r\n      items_count: node.items_count,\r\n      phrases_count: node.children?.length ?? 0,\r\n      metadata: {},\r\n    } as Cluster;\r\n  }\r\n  if (node.type === 'Phrase') {\r\n    return {\r\n      phrase_id: index,\r\n      metadata: {},\r\n      items_count: node.items_count,\r\n      text: node.text,\r\n    } as Phrase;\r\n  }\r\n  if (node.type === 'Item') {\r\n    return {\r\n      id: index,\r\n      original_text: node.text,\r\n      metadata: {},\r\n    } as Item;\r\n  }\r\n\r\n  return;\r\n}\r\n","import moment from 'moment';\r\nexport const IGNORE_ID = 'False';\r\nexport const CUSTOM_VALUE_ID = 'CUSTOM_VALUE';\r\n\r\nexport const COLUMN_TYPES_OPTIONS = [\r\n  { id: IGNORE_ID, label: 'ignore' },\r\n  { id: 'input', label: 'text' },\r\n  { id: 'input_translated', label: 'translation' },\r\n  {\r\n    id: 'timestamp',\r\n    label: 'date & time',\r\n    validation: (value: string) =>\r\n      moment(value, moment.ISO_8601, true).isValid(),\r\n  },\r\n  { id: CUSTOM_VALUE_ID, label: 'custom value' },\r\n];\r\n","import { Listbox, Transition } from '@headlessui/react';\r\nimport { ChevronDownIcon } from '@heroicons/react/24/outline';\r\nimport React, { Fragment } from 'react';\r\nimport { IGNORE_ID } from './constants';\r\n\r\nexport default function SingleSelect({\r\n  options,\r\n  selectedLabelId,\r\n  onSelect,\r\n}: {\r\n  options: { id: string; label: string }[];\r\n  selectedLabelId: string | null;\r\n  onSelect: (selectedLabelId: string) => void;\r\n}) {\r\n  const selected = options.find((o) => o.id === (selectedLabelId ?? IGNORE_ID));\r\n\r\n  return (\r\n    <Listbox>\r\n      <div className=\"relative bg-[#36334B] rounded-lg min-w-[100px]\">\r\n        <Listbox.Button className=\"relative text-left focus:outline-none text-sm flex items-center px-2 py-2 justify-between w-full\">\r\n          <span className=\"text-[#111111] dark:text-gray-300 text-sm mr-1\">\r\n            {selected?.label ?? 'Unknown'}\r\n          </span>\r\n          <span>\r\n            <ChevronDownIcon\r\n              className=\"h-4 w-4 text-gray-200\"\r\n              aria-hidden=\"true\"\r\n            />\r\n          </span>\r\n        </Listbox.Button>\r\n        <Transition\r\n          as={Fragment}\r\n          leave=\"transition ease-in duration-100\"\r\n          leaveFrom=\"opacity-100\"\r\n          leaveTo=\"opacity-0\"\r\n        >\r\n          <Listbox.Options className=\"absolute mt-1 z-10 p-1 max-h-60 scrollbar-thin scrollbar-thumb-[#747189] scrollbar-track-[#272533] overflow-y-scroll scrollbar-thumb-rounded-full scrollbar-track-rounded-full rounded-md bg-gray-600 dark:bg-[#272533] py-1 text-base shadow-lg ring-1 ring-gray-500 dark:ring-black ring-opacity-5 focus:outline-none sm:text-sm\">\r\n            {options.map((key, i) => (\r\n              <DropdownOption\r\n                label={key.label}\r\n                value={key.id}\r\n                selected={selected?.id === key.id}\r\n                labelClicked={onSelect}\r\n                key={i}\r\n              />\r\n            ))}\r\n          </Listbox.Options>\r\n        </Transition>\r\n      </div>\r\n    </Listbox>\r\n  );\r\n}\r\n\r\nfunction DropdownOption({\r\n  label,\r\n  value,\r\n  selected,\r\n  labelClicked,\r\n}: {\r\n  label: string;\r\n  value: string;\r\n  selected: boolean;\r\n  labelClicked: (label: string) => void;\r\n}) {\r\n  return (\r\n    <Listbox.Option\r\n      className={({ active }) =>\r\n        `relative cursor-default select-none py-2 pr-4 ${\r\n          active\r\n            ? 'bg-gray-400 dark:bg-[#444154] text-white'\r\n            : 'text-gray-300 dark:text-[#747189]'\r\n        }`\r\n      }\r\n      onClick={() => labelClicked(value)}\r\n      value={value}\r\n    >\r\n      <span className=\"w-full flex\">\r\n        <div className=\"flex items-center\">\r\n          <input\r\n            checked={selected}\r\n            onChange={() => {}}\r\n            type=\"radio\"\r\n            className=\"w-4 h-4 text-[#4D4DFE] bg-gray-100 border-gray-300 focus:ring-[#4D4DFE] dark:ring-offset-gray-800 focus:ring-2 dark:bg-[#322F46] dark:border-[#322F46]\"\r\n          />\r\n          <label\r\n            className={`text-sm ml-2 font-medium text-gray-900 dark:text-gray-300 block truncate lowercase first-letter:uppercase ${\r\n              selected ? 'font-medium' : 'font-normal'\r\n            }`}\r\n          >\r\n            {label}\r\n          </label>\r\n        </div>\r\n      </span>\r\n    </Listbox.Option>\r\n  );\r\n}\r\n","import Papa from 'papaparse';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport {\r\n  COLUMN_TYPES_OPTIONS,\r\n  CUSTOM_VALUE_ID,\r\n  IGNORE_ID,\r\n} from '../common/components/UploadCSVComponents/constants';\r\nimport SingleSelect from '../common/components/UploadCSVComponents/SingleSelect';\r\nimport { UploadParams } from '../common/types/componentsInputs';\r\n\r\nconst allowedExtensions = ['csv'];\r\n\r\nconst OneAiUpload = ({\r\n  domain = 'https://api.oneai.com',\r\n  apiKey = '',\r\n  collection = '',\r\n  darkMode = true,\r\n  steps = '',\r\n  input_skill,\r\n  resetAfterUpload = true,\r\n  expected_languages = '',\r\n  override_language_detection = false,\r\n  createCollection = false,\r\n  collectionDomain = 'survey',\r\n  isPublic = false,\r\n}: UploadParams) => {\r\n  const [data, setData] = useState([] as string[][]);\r\n  const [error, setError] = useState(null as string | null);\r\n  const [file, setFile] = useState(null as File | null);\r\n  const [columnsConfigurations, setColumnsConfigurations] = useState(\r\n    [] as { id: string; customText?: string }[]\r\n  );\r\n  const [loading, setLoading] = useState(false);\r\n  const [uploaded, setUploaded] = useState(false);\r\n  const [csvHasHeaders, setCsvHasHeaders] = useState(true);\r\n  const [numberOfRowsToSkip, setNumberOfRowsToSkip] = useState(0);\r\n  const [numberOfRowsToDisplay, setNumberOfRowsToDisplay] = useState(100);\r\n  const [maxRows, setMaxRows] = useState(null as number | null);\r\n  const [taskId, setTaskId] = useState(null as string | null);\r\n  const [uploadStatus, setUploadStatus] = useState(null as string | null);\r\n  const currentParser = useRef(null as Papa.Parser | null);\r\n\r\n  useEffect(() => {\r\n    if (!taskId || !uploaded) return;\r\n    const interval = setInterval(async () => {\r\n      const res = await fetch(\r\n        encodeURI(`${domain}/clustering/v1/collections/status/${taskId}`),\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'api-key': apiKey ?? '',\r\n          },\r\n        }\r\n      );\r\n      const data = await res.json();\r\n      console.log('data status', data);\r\n      if (data.status === 'success') {\r\n        setUploaded(true);\r\n        setUploadStatus('completed');\r\n        if (resetAfterUpload) {\r\n          handleReset();\r\n        }\r\n        clearInterval(interval);\r\n      } else if (data.status === 'failed') {\r\n        setUploadStatus('failed');\r\n        clearInterval(interval);\r\n      } else {\r\n        setUploadStatus('in progress');\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [taskId, uploaded]);\r\n\r\n  const handleFileChange = (e: { target: { files: FileList | null } }) => {\r\n    setError(null);\r\n    setUploaded(false);\r\n    try {\r\n      currentParser.current?.abort();\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\n    const inputFile = e.target.files?.item(0);\r\n    if (!inputFile) return;\r\n\r\n    // Check if user has entered the file\r\n\r\n    // Check the file extensions, if it not\r\n    // included in the allowed extensions\r\n    // we show the error\r\n    const fileExtension = inputFile.type.split('/')[1];\r\n    if (!allowedExtensions.includes(fileExtension)) {\r\n      setError('Please input a csv file');\r\n      return;\r\n    }\r\n\r\n    // If input type is correct set the state\r\n    setFile(inputFile);\r\n    handleParse(inputFile);\r\n  };\r\n\r\n  const handleParse = (file: File) => {\r\n    // If user clicks the parse button without\r\n    // a file we show a error\r\n    if (!file) return setError('Enter a valid file');\r\n\r\n    Papa.parse(file, {\r\n      worker: true, // Don't bog down the main thread if its a big file\r\n      encoding: 'utf-8',\r\n      chunkSize: 512,\r\n      step: function ({ data, errors }, parser) {\r\n        if (errors.length > 0) {\r\n          console.log('errors', errors[0]);\r\n        }\r\n\r\n        currentParser.current = parser;\r\n        setData((prev) => {\r\n          if (prev.length === 0) {\r\n            setColumnsConfigurations(\r\n              (data as string[]).map(() => ({ id: IGNORE_ID }))\r\n            );\r\n          }\r\n\r\n          return [...prev, data as string[]];\r\n        });\r\n      },\r\n      complete: function (results, file) {\r\n        console.log('parsing complete read', results, file);\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setData([]);\r\n    setFile(null);\r\n    setColumnsConfigurations([]);\r\n    setCsvHasHeaders(true);\r\n    setNumberOfRowsToSkip(0);\r\n    setMaxRows(null);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    console.log('uploading');\r\n    if (!file) return;\r\n    setLoading(true);\r\n    if (createCollection) {\r\n      try {\r\n        const res = await fetch(\r\n          encodeURI(`${domain}/clustering/v1/collections/${collection}/create`),\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'api-key': apiKey ?? '',\r\n            },\r\n            body: JSON.stringify({\r\n              access: {\r\n                ...(isPublic && {\r\n                  all: {\r\n                    query: true,\r\n                    list_clusters: true,\r\n                    list_items: true,\r\n                    add_items: false,\r\n                    edit_clusters: false,\r\n                    discoverable: true,\r\n                  },\r\n                }),\r\n              },\r\n              domain: collectionDomain,\r\n            }),\r\n          }\r\n        );\r\n\r\n        if (!res.ok) {\r\n          const error = await res.json();\r\n          console.error('error', error);\r\n          setLoading(false);\r\n          setError(\"Couldn't create collection\");\r\n          return;\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n        setLoading(false);\r\n        setError(\"Couldn't create collection\");\r\n        return;\r\n      }\r\n      console.log('collection created');\r\n    }\r\n\r\n    const fetchFormData = new FormData();\r\n    fetchFormData.append('file', file);\r\n\r\n    const appendSteps: string[] =\r\n      steps.length > 0\r\n        ? steps\r\n            .replaceAll('[', '')\r\n            .replaceAll(']', '')\r\n            .replaceAll(' ', '')\r\n            .split(',')\r\n        : [];\r\n\r\n    const expectedLanguages =\r\n      expected_languages.length > 0\r\n        ? expected_languages\r\n            .replaceAll('[', '')\r\n            .replaceAll(']', '')\r\n            .replaceAll(' ', '')\r\n            .split(',')\r\n        : [];\r\n\r\n    try {\r\n      const pipelineJson = {\r\n        content_type: 'text/csv',\r\n        multilingual: {\r\n          enabled: true,\r\n          ...(expectedLanguages.length > 0 && {\r\n            expected_languages: expectedLanguages,\r\n          }),\r\n          ...(override_language_detection && { override_language_detection }),\r\n        },\r\n        steps: [\r\n          ...(appendSteps.length > 0\r\n            ? appendSteps.map((step) => ({ skill: step }))\r\n            : []),\r\n          {\r\n            skill: 'clustering',\r\n            params: {\r\n              collection,\r\n              ...(input_skill && { input_skill }),\r\n            },\r\n          },\r\n        ],\r\n        csv_params: {\r\n          columns: columnsConfigurations.map((cc) =>\r\n            cc.id === IGNORE_ID\r\n              ? false\r\n              : cc.id === CUSTOM_VALUE_ID\r\n              ? cc.customText\r\n              : cc.id\r\n          ),\r\n          skip_rows: (csvHasHeaders ? 1 : 0) + numberOfRowsToSkip,\r\n          max_rows: maxRows !== null ? maxRows : data.length,\r\n        },\r\n      };\r\n      console.log('pipelineJson', pipelineJson);\r\n\r\n      const uploadRes = await fetch(\r\n        encodeURI(\r\n          `${domain}/api/v0/pipeline/async/file?pipeline=${JSON.stringify(\r\n            pipelineJson\r\n          )}`\r\n        ),\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'text/csv',\r\n            'api-key': apiKey ?? '',\r\n            'Content-Disposition': `attachment; filename=${encodeURI(\r\n              file.name\r\n            )}`,\r\n          },\r\n          body: file,\r\n        }\r\n      );\r\n\r\n      if (!uploadRes.ok) {\r\n        const error = await uploadRes.json();\r\n        console.error('error', error);\r\n        setLoading(false);\r\n        setError(\"Couldn't upload file\");\r\n        return;\r\n      }\r\n\r\n      const statusData = await uploadRes.json();\r\n      console.log('file uploaded', statusData);\r\n      setUploadStatus(statusData['status']);\r\n      setTaskId(statusData['task_id']);\r\n    } catch (e) {\r\n      console.error(e);\r\n      setLoading(false);\r\n      setError(\"Couldn't upload file\");\r\n      return;\r\n    }\r\n\r\n    setError(null);\r\n\r\n    if (resetAfterUpload) {\r\n      handleReset();\r\n    }\r\n\r\n    setUploaded(true);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    ReactTooltip.hide();\r\n    ReactTooltip.rebuild();\r\n  });\r\n\r\n  const uploadDisabled =\r\n    columnsConfigurations.filter((c) => c.id === 'input').length !== 1;\r\n\r\n  return (\r\n    <div\r\n      className={`oneai-analytics-namespace h-full w-full p-2 ${\r\n        darkMode ? 'dark' : ''\r\n      }`}\r\n    >\r\n      <ReactTooltip id=\"global\" />\r\n      <div className=\"h-full w-full overflow-hidden bg-[#272535] flex flex-col items-center text-white\">\r\n        {error ? (\r\n          <div className=\"w-full p-2 relative h-2/6\">\r\n            <div className=\"absolute top-0 right-0 p-2\">\r\n              <svg\r\n                onClick={() => setError(null)}\r\n                className=\"w-6 h-6 text-white cursor-pointer\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth={2}\r\n                  d=\"M6 18L18 6M6 6l12 12\"\r\n                />\r\n              </svg>\r\n            </div>\r\n            <div className=\"w-full h-full flex flex-col items-center justify-center\">\r\n              <svg\r\n                className=\"w-20 h-20 text-red-500\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth={2}\r\n                  d=\"M6 18L18 6M6 6l12 12\"\r\n                />\r\n              </svg>\r\n              <div className=\"text-2xl font-bold mt-2\">{error}</div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {uploaded ? (\r\n          <div className=\"w-full p-2 relative h-2/6\">\r\n            <div className=\"absolute top-0 right-0 p-2\">\r\n              <svg\r\n                onClick={() => setUploaded(false)}\r\n                className=\"w-6 h-6 text-white cursor-pointer\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth={2}\r\n                  d=\"M6 18L18 6M6 6l12 12\"\r\n                />\r\n              </svg>\r\n            </div>\r\n            <div className=\"w-full h-full flex flex-col items-center justify-center\">\r\n              <svg\r\n                className=\"w-20 h-20 text-green-500\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth={2}\r\n                  d=\"M5 13l4 4L19 7\"\r\n                />\r\n              </svg>\r\n              <h1 className=\"text-2xl font-bold mt-4\">Upload Complete</h1>\r\n              <p className=\"text-lg mt-2\">\r\n                {data.length > 0 ? (maxRows ?? data.length) + ' items' : 'Data'}{' '}\r\n                has been uploaded to ' {collection} '\r\n              </p>\r\n              <p>Upload status: {uploadStatus}</p>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n        {data.length > 0 ? (\r\n          <div\r\n            className={`w-full p-2 ${uploaded || error ? 'h-4/6' : 'h-full'}`}\r\n          >\r\n            {loading ? (\r\n              <div className=\"absolute top-0 left-0 w-full h-full bg-black opacity-50 z-10\">\r\n                <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 flex flex-col items-center text-center\">\r\n                  <svg\r\n                    className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                  >\r\n                    <circle\r\n                      className=\"opacity-25\"\r\n                      cx=\"12\"\r\n                      cy=\"12\"\r\n                      r=\"10\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"4\"\r\n                    ></circle>\r\n                    <path\r\n                      className=\"opacity-75\"\r\n                      fill=\"currentColor\"\r\n                      d=\"M4 12a8 8 0 018-8v1a7 7 0 00-7 7h1z\"\r\n                    ></path>\r\n                  </svg>\r\n                  <span className=\"text-white\">Loading...</span>\r\n                </div>\r\n              </div>\r\n            ) : null}\r\n            <div\r\n              className={\r\n                'h-full w-full flex flex-col relative ' +\r\n                (loading ? 'pointer-events-none' : '')\r\n              }\r\n            >\r\n              <div className=\"h-auto w-full flex justify-between\">\r\n                <span className=\"text-gray-200 pl-2\">\r\n                  Select columns for upload to{' '}\r\n                  <span className=\"text-white\">' {collection} '</span>\r\n                </span>\r\n                <div className=\"flex items-center\">\r\n                  <span className=\"text-gray-200 pr-2\">Preview rows</span>\r\n                  <input\r\n                    className=\"w-16 h-8 text-center text-gray-700 dark:text-gray-400 bg-gray-200 dark:bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-600 focus:border-transparent\"\r\n                    type=\"number\"\r\n                    value={numberOfRowsToDisplay}\r\n                    onChange={(e) =>\r\n                      setNumberOfRowsToDisplay(Number(e.target.value))\r\n                    }\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"relative overflow-auto max-h-full block shadow-md sm:rounded-lg grow w-full scrollbar-upload\">\r\n                <table className=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">\r\n                  <thead className=\"text-xs text-gray-700 uppercase dark:text-gray-400 sticky top-0 bg-[#2B293B]\">\r\n                    <tr>\r\n                      {data[0].map((header, i) => (\r\n                        <th\r\n                          key={`${header} - ${i}`}\r\n                          scope=\"col\"\r\n                          className=\"px-2 py-3 w-max\"\r\n                        >\r\n                          <div className=\"w-full flex flex-col items-start\">\r\n                            <div className=\"w-max\">\r\n                              <SingleSelect\r\n                                options={COLUMN_TYPES_OPTIONS}\r\n                                selectedLabelId={\r\n                                  columnsConfigurations[i].id ?? null\r\n                                }\r\n                                onSelect={(selectedLabelId) => {\r\n                                  setColumnsConfigurations((prev) => {\r\n                                    const newColumnsConfigurations = [...prev];\r\n                                    newColumnsConfigurations[i] = {\r\n                                      id: selectedLabelId,\r\n                                      ...(selectedLabelId ===\r\n                                        CUSTOM_VALUE_ID && {\r\n                                        customText: csvHasHeaders\r\n                                          ? header\r\n                                          : `Column ${i + 1}`,\r\n                                      }),\r\n                                    };\r\n                                    return newColumnsConfigurations;\r\n                                  });\r\n                                }}\r\n                              />\r\n                              <div className=\"w-max h-6\">\r\n                                {columnsConfigurations[i].id ===\r\n                                CUSTOM_VALUE_ID ? (\r\n                                  <input\r\n                                    type=\"text\"\r\n                                    className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white\"\r\n                                    placeholder={\r\n                                      columnsConfigurations[i].customText\r\n                                    }\r\n                                    onChange={(e) =>\r\n                                      (columnsConfigurations[i].customText =\r\n                                        e.target.value.length > 0\r\n                                          ? e.target.value\r\n                                          : csvHasHeaders\r\n                                          ? header\r\n                                          : `Column ${i + 1}`)\r\n                                    }\r\n                                  />\r\n                                ) : null}\r\n                              </div>\r\n                            </div>\r\n                            <span className=\"w-max pl-1\">\r\n                              {csvHasHeaders && header\r\n                                ? header\r\n                                : `Column ${i + 1}`}\r\n                            </span>\r\n                          </div>\r\n                        </th>\r\n                      ))}\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className=\"h-96 overflow-y-auto\">\r\n                    {data\r\n                      .slice(csvHasHeaders ? 1 : 0, numberOfRowsToDisplay)\r\n                      .map((row, i) => (\r\n                        <tr\r\n                          key={i}\r\n                          className=\"border-b border-gray-200 dark:border-gray-700\"\r\n                        >\r\n                          {row.map((cell, i) => (\r\n                            <td\r\n                              key={i}\r\n                              className=\"px-2 py-3 max-w-[200px] truncate\"\r\n                            >\r\n                              {cell}\r\n                            </td>\r\n                          ))}\r\n                        </tr>\r\n                      ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <div className=\"absolute bottom-4 w-full\">\r\n                <div className=\"flex justify-between mb-2 p-4 backdrop-blur-[2px]\">\r\n                  <div className=\"flex\">\r\n                    <div className=\"flex items-center mr-4\">\r\n                      <label\r\n                        htmlFor=\"checkbox\"\r\n                        className=\"ml-2 text-sm font-medium text-gray-900 dark:text-gray-300\"\r\n                      >\r\n                        CSV has headers\r\n                      </label>\r\n                      <input\r\n                        checked={csvHasHeaders}\r\n                        onChange={(e) => setCsvHasHeaders(e.target.checked)}\r\n                        id=\"checkbox\"\r\n                        type=\"checkbox\"\r\n                        className=\"w-4 h-4 text-indigo-600 bg-gray-100 border-gray-300 rounded focus:ring-indigo-500 dark:focus:ring-indigo-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex items-center\">\r\n                      <label\r\n                        htmlFor=\"checkbox\"\r\n                        data-for=\"global\"\r\n                        data-tip=\"Limit number of rows to upload\"\r\n                        className=\"ml-2 text-sm font-medium text-gray-900 dark:text-gray-300\"\r\n                      >\r\n                        Upload rows\r\n                      </label>\r\n                      <input\r\n                        value={maxRows ?? data.length}\r\n                        onChange={(e) => setMaxRows(Number(e.target.value))}\r\n                        type=\"number\"\r\n                        className=\"w-16 h-8 text-center text-gray-700 dark:text-gray-400 bg-gray-200 dark:bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-600 focus:border-transparent\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex items-center\">\r\n                      <label\r\n                        htmlFor=\"checkbox\"\r\n                        className=\"ml-2 text-sm font-medium text-gray-900 dark:text-gray-300\"\r\n                      >\r\n                        Skip rows\r\n                      </label>\r\n                      <input\r\n                        value={numberOfRowsToSkip}\r\n                        onChange={(e) =>\r\n                          setNumberOfRowsToSkip(Number(e.target.value))\r\n                        }\r\n                        type=\"number\"\r\n                        className=\"w-16 h-8 text-center text-gray-700 dark:text-gray-400 bg-gray-200 dark:bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-600 focus:border-transparent\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex\">\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={handleReset}\r\n                      className=\"text-gray-400 font-medium px-5 text-center hover:text-gray-300 mr-12\"\r\n                    >\r\n                      Cancel\r\n                    </button>\r\n                    <span\r\n                      data-for=\"global\"\r\n                      data-tip={\r\n                        uploadDisabled\r\n                          ? 'You must select one column for text'\r\n                          : 'Upload items'\r\n                      }\r\n                    >\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => handleUpload()}\r\n                        disabled={uploadDisabled}\r\n                        className={`font-medium rounded-sm text-sm px-5 py-2.5 text-center ${\r\n                          uploadDisabled\r\n                            ? 'bg-gray-500 text-gray-200'\r\n                            : 'text-white bg-indigo-500 hover:bg-indigo-800 focus:outline-none focus:ring-4 focus:ring-indigo-300 dark:bg-indigo-600 dark:hover:bg-indigo-700 dark:focus:ring-indigo-800'\r\n                        }`}\r\n                      >\r\n                        Upload {maxRows ?? data.length} items\r\n                      </button>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <span className={`${uploaded ? 'mt-4' : 'mt-36'}`}>\r\n              Your collection is empty, add items to populate it\r\n            </span>\r\n            <div className=\"mt-4 w-96\">\r\n              <div className=\"flex items-center justify-center w-full\">\r\n                <label\r\n                  htmlFor=\"dropzone-file\"\r\n                  className=\"flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600\"\r\n                >\r\n                  <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\r\n                    <svg\r\n                      aria-hidden=\"true\"\r\n                      className=\"w-10 h-10 mb-3 text-gray-400\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                      <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        strokeWidth=\"2\"\r\n                        d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"\r\n                      ></path>\r\n                    </svg>\r\n                    <p className=\"mb-2 text-sm text-gray-500 dark:text-gray-400\">\r\n                      <span className=\"font-semibold\">Click to upload CSV</span>{' '}\r\n                      or drag and drop\r\n                    </p>\r\n                    <ul className=\"w-full flex-wrap list-disc\">\r\n                      <li className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\r\n                        Up to 255 characters per cell\r\n                      </li>\r\n                      <li className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\r\n                        Up to 1GB\r\n                      </li>\r\n                      <li className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\r\n                        Up to 250 columns\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                  <input\r\n                    onChange={handleFileChange}\r\n                    id=\"dropzone-file\"\r\n                    type=\"file\"\r\n                    className=\"hidden\"\r\n                  />\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OneAiUpload;\r\nexport { OneAiUpload };\r\n"],"names":["sum","numbers","reduce","partialSum","a","uniqBy","arr","getKey","seen","Set","filter","item","k","has","add","toLowerKeys","obj","Object","keys","accumulator","key","toLowerCase","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","numberToFixed","num","Math","round","Number","EPSILON","customNumberToFixed","integer","abs","toString","split","length","parseFloat","toFixed","totalSumCalculation","metadataKeyValue","metadata","_","countersConfigurations","__","counter","getMetadataKeyValueConfiguration","result","calculateSumItemsInMetadata","members","items","getMetadataKeyValueGroups","getCounterGroups","_counter$items$filter","_counter$items","group","_group$isGroup","isGroup","hasMultipleMembers","_counter$members","forEach","member","_member$values$length","_member$values","values","_keyConfig$items","entries","keyConfig","fromEntries","map","_ref","value","memberConfig","find","_group$label","_metadataKeyValue$val","label","display","groups","getValuesAndCounts","count","getMaxItemValue","prev","current","_groups$flatMap","lowerKeysMetadata","membersData","filterRelevantValues","flatMap","_group$members","_members$flatMap","_member$metadataName","metadataName","undefined","_member$values2","includes","_ref2","getItemCounterConfiguration","_counterConfig$items","valueCounterConfig","topValuePercentCalculationConfiguration","name","hasGroups","calculate","_getItemCounterConfig","max","metadataKey","percentOfAllItemsCalculationConfiguration","totalItems","itemCounter","keyCounter","CUSTOM_METADATA_KEY","itemCount","keyCount","defaultCalculations","_getItemCounterConfig2","maxItem","sums","apply","maxGroup","indexOf","groupsSum","trends","_trendsCounts$at","previous","trendsCounts","trend","latestTrend","at","previousTrendsSum","slice","floor","getNodeText","node","data","cluster_phrase","text","meta_value","original_text","getNodeId","cluster_id","phrase_id","meta_key","id","getNodeDetails","collection","_node$type","currentNodeType","getNodeTrends","_node$data$trends","_node$data$trends2","_node$data$trends3","getNodeOriginalAndTranslatedText","originalText","translatedText","_cluster$item_transla","cluster","item_original_text","item_translated_text","LabelDisplay","labelClicked","_ref$tooltip","tooltip","width","_ref$maxWidth","maxWidth","color","config","countersConfiguration","React","className","onClick","icon","marginLeft","LabelsFiltersSelect","selectedLabels","selectedMetadataKeyValueChange","Listbox","Button","height","FunnelIcon","ChevronUpDownIcon","Transition","as","Fragment","leave","leaveFrom","leaveTo","Options","sort","b","meta","_countersConfiguratio","_countersConfiguratio2","_countersConfiguratio3","i","CascadedOption","optionName","index","selected","_configData$items","keySelected","some","s","_useState","useState","opened","setOpened","configData","MetadataTitle","ChevronUpIcon","ChevronDownIcon","DropdownOption","keyVal","pl","_ref3","Option","paddingLeft","_ref4","active","_ref5","_ref5$pl","_ref6","checked","SingleSelect","options","selectedLabel","onSelect","onChange","numberFormatter","Intl","NumberFormat","getMetadataKeyValueDisplay","getBackgroundColorLayers","colorAxis","counters","findIndex","firstCounter","secondCounter","calculationConfiguration","firstKeyValue","secondKeyValue","areKeyValuesSameLevel","areCountersCanBeGrouped","push","groupCounters","countersGroup","backgroundString","totalPercentage","_group$counter$displa","_group$counter","_group$counter$displa2","str","CounterDisplay","displayResult","getMetadataValueTitle","format","ArrowUpIcon","ArrowDownIcon","ArrowsUpDownIcon","numIn","decPlaces","prefix","pow","abbrev","strResult","size","getNumberDescription","MaxLabelDisplay","_lowerKeysMetadata$me","CountersLabelsDisplay","labels","counterWidth","counterMaxWidth","labelWidth","labelMaxWidth","_ref$pl","KeyValueSingleSelect","placeholder","by","_metadataKeyValue$key","Counters","calculationsConfigurations","currentCounters","countersChanged","addCounterText","title","addedCounter","Counter","counterData","counterDeleted","splice","concat","counterChanged","newMetadataKeyValue","allowedCalculations","getCalculationTypes","getDefaultCalculation","calc","newCounter","textA","textB","XMarkIcon","calculationTypes","selectedMetadataKeyValue","keyValueHasMultipleMembers","_allowedCalculations$","Labels","labelsOptions","labelsChanged","_ref$title","currentLabels","setSelectedLabels","newLabels","multiple","CustomizeTab","currentColorsAxis","selectedSizeAxis","colorsAxisChanged","sizeAxisChanged","Popover","open","enter","enterFrom","enterTo","Panel","tabIndex","Datepicker","selectedDate","dateChanged","_ref$placeholder","dayCount","setDayCount","_useState2","blankDays","setBlankDays","_useState3","showDatepicker","setShowDatepicker","_useState4","Date","datepickerHeaderDate","setDatepickerHeaderDate","_useState5","setType","isToday","date","isEqual","getFullYear","getMonth","isSelectedMonth","month","getDate","toggleDatepicker","useEffect","daysInMonth","getDaysInMonth","dayOfWeek","getDay","blankDaysArray","daysArray","getDayCount","htmlFor","readOnly","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","subMonths","subYears","addMonths","addYears","day","Array","DatesFilters","fromDate","toDate","fromDateChanged","toDateChanged","trendPeriods","trendPeriodsChanged","CalendarDaysIcon","e","target","ItemActions","searchSimilarClusters","splitPhrase","mergeClusters","translationEnabled","controller","useRef","isOpen","setIsOpen","loading","setLoading","action","setAction","similarClusters","setSimilarClusters","selectedClusters","setSelectedClusters","_useState6","searchText","setSearchText","_useState7","error","setError","_useState8","mergeTo","setMergeTo","closeModal","_invokeAction","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","res","firstSelectedCluster","_res","wrap","_context2","next","abrupt","sent","message","stop","this","arguments","abort","AbortController","fetchData","_callee","_context","t0","console","finish","_x","currentController","appear","show","Dialog","onClose","Child","Title","required","Switch","state","role","xmlns","ClustersList","clusters","c","clusterSelected","clusterId","_current$filter","disabled","RadioGroup","Label","_selected$some","translation","CheckIcon","props","_extends","cx","cy","r","opacity","defaultCountersConfigurations","signals","HandThumbUpIcon","HandThumbDownIcon","FaceSmileIcon","FaceFrownIcon","person","UserIcon","topic","HashtagIcon","keyword","KeyIcon","geo","GlobeAltIcon","org","BuildingOffice2Icon","location","MapPinIcon","UsersIcon","art","FilmIcon","law","ScaleIcon","event","CalendarIcon","sentiment","emotion","HeartIcon","score","ColorsAxis","colorsConfig","colorConfig","background","marginTop","BarChart","dataNodes","nodeClicked","barColor","fontFamily","textColor","sizeAxis","translate","nodeActionsClicked","actionsVisible","setActionsVisible","barsHeight","setGroups","amount","_d$text","yScale","useMemo","scaleBand","domain","range","padding","_extent$","extent","xScale","scaleLinear","allShapes","_yScale","_d$text2","y","xWidth","min","barWidth","x","fillOpacity","rx","onMouseEnter","onMouseLeave","fontWeight","fontStyle","fontSize","dir","EllipsisHorizontalIcon","ItemsListDisplay","backgroundColor","bgColor","_counter$metadataKeyV","item_date","create_date","parse","_counter$metadataKeyV2","Treemap","bigColor","smallColor","_ref$countFontSize","countFontSize","_ref$borderWidth","borderWidth","borderColor","mainNode","children","properties","treeHierarchy","elementsValues","maxElementValue","elementsSum","growFactor","hierarchy","n1","n2","root","treemap","treeGenerator","colors","len","leaves","valid","scale","leaf","y1","y0","x1","x0","calculateFontSize","lineHeight","lines","hex","borderRightWidth","borderLeftWidth","borderBottomWidth","wordBreak","WebkitLineClamp","WebkitTouchCallout","WebkitBoxOrient","OneAiAnalytics","_currentHoveredNode$p2","_labelsFilters$length","_ref$dataNodes","nodes","currentNode","_ref$currentPage","currentPage","_ref$totalPagesAmount","totalPagesAmount","_ref$goBackClicked","goBackClicked","_ref$nodeClicked","_ref$nextPageClicked","nextPageClicked","_ref$prevPageClicked","prevPageClicked","_ref$itemsDisplay","itemsDisplay","_ref$darkMode","darkMode","_ref$treemapBigColor","treemapBigColor","_ref$treemapSmallColo","treemapSmallColor","_ref$treemapCountFont","treemapCountFontSize","_ref$fontFamily","_ref$textColor","_ref$treemapBorderWid","treemapBorderWidth","navbarColor","_ref$treemapBorderCol","treemapBorderColor","_ref$barColor","_ref$error","_ref$nodesPath","nodesPath","_ref$dateRangeChanged","dateRangeChanged","labelsFilters","_ref$labelClicked","_ref$labelFilterDelet","labelFilterDeleted","_ref$translationEnabl","_ref$toggleHide","toggleHide","_ref$propertiesFilter","propertiesFilters","_ref$setPropertiesFil","setPropertiesFilters","metaOptions","currentMetaOption","_ref$metaOptionsChang","metaOptionsChanged","_ref$refresh","refresh","setDisplay","_useResizeDetector","useResizeDetector","metaData","setMetaData","setNodes","setLabels","setCounters","setSizeAxis","setColorAxis","setCountersConfigurations","_useState9","currentNodeActions","setCurrentNodeActions","_useState10","setTranslate","_useState11","setFromDate","_useState12","setToDate","loadedNodes","currentCollection","_useState13","currentHoveredNode","setCurrentHoveredNode","_localStorage$getItem","JSON","localStorage","getItem","getCurrentStorageKey","getInitialCounterTypes","calculationName","storedSizeAxis","currentMetadata","_currentNode$data$met","_currentNode$type","_loadedNodes$current","newMetadata","loadedNode","mergeMetadata","finalMetadata","_extends2","itemsCount","items_count","nodeText","_getNodeOriginalAndTr","newCountersConfigurations","_defaultConfig$items$","_defaultConfig$items","_defaultConfig$label","_defaultConfig$member","_defaultConfig$isGrou","_defaultConfig$items$2","_defaultConfig$items2","_metaData$key$filter$","_metaData$key","defaultConfig","valuesConfigured","counterConfiguration","_group$members$map","storedCounters","storedColorAxis","setItem","stringify","ReactTooltip","hide","rebuild","place","effect","clickable","_currentHoveredNode$p","getVisualizationLogoClasses","ArrowPathIcon","EyeIcon","EyeSlashIcon","LanguageIcon","x2","y2","HomeIcon","translated","lastIndexOf","substring","keyValue","_keyValue$value","trends1","trends2","newTrends","sourceTrends","_trends1$at$items_cou","_trends1$at","_trends2$at$items_cou","_trends2$at","_trends1$at$phrases_c","_trends1$at2","_trends2$at$phrases_c","_trends2$at2","_trends1$at$metadata","_trends1$at3","_trends2$at$metadata","_trends2$at3","days","period_start_date","period_end_date","phrases_count","mergeTrends","fillRule","clipRule","dataNode","_node$text","_node$text2","metadata1","metadata2","from","_metadata1$key","_metadata2$key","defaultCounters","storageKey","_localStorage$getItem2","cache","Map","nodeToPageCache","fetchClusters","_x3","_x4","_x5","_x6","_x7","_x8","_x9","_x10","_x11","_x12","_fetchClusters","_callee3","apiKey","page","to","_context3","fetchApi","fetchPhrases","_x13","_x14","_x15","_x16","_x17","_x18","_x19","_x20","_x21","_x22","_x23","_fetchPhrases","_callee4","_context4","fetchItems","_x24","_x25","_x26","_x27","_x28","_x29","_x30","_x31","_x32","_x33","_x34","_fetchItems","_callee5","phraseId","_context5","fetchMetaClustersApi","_x35","_x36","_x37","_x38","_x39","_x40","_x41","_x42","_x43","_x44","_x45","_fetchMetaClustersApi","_callee6","metaGroup","_context6","_x46","_x47","_x48","_x49","_x50","_x51","_x52","_x53","_x54","_x55","_x56","_x57","_fetchApi","_callee7","url","accessor","extraParams","limit","labelsFiltersString","propertiesFiltersString","json","_context7","fetch","encodeURI","join","method","headers","signal","status","ok","t1","t2","t3","totalPages","t4","String","getNodesFromCache","parentType","parentId","startDate","diff","cached","get","assembleCacheId","time","getTime","setNodesDataInCache","set","getNodePageNumberFromCache","nodeType","nodeId","_searchSimilarClusters2","_callee8","_context8","c1","c2","similarity","cluster_text","_splitPhrase2","_callee9","setLocalRefreshToken","_context9","_mergeClusters2","_callee10","source","destination","_context10","Accept","body","source_clusters","destination_cluster","_toggleHide2","_callee11","currentClickedNode","_context11","getNodeData","_node$children$length","_node$children","COLUMN_TYPES_OPTIONS","validation","moment","ISO_8601","isValid","_selected$label","selectedLabelId","o","allowedExtensions","_metaGroupClicked$val","_ref$domain","_ref$apiKey","_ref$collection","_ref$refreshToken","refreshToken","rest","_objectWithoutPropertiesLoose","_excluded","currentNodes","setCurrentNodes","clickedNodes","setClickedNodes","setCurrentPage","setTotalPages","dateRange","setDateRange","setLabelsFilters","localRefreshToken","setTrendPeriods","setMetaOptions","currentMetaGroup","setCurrentMetaGroup","_useState14","metaGroupClicked","setMetaGroupClicked","previousValues","lastMetaGroup","fetchMetaClusters","newNodes","mappedNodes","n","clear","currentClicked","metaClusters","_totalPages","slicedNodes","_cached","_newNodes","_cached2","phrases","_newNodes2","_cached3","_newNodes3","m1","m2","ceil","p","_x2","currentNodeDetails","_node$id$split","_currentNodes$nodes$f","clickedNode","_currentNodes$nodes$f2","nodeCachedPage","currentClickedCluster","skip","clickedClusters","originalClickedAmount","pop","extraBackNodes","_metaGroupClicked$key","filters","newTrendPeriod","_x58","_x59","_x60","_x61","_x62","_x63","_x64","_x65","_x66","_x67","_x68","_x69","_x70","_x71","_x72","_x73","_x74","_x75","_x76","_x77","_x78","_x79","_x80","_x81","_x82","m","_currentPages$at$map","_currentPages$at2","exampleNodes","currentPages","acc","currentClusters","_currentPages$at","_clickedNode$children","_clickedNode$items","_clickedClusters$at$c","_clickedClusters$at","_ref$steps","steps","input_skill","_ref$resetAfterUpload","resetAfterUpload","_ref$expected_languag","expected_languages","_ref$override_languag","override_language_detection","_ref$createCollection","createCollection","_ref$collectionDomain","collectionDomain","_ref$isPublic","isPublic","setData","file","setFile","columnsConfigurations","setColumnsConfigurations","uploaded","setUploaded","csvHasHeaders","setCsvHasHeaders","numberOfRowsToSkip","setNumberOfRowsToSkip","numberOfRowsToDisplay","setNumberOfRowsToDisplay","maxRows","setMaxRows","taskId","setTaskId","uploadStatus","setUploadStatus","currentParser","interval","setInterval","log","handleReset","clearInterval","handleUpload","appendSteps","expectedLanguages","pipelineJson","uploadRes","statusData","access","all","query","list_clusters","list_items","add_items","edit_clusters","discoverable","FormData","append","replaceAll","content_type","multilingual","enabled","step","skill","params","csv_params","columns","cc","customText","skip_rows","max_rows","uploadDisabled","header","_columnsConfiguration","scope","newColumnsConfigurations","row","cell","_e$target$files","_currentParser$curren","inputFile","files","fileExtension","Papa","worker","encoding","chunkSize","parser","errors","complete","results","handleParse"],"mappings":"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"}